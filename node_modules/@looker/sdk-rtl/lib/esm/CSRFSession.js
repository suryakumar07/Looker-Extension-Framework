function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { BrowserTransport } from './browserTransport';
import { AuthSession } from './authSession';
export class CSRFSession extends AuthSession {
  constructor(settings, transport) {
    super(settings, transport || new BrowserTransport(settings));
    this.settings = settings;

    _defineProperty(this, "_activeToken", '');
  }

  get activeToken() {
    if (!this._activeToken) {
      var meta = document.head.querySelector('[name=csrf-token]');
      this._activeToken = meta ? meta.content : '';
    }

    return this._activeToken;
  }

  getToken() {
    var _this = this;

    return _asyncToGenerator(function* () {
      return _this.activeToken;
    })();
  }

  isAuthenticated() {
    var token = this.activeToken;
    if (!token) return false;
    return true;
  }

  authenticate(props) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      var token = _this2.activeToken;
      if (token) props.headers['X-CSRF-TOKEN'] = token;
      return props;
    })();
  }

}
//# sourceMappingURL=CSRFSession.js.map