{"version":3,"sources":["../../src/transport.ts"],"names":["matchCharsetUtf8","matchModeBinary","matchModeString","DelimArray","LookerSDKError","agentPrefix","LookerAppId","tracing","trace","message","info","console","debug","ResponseMode","contentPatternString","RegExp","contentPatternBinary","charsetUtf8Pattern","defaultTimeout","StatusCode","responseMode","contentType","match","string","binary","unknown","isUtf8","encodeParam","value","Date","toISOString","toString","encoded","JSON","stringify","decoded","decodeURIComponent","encodeURIComponent","e","URIError","encodeParams","values","keys","Object","filter","k","undefined","map","join","addQueryParams","path","obj","qp","utf8","bufferString","val","result","decoder","TextDecoder","decode","Buffer","from","err","sdkError","response","error","errors","documentation_url","statusMessage","sdkOk","promise","ok","safeBase64","u8","rawBase64","btoa","String","fromCharCode","replace","isErrorLike","prototype","hasOwnProperty","call"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { Agent } from 'https'\nimport type { Headers } from 'request'\nimport type { Readable } from 'readable-stream'\nimport { matchCharsetUtf8, matchModeBinary, matchModeString } from './constants'\nimport { DelimArray } from './delimArray'\nimport { LookerSDKError } from './lookerSDKError'\n\nexport const agentPrefix = 'TS-SDK'\nexport const LookerAppId = 'x-looker-appid'\n\n/** Set to `true` to follow streaming process */\nconst tracing = false\n\n/**\n * trivial tracing function that should be replaced with a log plugin\n * @param message description for trace\n * @param info any additional information to produce for output\n */\nexport function trace(message: string, info?: any) {\n  if (tracing) {\n    // eslint-disable-next-line no-console\n    console.debug(message)\n    if (info) {\n      // eslint-disable-next-line no-console\n      console.debug({ info })\n    }\n  }\n}\n\n/** ResponseMode for an HTTP request */\nexport enum ResponseMode {\n  'binary', // this is a binary response\n  'string', // this is a \"string\" response\n  'unknown', // unrecognized response type\n}\n\n/**\n * MIME patterns for string content types\n * @type {RegExp}\n */\nexport const contentPatternString = new RegExp(matchModeString, 'i')\n\n/**\n * MIME patterns for \"binary\" content types\n * @type {RegExp}\n */\nexport const contentPatternBinary = new RegExp(matchModeBinary, 'i')\n\n/**\n * MIME pattern for UTF8 charset attribute\n * @type {RegExp}\n */\nexport const charsetUtf8Pattern = new RegExp(matchCharsetUtf8, 'i')\n\n/**\n * Default request timeout\n * @type {number} default request timeout is 120 seconds, or two minutes\n */\nexport const defaultTimeout = 120\n\n/** Recognized HTTP methods */\nexport type HttpMethod =\n  | 'GET'\n  | 'POST'\n  | 'PUT'\n  | 'DELETE'\n  | 'PATCH'\n  | 'TRACE'\n  | 'HEAD'\n\n/**\n * HTTP status codes\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Status for reference\n * TODO is there a platform-agnostic list of these that can be used instead of this static declaration?\n */\nexport enum StatusCode {\n  OK = 200,\n  Created,\n  Accepted,\n  NonAuthoritative,\n  NoContent,\n  ResetContent,\n  PartialContent,\n  MultiStatus,\n  MultiStatusDav,\n  IMUsed = 226,\n  MultipleChoice = 300,\n  MovedPermanently,\n  Found,\n  SeeOther,\n  NotModified,\n  UseProxy,\n  UnusedRedirect,\n  TemporaryRedirect,\n  PermanentRedirect,\n  BadRequest = 400,\n  Unauthorized,\n  PaymentRequired,\n  Forbidden,\n  NotFound,\n  MethodNotAllowed,\n  NotAcceptable,\n  ProxyAuthRequired,\n  RequestTimeout,\n  Conflict,\n  Gone,\n  LengthRequired,\n  PreconditionFailed,\n  PayloadTooLarge,\n  UriTooLong,\n  UnsupportedMediaType,\n  RequestedRangeNotSatisfiable,\n  ExpectationFailed,\n  ImATeapot,\n  MisdirectedRequest = 421,\n  UnprocessableEntity,\n  Locked,\n  FailedDependency,\n  TooEarly,\n  UpgradeRequired,\n  PreconditionRequired = 428,\n  TooManyRequests,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n  InternalServerError = 500,\n  NotImplemented,\n  BadGateway,\n  ServiceUnavailable,\n  GatewayTimeout,\n  HttpVersionNotSupported,\n  VariantAlsoNegotiates,\n  InsufficientStorage,\n  LoopDetected,\n  NotExtended = 510,\n  NetworkAuthRequired,\n}\n\n/** Untyped basic HTTP response type for \"raw\" HTTP requests */\nexport interface IRawResponse {\n  /** Http method of the request */\n  method: HttpMethod\n  /** ok is `true` if the response is successful, `false` otherwise */\n  ok: boolean\n  /** HTTP request url */\n  url: string\n  /** HTTP response code */\n  statusCode: number\n  /** HTTP response status message text */\n  statusMessage: string\n  /** MIME type of the response from the HTTP response header */\n  contentType: string\n  /** The body of the HTTP response, without any additional processing */\n  body: any\n  /** Optional performance tracking starting mark name */\n  startMark?: string\n  /** Response headers */\n  headers: IRequestHeaders\n  /** Request start time */\n  requestStarted: number\n  /** Completion time for request */\n  responseCompleted: number\n}\n\n/** IRawResponse observer function type */\nexport type RawObserver = (raw: IRawResponse) => IRawResponse\n\n/** Transport plug-in interface */\nexport interface ITransport {\n  /** Observer lambda to process raw responses */\n  observer: RawObserver | undefined\n\n  /**\n   * HTTP request function for atomic, fully downloaded raw HTTP responses\n   *\n   * Note: This method returns the result of the HTTP request without any error handling\n   *\n   * @param method of HTTP request\n   * @param path request path, either relative or fully specified\n   * @param queryParams name/value pairs to pass as part of the URL\n   * @param body data for the body of the request\n   * @param authenticator authenticator callback, typically from `IAuthSession` implementation\n   * @param options overrides of default transport settings\n   * @returns typed response of `TSuccess`, or `TError` result\n   */\n  rawRequest(\n    method: HttpMethod,\n    path: string,\n    queryParams?: Values,\n    body?: any,\n    authenticator?: Authenticator,\n    options?: Partial<ITransportSettings>\n  ): Promise<IRawResponse>\n\n  /**\n   * HTTP request function for atomic, fully downloaded responses\n   * @param method of HTTP request\n   * @param path request path, either relative or fully specified\n   * @param queryParams name/value pairs to pass as part of the URL\n   * @param body data for the body of the request\n   * @param authenticator authenticator callback, typically from `IAuthSession` implementation\n   * @param options overrides of default transport settings\n   * @returns typed response of `TSuccess`, or `TError` result\n   */\n  request<TSuccess, TError>(\n    method: HttpMethod,\n    path: string,\n    queryParams?: Values,\n    body?: any,\n    authenticator?: Authenticator,\n    options?: Partial<ITransportSettings>\n  ): Promise<SDKResponse<TSuccess, TError>>\n\n  /**\n   * Processes the raw response, converting it into an SDKResponse\n   * @param raw response result\n   */\n  parseResponse<TSuccess, TError>(\n    raw: IRawResponse\n  ): Promise<SDKResponse<TSuccess, TError>>\n\n  /**\n   * HTTP request function for a streamable response\n   * @param callback that receives the stream response and pipes it somewhere\n   * @param method of HTTP request\n   * @param path request path, either relative or fully specified\n   * @param queryParams name/value pairs to pass as part of the URL\n   * @param body data for the body of the request\n   * @param authenticator authenticator callback, typically from `IAuthSession` implementation\n   * @param options overrides of default transport settings\n   * @returns `T` upon success\n   * @throws `ISDKErrorResponse` on failure\n   */\n  stream<T>(\n    callback: (readable: Readable) => Promise<T>,\n    method: HttpMethod,\n    path: string,\n    queryParams?: Values,\n    body?: any,\n    authenticator?: Authenticator,\n    options?: Partial<ITransportSettings>\n  ): Promise<T>\n}\n\n/** A successful SDK call. */\nexport interface ISDKSuccessResponse<T> {\n  /** Whether the SDK call was successful. */\n  ok: true\n  /** The object returned by the SDK call. */\n  value: T\n}\n\n/** An errant SDK call. */\nexport interface ISDKErrorResponse<T> {\n  /** Whether the SDK call was successful. */\n  ok: false\n  /** The error object returned by the SDK call. */\n  error: T\n}\n\n/** An error representing an issue in the SDK, like a network or parsing error. */\nexport interface ISDKError {\n  type: 'sdk_error'\n  message: string\n}\n\nexport type SDKResponse<TSuccess, TError> =\n  | ISDKSuccessResponse<TSuccess>\n  | ISDKErrorResponse<TError | ISDKError>\n\n/** Generic collection */\nexport interface IRequestHeaders {\n  [key: string]: string\n}\n\n/**\n * Generic http request property collection\n * TODO: Trim this down to what is required\n */\nexport interface IRequestProps {\n  [key: string]: any\n  /** full url for request, including any query params */\n  url: string\n\n  /** body of request. optional */\n  body?: any\n  /** headers for request. optional */\n  headers: IRequestHeaders\n  /** Http method for request. required. */\n  method: HttpMethod\n  /** Redirect processing for request. optional */\n  redirect?: any\n  /** Credentials to use */\n  credentials?: 'include' | 'omit' | 'same-origin' | undefined\n\n  /** http.Agent instance, allows custom proxy, certificate etc. */\n  agent?: Agent\n  /** support gzip/deflate content encoding. false to disable */\n  compress?: boolean\n  /** maximum redirect count. 0 to not follow redirect */\n  follow?: number\n  /** maximum response body size in bytes */\n  size?: number\n  /** req/res timeout in ms, it resets on redirect. 0 to disable (OS limit applies) */\n  timeout?: number\n}\n\n/** General purpose authentication callback */\nexport type Authenticator = (props: any) => any\n\n/** Interface for API transport values */\nexport interface ITransportSettings {\n  [key: string]: any\n  /** base URL of API REST web service */\n  base_url: string\n  /** standard headers to provide in all transport requests */\n  headers?: Headers\n  /** whether to verify ssl certs or not. Defaults to true */\n  verify_ssl: boolean\n  /** request timeout in seconds. Default to 30 */\n  timeout: number\n  /** encoding override */\n  encoding?: string | null\n  /** agent tag to use for the SDK requests */\n  agentTag: string\n}\n\n/**\n * Is the content type binary or \"string\"?\n * @param {string} contentType\n * @returns {ResponseMode.binary | ResponseMode.string}\n */\nexport function responseMode(contentType: string) {\n  if (contentType.match(contentPatternString)) {\n    return ResponseMode.string\n  }\n  if (contentType.match(contentPatternBinary)) {\n    return ResponseMode.binary\n  }\n  return ResponseMode.unknown\n}\n\n/**\n * Does this content type have a UTF-8 charset?\n * @param contentType\n * @returns match if it exists\n */\nexport function isUtf8(contentType: string) {\n  return contentType.match(/;.*\\bcharset\\b=\\butf-8\\b/i)\n}\n\n/** Used for name/value pair collections like for QueryParams */\nexport type Values = { [key: string]: any } | null | undefined\n\n/**\n * Encode parameter if not already encoded\n *\n * Note: this includes recognition of Date, DelimArray, and default objects for special handling\n *\n * @param value value of parameter\n * @returns URI encoded value\n */\nexport function encodeParam(value: any) {\n  if (value instanceof Date) {\n    value = value.toISOString()\n  } else if (value instanceof DelimArray) {\n    value = value.toString()\n  }\n  // check for object type to prevent \"[object Object]\" as the value.toString()\n  let encoded =\n    typeof value === 'object' ? JSON.stringify(value) : value.toString()\n\n  // decodeURIComponent throws URIError if there is a % character\n  // without it being part of an encoded\n  try {\n    const decoded = decodeURIComponent(value)\n    if (value === decoded) {\n      encoded = encodeURIComponent(value)\n    }\n  } catch (e) {\n    if (e instanceof URIError) {\n      encoded = encodeURIComponent(value)\n    } else {\n      throw e\n    }\n  }\n  return encoded\n}\n\n/**\n * Converts `Values` to query string parameter format\n * @param values Name/value collection to encode\n * @returns {string} query string parameter formatted values. Both `false` and `null` are included. Only `undefined` are omitted.\n */\nexport function encodeParams(values?: Values) {\n  if (!values) return ''\n\n  const keys = Object.keys(values)\n  return keys\n    .filter((k) => values[k] !== undefined) // `null` and `false` will both be passed\n    .map((k) => k + '=' + encodeParam(values[k]))\n    .join('&')\n}\n\n/**\n * constructs the path argument including any optional query parameters\n * @param path the base path of the request\n * @param obj optional collection of query parameters to encode and append to the path\n */\nexport function addQueryParams(path: string, obj?: Values) {\n  if (!obj) {\n    return path\n  }\n  const qp = encodeParams(obj)\n  return `${path}${qp ? '?' + qp : ''}`\n}\n\nconst utf8 = 'utf-8'\n\n/**\n * Convert this value to a string representation however we can do it\n * @param val\n */\nfunction bufferString(val: any) {\n  let result = 'Unknown error'\n  try {\n    const decoder = new TextDecoder(utf8)\n    result = decoder.decode(val)\n  } catch (e: any) {\n    // Supremely ugly hack. If we get here, we must be in Node (or IE 11, but who cares about that?)\n    // Node requires an import from `util` for TextDecoder to be found BUT it \"just has\" Buffer unless WebPack messes us up\n    try {\n      if (val instanceof Buffer) {\n        result = Buffer.from(val).toString(utf8)\n      } else {\n        result = JSON.stringify(val)\n      }\n    } catch (err: any) {\n      // The fallback logic here will at least give us some information about the error being thrown\n      result = JSON.stringify(val)\n    }\n  }\n  return result\n}\n\n/**\n * SDK error handler\n * @param response any kind of error\n * @returns a new `Error` object with the failure message\n */\nexport function sdkError(response: any) {\n  if (typeof response === 'string') {\n    return new LookerSDKError(response)\n  }\n  if ('error' in response) {\n    const error = response.error\n    if (typeof error === 'string') {\n      return new LookerSDKError(error)\n    }\n    // Try to get most specific error first\n    if ('error' in error) {\n      const result = bufferString(error.error)\n      return new LookerSDKError(result)\n    }\n    if ('message' in error) {\n      return new LookerSDKError(response.error.message.toString(), {\n        errors: error.errors,\n        documentation_url: error.documentation_url,\n      })\n    }\n    if ('statusMessage' in error) {\n      return new LookerSDKError(error.statusMessage)\n    }\n    const result = bufferString(error)\n    return new LookerSDKError(result)\n  }\n  if ('message' in response) {\n    return new LookerSDKError(response.message)\n  }\n  const error = JSON.stringify(response)\n  return new LookerSDKError(`Unknown error with SDK method ${error}`)\n}\n\n/** A helper method for simplifying error handling of SDK responses.\n *\n * Pass in a promise returned by any SDK method, and it will return a promise\n * that rejects if the `SDKResponse` is not `ok`. This will swallow the type\n * information in the error case, but allows you to route all the error cases\n * into a single promise rejection.\n *\n * The promise will have an `Error` rejection reason with a string `message`.\n * If the server error contains a `message` field, it will be provided, otherwise a\n * generic message will occur.\n *\n * ```ts\n * const sdk = LookerSDK({...})\n * let look\n * try {\n *    look = await sdkOk(sdk.create_look({...}))\n *    // do something with look\n * }\n * catch(e) {\n *    // handle error case\n * }\n * ```\n */\nexport async function sdkOk<TSuccess, TError>(\n  promise: Promise<SDKResponse<TSuccess, TError>>\n) {\n  const result = await promise\n  if (result.ok) {\n    return result.value\n  } else {\n    throw sdkError(result)\n  }\n}\n\n/**\n * Converts a byte array to a \"URL safe\" base64 string\n * @param u8 byte array to convert\n */\nexport function safeBase64(u8: Uint8Array) {\n  const rawBase64 = btoa(String.fromCharCode(...u8))\n  return rawBase64.replace(/\\+/g, '-').replace(/\\//g, '_')\n}\n\n/**\n * Type predicate. Asserts that a given object is error-like.\n * @param error a value of unknown type\n * @return boolean true if the error has a `message` key of type string.\n */\nexport function isErrorLike<T extends unknown>(\n  error: T\n): error is T & { message: string } {\n  if (typeof error !== 'object') return false\n  if (!error) return false\n  if (!Object.prototype.hasOwnProperty.call(error, 'message')) return false\n  if (typeof (error as { message: unknown }).message !== 'string') return false\n  return true\n}\n"],"file":"transport.js"}