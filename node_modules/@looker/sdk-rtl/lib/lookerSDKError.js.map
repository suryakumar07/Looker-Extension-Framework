{"version":3,"sources":["../src/lookerSDKError.ts"],"names":["LookerSDKError","LookerSDKErrorConstructor","message","rest","errors","documentation_url","errorOptions","error","Error","Object","setPrototypeOf","getPrototypeOf","prototype","defineProperty","enumerable","value","create","constructor","writable","configurable","name"],"mappings":";;;;;;;;;;;AAiFO,IAAMA,cAA0C,GACtC,CAAC,MAAM;AACpB;;AACA,MAAMC,yBAAyB,GAAG,SAASD,cAAT,GAkBhC;AAAA;;AAAA;AAAA;AAAA;;AAAA,QAhBG,CACDE,OADC,EAED,QAII,EANH,EAOD,GAAGC,IAPF,CAgBH;;AAAA,QAdE;AACEC,MAAAA,MADF;AAEEC,MAAAA;AAFF,KAcF;AAAA,QAXOC,YAWP;;AAEA,eAAAF,MAAM,UAAN,mCAAAA,MAAM,GAAK,EAAX;AACA,0BAAAC,iBAAiB,UAAjB,yDAAAA,iBAAiB,GAAK,EAAtB;AAKA,QAAME,KAAK,GAAG,OACV,IAAIC,KAAJ,CACEN,OADF,EAKEI,YALF,EAME,GAAGH,IANL,CADU,GASVK,KAAK,CACHN,OADG,EAGHI,YAHG,EAIH,GAAGH,IAJA,CATT;AAoBAM,IAAAA,MAAM,CAACC,cAAP,CACEH,KADF,EAEE,OAAOE,MAAM,CAACE,cAAP,CAAsB,IAAtB,CAAP,GAAqCX,cAAc,CAACY,SAFtD;AASAH,IAAAA,MAAM,CAACI,cAAP,CAAsBN,KAAtB,EAA6B,SAA7B,EAAwC;AAAEO,MAAAA,UAAU,EAAE;AAAd,KAAxC;AACEP,IAAAA,KAAD,CAA0BH,MAA1B,GAAmCA,MAAnC;AACCG,IAAAA,KAAD,CAA0BF,iBAA1B,GAA8CA,iBAA9C;AAED,WAAOE,KAAP;AACD,GA5DD;;AAuEAE,EAAAA,MAAM,CAACI,cAAP,CACEZ,yBADF,EAEE,WAFF,EAOE;AACEc,IAAAA,KAAK,EAAEN,MAAM,CAACO,MAAP,CAAcR,KAAK,CAACI,SAApB,EAA+B;AACpCK,MAAAA,WAAW,EAAE;AACXF,QAAAA,KAAK,EAAEd,yBADI;AAEXiB,QAAAA,QAAQ,EAAE,IAFC;AAGXC,QAAAA,YAAY,EAAE;AAHH,OADuB;AAMpCC,MAAAA,IAAI,EAAE;AACJL,QAAAA,KAAK,EAAE,gBADH;AAEJG,QAAAA,QAAQ,EAAE,IAFN;AAGJC,QAAAA,YAAY,EAAE;AAHV;AAN8B,KAA/B,CADT;AAiBED,IAAAA,QAAQ,EAAE;AAjBZ,GAPF;AA4BA,SAAOjB,yBAAP;AACD,CAtGc,GADV","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-redeclare */\n\n// Defensive type-level programming to guard against additional\n// parameters being added to Error, as happened in lib.es2022.error.d.ts\n// (which introduced the errorOptions argument)\ntype AugmentErrorOptions<\n  ErrorParameters extends unknown[],\n  AdditionalErrorOptions\n> = ErrorParameters extends [(infer Message)?]\n  ? [Message?, AdditionalErrorOptions?]\n  : ErrorParameters extends [(infer Message)?, (infer ErrorOptions)?]\n  ? [Message?, (ErrorOptions & AdditionalErrorOptions)?]\n  : ErrorParameters extends [\n      (infer Message)?,\n      (infer ErrorOptions)?,\n      ...infer Rest\n    ]\n  ? [Message?, (ErrorOptions & AdditionalErrorOptions)?, ...Rest]\n  : never\n\ninterface IErrorDetail {\n  field?: string\n  code?: string\n  message?: string\n  documentation_url: string\n}\n\n// This specifies SDK custom error options\ninterface ILookerSDKErrorOptions {\n  errors?: IErrorDetail[]\n  documentation_url?: string | null\n}\n\ninterface ILookerSDKErrorConstructor {\n  new (\n    ...args: AugmentErrorOptions<\n      ConstructorParameters<ErrorConstructor>,\n      ILookerSDKErrorOptions\n    >\n  ): LookerSDKError\n  (\n    ...args: AugmentErrorOptions<\n      Parameters<ErrorConstructor>,\n      ILookerSDKErrorOptions\n    >\n  ): LookerSDKError\n}\n\n// The subclass and function expression's name should match, so that stack traces look clean.\n// We bind it to a local identifier for clarity, and to perform a type assertion.\nexport interface LookerSDKError extends Error {\n  errors?: IErrorDetail[]\n  documentation_url?: string | null\n}\n\nexport const LookerSDKError: ILookerSDKErrorConstructor =\n  /* #__PURE__*/ (() => {\n    'use strict'\n    const LookerSDKErrorConstructor = function LookerSDKError(\n      this: LookerSDKError | undefined,\n      ...[\n        message,\n        {\n          errors,\n          documentation_url,\n          ...errorOptions\n        } = {} as ILookerSDKErrorOptions,\n        ...rest\n      ]: AugmentErrorOptions<\n        ConstructorParameters<ErrorConstructor>,\n        ILookerSDKErrorOptions\n      > &\n        AugmentErrorOptions<\n          Parameters<ErrorConstructor>,\n          ILookerSDKErrorOptions\n        >\n    ) {\n      // handle null in addition to undefined\n      errors ??= []\n      documentation_url ??= ''\n\n      // The `super()` call. At present, Error() and new Error() are\n      // indistinguishable, but use whatever we were invoked with in case\n      // that ever changes.\n      const error = this\n        ? new Error(\n            message,\n            // we have to suppress a type error here if TypeScript\n            // doesn't know es2022's two-argument Error constructor\n            // @ts-ignore-error\n            errorOptions,\n            ...rest\n          )\n        : Error(\n            message,\n            // @ts-ignore-error\n            errorOptions,\n            ...rest\n          )\n\n      // Object.setPrototypeOf() is necessary when extending built-ins,\n      // since Error.call(this, message, errorOptions, ...rest) doesn't\n      // set up the prototype chain the way it would with a user-defined\n      // class.\n      Object.setPrototypeOf(\n        error,\n        this ? Object.getPrototypeOf(this) : LookerSDKError.prototype\n      )\n\n      // Normally the 'message' property of JavaScript Error objects is non-enumerable\n      // set it to be enumerable for consistency with our non-error responses,\n      // which are implemented as plain JavaScript objects where all\n      // properties are enumerable.\n      Object.defineProperty(error, 'message', { enumerable: true })\n      ;(error as LookerSDKError).errors = errors\n      ;(error as LookerSDKError).documentation_url = documentation_url\n\n      return error\n    } as ILookerSDKErrorConstructor\n\n    // LookerSDKError.prototype, LookerSDKError.prototype.constructor, and\n    // LookerSDKError.prototoype.name all have to be non-enumerable to match\n    // the built-in RangeError, TypeError, etc., so we use\n    // Object.defineProperty to set them instead of `=` assignment.\n\n    // Default values for property descriptor objects:\n    //   writable: false\n    //   enumerable: false\n    //   configurable: false\n    Object.defineProperty(\n      LookerSDKErrorConstructor,\n      'prototype',\n      // It's a weird wart that the built-in Error constructor\n      // prototypes have writable and configurable constructor and name\n      // fields. We follow that behavior to be consistent, not because\n      // it makes sense.\n      {\n        value: Object.create(Error.prototype, {\n          constructor: {\n            value: LookerSDKErrorConstructor,\n            writable: true,\n            configurable: true,\n          },\n          name: {\n            value: 'LookerSDKError',\n            writable: true,\n            configurable: true,\n          },\n        }),\n        // SomeConstructorFunction.prototype starts off writable with\n        // `function`-type constructors, in contrast to `class SomeClass`.\n        // Set this to be non-writable to match `class`es and the built-in\n        // Error constructors.\n        writable: false,\n      }\n    )\n\n    return LookerSDKErrorConstructor\n  })()\n"],"file":"lookerSDKError.js"}