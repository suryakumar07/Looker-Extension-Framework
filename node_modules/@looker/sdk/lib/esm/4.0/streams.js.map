{"version":3,"sources":["../../../src/4.0/streams.ts"],"names":["APIMethods","encodeParam","sdkVersion","Looker40SDKStream","constructor","authSession","apiVersion","ApiVersion","apiPath","settings","base_url","follow_alert","callback","alert_id","options","authStream","unfollow_alert","search_alerts","request","limit","offset","group_by","fields","disabled","frequency","condition_met","last_run_start","last_run_end","all_owners","get_alert","update_alert","body","update_alert_field","delete_alert","create_alert","enqueue_alert","force","alert_notifications","read_alert_notification","alert_notification_id","login","client_id","client_secret","login_user","user_id","associative","logout","artifact_usage","artifact_namespaces","artifact_value","namespace","key","purge_artifacts","search_artifacts","user_ids","min_size","max_size","artifact","delete_artifact","update_artifacts","create_embed_secret","delete_embed_secret","embed_secret_id","create_sso_embed_url","create_embed_url_as_me","acquire_embed_cookieless_session","delete_embed_cookieless_session","session_reference_token","generate_tokens_for_cookieless_session","ldap_config","update_ldap_config","test_ldap_config_connection","test_ldap_config_auth","test_ldap_config_user_info","test_ldap_config_user_auth","register_mobile_device","update_mobile_device_registration","device_id","deregister_mobile_device","all_oauth_client_apps","oauth_client_app","client_guid","register_oauth_client_app","update_oauth_client_app","delete_oauth_client_app","invalidate_tokens","activate_app_user","deactivate_app_user","oidc_config","update_oidc_config","oidc_test_config","test_slug","delete_oidc_test_config","create_oidc_test_config","password_config","update_password_config","force_password_reset_at_next_login_for_all_users","saml_config","update_saml_config","saml_test_config","delete_saml_test_config","create_saml_test_config","parse_saml_idp_metadata","fetch_and_parse_saml_idp_metadata","session_config","update_session_config","get_support_access_allowlist_entries","add_support_access_allowlist_entries","delete_support_access_allowlist_entry","entry_id","enable_support_access","disable_support_access","support_access_status","all_user_login_lockouts","search_user_login_lockouts","page","per_page","sorts","auth_type","full_name","email","remote_id","filter_or","delete_user_login_lockout","all_boards","create_board","search_boards","title","created_at","first_name","last_name","favorited","creator_id","permission","board","board_id","update_board","delete_board","all_board_items","board_section_id","create_board_item","board_item","board_item_id","update_board_item","delete_board_item","all_board_sections","create_board_section","board_section","update_board_section","delete_board_section","all_color_collections","create_color_collection","color_collections_custom","color_collections_standard","default_color_collection","set_default_color_collection","collection_id","color_collection","update_color_collection","delete_color_collection","cloud_storage_configuration","update_cloud_storage_configuration","configuration_force_refresh","custom_welcome_email","update_custom_welcome_email","send_test_welcome_email","update_custom_welcome_email_test","digest_emails_enabled","update_digest_emails_enabled","create_digest_email_send","public_egress_ip_addresses","internal_help_resources_content","update_internal_help_resources_content","internal_help_resources","update_internal_help_resources","all_legacy_features","legacy_feature","legacy_feature_id","update_legacy_feature","all_locales","mobile_settings","get_setting","set_setting","set_smtp_settings","smtp_status","all_timezones","versions","api_spec","api_version","specification","whitelabel_configuration","update_whitelabel_configuration","all_connections","create_connection","connection","connection_name","update_connection","delete_connection","delete_connection_override","override_context","test_connection","tests","test_connection_config","all_dialect_infos","all_external_oauth_applications","name","create_external_oauth_application","create_oauth_application_user_state","all_ssh_servers","create_ssh_server","ssh_server","ssh_server_id","update_ssh_server","delete_ssh_server","test_ssh_server","all_ssh_tunnels","create_ssh_tunnel","ssh_tunnel","ssh_tunnel_id","update_ssh_tunnel","delete_ssh_tunnel","test_ssh_tunnel","ssh_public_key","search_content_favorites","id","content_metadata_id","dashboard_id","look_id","content_favorite","content_favorite_id","delete_content_favorite","create_content_favorite","all_content_metadatas","parent_id","content_metadata","update_content_metadata","all_content_metadata_accesses","create_content_metadata_access","send_boards_notification_email","update_content_metadata_access","content_metadata_access_id","delete_content_metadata_access","content_thumbnail","type","resource_id","reload","format","width","height","content_validation","search_content_views","view_count","group_id","start_of_week_date","all_time","vector_thumbnail","all_dashboards","create_dashboard","search_dashboards","slug","description","folder_id","deleted","curate","last_viewed_at","import_lookml_dashboard","lookml_dashboard_id","space_id","raw_locale","sync_lookml_dashboard","dashboard","update_dashboard","delete_dashboard","dashboard_aggregate_table_lookml","dashboard_lookml","move_dashboard","import_dashboard_from_lookml","create_dashboard_from_lookml","copy_dashboard","search_dashboard_elements","dashboard_element","dashboard_element_id","update_dashboard_element","delete_dashboard_element","dashboard_dashboard_elements","create_dashboard_element","apply_filters","dashboard_filter","dashboard_filter_id","update_dashboard_filter","delete_dashboard_filter","dashboard_dashboard_filters","create_dashboard_filter","dashboard_layout_component","dashboard_layout_component_id","update_dashboard_layout_component","dashboard_layout_dashboard_layout_components","dashboard_layout_id","dashboard_layout","update_dashboard_layout","delete_dashboard_layout","dashboard_dashboard_layouts","create_dashboard_layout","perform_data_action","fetch_remote_data_action_form","all_datagroups","datagroup","datagroup_id","update_datagroup","graph_derived_tables_for_model","model","color","graph_derived_tables_for_view","view","models","workspace","start_pdt_build","model_name","view_name","force_rebuild","force_full_incremental","source","check_pdt_build","materialization_id","stop_pdt_build","search_folders","is_shared_root","folder","update_folder","delete_folder","all_folders","create_folder","folder_children","folder_children_search","folder_parent","folder_ancestors","folder_looks","folder_dashboards","all_groups","ids","can_add_to_content_metadata","create_group","search_groups","external_group_id","externally_managed","externally_orphaned","search_groups_with_roles","search_groups_with_hierarchy","group","update_group","delete_group","all_group_groups","add_group_group","all_group_users","add_group_user","delete_group_user","delete_group_from_group","deleting_group_id","update_user_attribute_group_value","user_attribute_id","delete_user_attribute_group_value","all_primary_homepage_sections","all_integration_hubs","create_integration_hub","integration_hub","integration_hub_id","update_integration_hub","delete_integration_hub","accept_integration_hub_legal_agreement","all_integrations","integration","integration_id","update_integration","fetch_integration_form","test_integration","all_looks","create_look","search_looks","query_id","look","update_look","delete_look","run_look","result_format","apply_formatting","apply_vis","cache","image_width","image_height","generate_drill_links","force_production","cache_only","path_prefix","rebuild_pdts","server_table_calcs","copy_look","move_look","all_lookml_models","create_lookml_model","lookml_model","lookml_model_name","update_lookml_model","delete_lookml_model","lookml_model_explore","explore_name","model_fieldname_suggestions","field_name","term","filters","get_model","connection_databases","connection_features","connection_schemas","database","connection_tables","schema_name","table_filter","table_limit","connection_columns","table_names","connection_search_columns","column_name","connection_cost_estimate","lock_all","project_id","all_git_branches","git_branch","update_git_branch","create_git_branch","find_git_branch","branch_name","delete_git_branch","deploy_ref_to_production","branch","ref","deploy_to_production","reset_project_to_production","reset_project_to_remote","all_projects","create_project","project","update_project","manifest","git_deploy_key","create_git_deploy_key","project_validation_results","validate_project","project_workspace","all_project_files","project_file","file_id","all_git_connection_tests","remote_url","run_git_connection_test","test_id","use_production","all_lookml_tests","run_lookml_test","test","tag_ref","commit_sha","tag_name","tag_message","update_repository_credential","root_project_id","credential_id","delete_repository_credential","get_all_repository_credentials","create_query_task","query_task_multi_results","query_task_ids","query_task","query_task_id","query_task_results","query","query_for_slug","create_query","run_query","run_inline_query","run_url_encoded_query","merge_query","merge_query_id","create_merge_query","all_running_queries","kill_query","sql_query","create_sql_query","run_sql_query","download","create_look_render_task","create_query_render_task","create_dashboard_render_task","pdf_paper_size","pdf_landscape","long_tables","render_task","render_task_id","render_task_results","create_dashboard_element_render_task","search_model_sets","all_access","built_in","model_set","model_set_id","update_model_set","delete_model_set","all_model_sets","create_model_set","all_permissions","search_permission_sets","permission_set","permission_set_id","update_permission_set","delete_permission_set","all_permission_sets","create_permission_set","all_roles","create_role","search_roles","search_roles_with_user_count","role","role_id","update_role","delete_role","role_groups","set_role_groups","role_users","direct_association_only","set_role_users","scheduled_plans_for_space","scheduled_plan","scheduled_plan_id","update_scheduled_plan","delete_scheduled_plan","all_scheduled_plans","all_users","create_scheduled_plan","scheduled_plan_run_once","scheduled_plans_for_look","scheduled_plans_for_dashboard","scheduled_plans_for_lookml_dashboard","scheduled_plan_run_once_by_id","session","update_session","all_themes","create_theme","search_themes","begin_at","end_at","default_theme","ts","set_default_theme","active_themes","theme_or_default","validate_theme","theme","theme_id","update_theme","delete_theme","search_credentials_email","emails","me","create_user","search_users","verified_looker_employee","embed_user","is_disabled","search_users_names","pattern","user","update_user","delete_user","user_for_credential","credential_type","user_credentials_email","create_user_credentials_email","update_user_credentials_email","delete_user_credentials_email","user_credentials_totp","create_user_credentials_totp","delete_user_credentials_totp","user_credentials_ldap","delete_user_credentials_ldap","user_credentials_google","delete_user_credentials_google","user_credentials_saml","delete_user_credentials_saml","user_credentials_oidc","delete_user_credentials_oidc","user_credentials_api3","credentials_api3_id","delete_user_credentials_api3","all_user_credentials_api3s","create_user_credentials_api3","user_credentials_embed","credentials_embed_id","delete_user_credentials_embed","all_user_credentials_embeds","user_credentials_looker_openid","delete_user_credentials_looker_openid","user_session","session_id","delete_user_session","all_user_sessions","create_user_credentials_email_password_reset","expires","user_roles","set_user_roles","user_attribute_user_values","user_attribute_ids","all_values","include_unset","set_user_attribute_user_value","delete_user_attribute_user_value","send_user_credentials_email_password_reset","wipeout_user_emails","create_embed_user","all_user_attributes","create_user_attribute","user_attribute","update_user_attribute","delete_user_attribute","all_user_attribute_group_values","set_user_attribute_group_values","all_workspaces","workspace_id"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\n/**\n * 459 API methods\n */\n\nimport type { Readable } from 'readable-stream'\nimport type {\n  DelimArray,\n  IDictionary,\n  IAuthSession,\n  ITransportSettings,\n} from '@looker/sdk-rtl'\nimport { APIMethods, encodeParam } from '@looker/sdk-rtl'\n\n/**\n * NOTE: Do not edit this file generated by Looker SDK Codegen for API 4.0\n *\n */\nimport { sdkVersion } from '../constants'\nimport type {\n  IAccessToken,\n  IAlert,\n  IAlertNotifications,\n  IAlertPatch,\n  IApiSession,\n  IApiVersion,\n  IArtifact,\n  IArtifactNamespace,\n  IArtifactUsage,\n  IBackupConfiguration,\n  IBoard,\n  IBoardItem,\n  IBoardSection,\n  IColorCollection,\n  IColumnSearch,\n  IConnectionFeatures,\n  IContentFavorite,\n  IContentMeta,\n  IContentMetaGroupUser,\n  IContentValidation,\n  IContentView,\n  ICostEstimate,\n  ICreateCostEstimate,\n  ICreateCredentialsApi3,\n  ICreateEmbedUserRequest,\n  ICreateFolder,\n  ICreateOAuthApplicationUserStateRequest,\n  ICreateOAuthApplicationUserStateResponse,\n  ICredentialsApi3,\n  ICredentialsEmail,\n  ICredentialsEmailSearch,\n  ICredentialsEmbed,\n  ICredentialsGoogle,\n  ICredentialsLDAP,\n  ICredentialsLookerOpenid,\n  ICredentialsOIDC,\n  ICredentialsSaml,\n  ICredentialsTotp,\n  ICustomWelcomeEmail,\n  IDashboard,\n  IDashboardAggregateTableLookml,\n  IDashboardBase,\n  IDashboardElement,\n  IDashboardFilter,\n  IDashboardLayout,\n  IDashboardLayoutComponent,\n  IDashboardLookml,\n  IDataActionForm,\n  IDataActionRequest,\n  IDataActionResponse,\n  IDatagroup,\n  IDBConnection,\n  IDBConnectionTestResult,\n  IDependencyGraph,\n  IDialectInfo,\n  IDigestEmails,\n  IDigestEmailSend,\n  IEgressIpAddresses,\n  IEmbedCookielessSessionAcquire,\n  IEmbedCookielessSessionAcquireResponse,\n  IEmbedCookielessSessionGenerateTokens,\n  IEmbedCookielessSessionGenerateTokensResponse,\n  IEmbedParams,\n  IEmbedSecret,\n  IEmbedSsoParams,\n  IEmbedUrlResponse,\n  IExternalOauthApplication,\n  IFolder,\n  IGitBranch,\n  IGitConnectionTest,\n  IGitConnectionTestResult,\n  IGroup,\n  IGroupHierarchy,\n  IGroupIdForGroupInclusion,\n  IGroupIdForGroupUserInclusion,\n  IGroupSearch,\n  IHomepageSection,\n  IIntegration,\n  IIntegrationHub,\n  IIntegrationTestResult,\n  IInternalHelpResources,\n  IInternalHelpResourcesContent,\n  ILDAPConfig,\n  ILDAPConfigTestResult,\n  ILegacyFeature,\n  ILocale,\n  ILook,\n  ILookmlModel,\n  ILookmlModelExplore,\n  ILookmlTest,\n  ILookmlTestResult,\n  ILookWithQuery,\n  IManifest,\n  IMaterializePDT,\n  IMergeQuery,\n  IMobileSettings,\n  IMobileToken,\n  IModel,\n  IModelFieldSuggestions,\n  IModelSet,\n  IOauthClientApp,\n  IOIDCConfig,\n  IPasswordConfig,\n  IPermission,\n  IPermissionSet,\n  IProject,\n  IProjectFile,\n  IProjectValidation,\n  IProjectValidationCache,\n  IProjectWorkspace,\n  IQuery,\n  IQueryTask,\n  IRenderTask,\n  IRepositoryCredential,\n  IRequestActiveThemes,\n  IRequestAlertNotifications,\n  IRequestAllBoardItems,\n  IRequestAllBoardSections,\n  IRequestAllExternalOauthApplications,\n  IRequestAllGroups,\n  IRequestAllGroupUsers,\n  IRequestAllIntegrations,\n  IRequestAllLookmlModels,\n  IRequestAllRoles,\n  IRequestAllScheduledPlans,\n  IRequestAllUserAttributes,\n  IRequestAllUsers,\n  IRequestArtifact,\n  IRequestArtifactNamespaces,\n  IRequestConnectionColumns,\n  IRequestConnectionSchemas,\n  IRequestConnectionSearchColumns,\n  IRequestConnectionTables,\n  IRequestContentThumbnail,\n  IRequestCreateDashboardElement,\n  IRequestCreateDashboardRenderTask,\n  IRequestCreateQueryTask,\n  IRequestCreateUserCredentialsEmailPasswordReset,\n  IRequestDeployRefToProduction,\n  IRequestFolderChildren,\n  IRequestFolderChildrenSearch,\n  IRequestGraphDerivedTablesForModel,\n  IRequestGraphDerivedTablesForView,\n  IRequestLogin,\n  IRequestModelFieldnameSuggestions,\n  IRequestRoleUsers,\n  IRequestRunGitConnectionTest,\n  IRequestRunInlineQuery,\n  IRequestRunLook,\n  IRequestRunLookmlTest,\n  IRequestRunQuery,\n  IRequestScheduledPlansForDashboard,\n  IRequestScheduledPlansForLook,\n  IRequestScheduledPlansForLookmlDashboard,\n  IRequestSearchAlerts,\n  IRequestSearchArtifacts,\n  IRequestSearchBoards,\n  IRequestSearchContentFavorites,\n  IRequestSearchContentViews,\n  IRequestSearchCredentialsEmail,\n  IRequestSearchDashboardElements,\n  IRequestSearchDashboards,\n  IRequestSearchFolders,\n  IRequestSearchGroups,\n  IRequestSearchGroupsWithHierarchy,\n  IRequestSearchGroupsWithRoles,\n  IRequestSearchLooks,\n  IRequestSearchModelSets,\n  IRequestSearchPermissionSets,\n  IRequestSearchRoles,\n  IRequestSearchRolesWithUserCount,\n  IRequestSearchThemes,\n  IRequestSearchUserLoginLockouts,\n  IRequestSearchUsers,\n  IRequestSearchUsersNames,\n  IRequestStartPdtBuild,\n  IRequestTagRef,\n  IRequestUserAttributeUserValues,\n  IRequestUserRoles,\n  IRole,\n  IRoleSearch,\n  IRunningQueries,\n  ISamlConfig,\n  ISamlMetadataParseResult,\n  IScheduledPlan,\n  ISchema,\n  ISchemaColumns,\n  ISchemaTables,\n  ISession,\n  ISessionConfig,\n  ISetting,\n  ISmtpSettings,\n  ISmtpStatus,\n  ISqlQuery,\n  ISqlQueryCreate,\n  ISshPublicKey,\n  ISshServer,\n  ISshTunnel,\n  ISupportAccessAddEntries,\n  ISupportAccessAllowlistEntry,\n  ISupportAccessEnable,\n  ISupportAccessStatus,\n  ITheme,\n  ITimezone,\n  IUpdateArtifact,\n  IUpdateFolder,\n  IUser,\n  IUserAttribute,\n  IUserAttributeGroupValue,\n  IUserAttributeWithValue,\n  IUserEmailOnly,\n  IUserLoginLockout,\n  IUserPublic,\n  IValidationError,\n  IWelcomeEmailTest,\n  IWhitelabelConfiguration,\n  IWorkspace,\n  IWriteAlert,\n  IWriteApiSession,\n  IWriteBackupConfiguration,\n  IWriteBoard,\n  IWriteBoardItem,\n  IWriteBoardSection,\n  IWriteColorCollection,\n  IWriteContentFavorite,\n  IWriteContentMeta,\n  IWriteCreateDashboardFilter,\n  IWriteCredentialsEmail,\n  IWriteDashboard,\n  IWriteDashboardElement,\n  IWriteDashboardFilter,\n  IWriteDashboardLayout,\n  IWriteDashboardLayoutComponent,\n  IWriteDashboardLookml,\n  IWriteDatagroup,\n  IWriteDBConnection,\n  IWriteEmbedSecret,\n  IWriteExternalOauthApplication,\n  IWriteGitBranch,\n  IWriteGroup,\n  IWriteIntegration,\n  IWriteIntegrationHub,\n  IWriteInternalHelpResources,\n  IWriteInternalHelpResourcesContent,\n  IWriteLDAPConfig,\n  IWriteLegacyFeature,\n  IWriteLookmlModel,\n  IWriteLookWithQuery,\n  IWriteMergeQuery,\n  IWriteMobileToken,\n  IWriteModelSet,\n  IWriteOauthClientApp,\n  IWriteOIDCConfig,\n  IWritePasswordConfig,\n  IWritePermissionSet,\n  IWriteProject,\n  IWriteQuery,\n  IWriteRepositoryCredential,\n  IWriteRole,\n  IWriteSamlConfig,\n  IWriteScheduledPlan,\n  IWriteSessionConfig,\n  IWriteSetting,\n  IWriteSshServer,\n  IWriteSshTunnel,\n  IWriteTheme,\n  IWriteUser,\n  IWriteUserAttribute,\n  IWriteUserAttributeWithValue,\n  IWriteWhitelabelConfiguration,\n} from './models'\n\nexport class Looker40SDKStream extends APIMethods {\n  static readonly ApiVersion = '4.0'\n  constructor(authSession: IAuthSession) {\n    super(authSession, sdkVersion)\n    this.apiVersion = Looker40SDKStream.ApiVersion\n    this.apiPath =\n      authSession.settings.base_url === ''\n        ? ''\n        : authSession.settings.base_url + '/api/' + this.apiVersion\n  }\n\n  //#region Alert: Alert\n\n  /**\n   * Follow an alert.\n   *\n   * POST /alerts/{alert_id}/follow -> void\n   *\n   * @param callback streaming output function\n   * @param alert_id ID of an alert\n   * @param options one-time API call overrides\n   *\n   */\n  async follow_alert(\n    callback: (readable: Readable) => Promise<void>,\n    alert_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    alert_id = encodeParam(alert_id)\n    return this.authStream<void>(\n      callback,\n      'POST',\n      `/alerts/${alert_id}/follow`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * Unfollow an alert.\n   *\n   * DELETE /alerts/{alert_id}/follow -> void\n   *\n   * @param callback streaming output function\n   * @param alert_id ID of an alert\n   * @param options one-time API call overrides\n   *\n   */\n  async unfollow_alert(\n    callback: (readable: Readable) => Promise<void>,\n    alert_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    alert_id = encodeParam(alert_id)\n    return this.authStream<void>(\n      callback,\n      'DELETE',\n      `/alerts/${alert_id}/follow`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search Alerts\n   *\n   * GET /alerts/search -> IAlert[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchAlerts\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_alerts(\n    callback: (readable: Readable) => Promise<IAlert[]>,\n    request: IRequestSearchAlerts,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IAlert[]>(\n      callback,\n      'GET',\n      '/alerts/search',\n      {\n        limit: request.limit,\n        offset: request.offset,\n        group_by: request.group_by,\n        fields: request.fields,\n        disabled: request.disabled,\n        frequency: request.frequency,\n        condition_met: request.condition_met,\n        last_run_start: request.last_run_start,\n        last_run_end: request.last_run_end,\n        all_owners: request.all_owners,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get an alert by a given alert ID\n   *\n   * GET /alerts/{alert_id} -> IAlert\n   *\n   * @param callback streaming output function\n   * @param alert_id ID of an alert\n   * @param options one-time API call overrides\n   *\n   */\n  async get_alert(\n    callback: (readable: Readable) => Promise<IAlert>,\n    alert_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    alert_id = encodeParam(alert_id)\n    return this.authStream<IAlert>(\n      callback,\n      'GET',\n      `/alerts/${alert_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update an alert\n   * # Required fields: `owner_id`, `field`, `destinations`, `comparison_type`, `threshold`, `cron`\n   * #\n   *\n   * PUT /alerts/{alert_id} -> IAlert\n   *\n   * @param callback streaming output function\n   * @param alert_id ID of an alert\n   * @param body Partial<IWriteAlert>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_alert(\n    callback: (readable: Readable) => Promise<IAlert>,\n    alert_id: string,\n    body: Partial<IWriteAlert>,\n    options?: Partial<ITransportSettings>\n  ) {\n    alert_id = encodeParam(alert_id)\n    return this.authStream<IAlert>(\n      callback,\n      'PUT',\n      `/alerts/${alert_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Update select alert fields\n   * # Available fields: `owner_id`, `is_disabled`, `disabled_reason`, `is_public`, `threshold`\n   * #\n   *\n   * PATCH /alerts/{alert_id} -> IAlert\n   *\n   * @param callback streaming output function\n   * @param alert_id ID of an alert\n   * @param body Partial<IAlertPatch>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_alert_field(\n    callback: (readable: Readable) => Promise<IAlert>,\n    alert_id: string,\n    body: Partial<IAlertPatch>,\n    options?: Partial<ITransportSettings>\n  ) {\n    alert_id = encodeParam(alert_id)\n    return this.authStream<IAlert>(\n      callback,\n      'PATCH',\n      `/alerts/${alert_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete an alert by a given alert ID\n   *\n   * DELETE /alerts/{alert_id} -> void\n   *\n   * @param callback streaming output function\n   * @param alert_id ID of an alert\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_alert(\n    callback: (readable: Readable) => Promise<void>,\n    alert_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    alert_id = encodeParam(alert_id)\n    return this.authStream<void>(\n      callback,\n      'DELETE',\n      `/alerts/${alert_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a new alert and return details of the newly created object\n   *\n   * Required fields: `field`, `destinations`, `comparison_type`, `threshold`, `cron`\n   *\n   * Example Request:\n   * Run alert on dashboard element '103' at 5am every day. Send an email to 'test@test.com' if inventory for Los Angeles (using dashboard filter `Warehouse Name`) is lower than 1,000\n   * ```\n   * {\n   *   \"cron\": \"0 5 * * *\",\n   *   \"custom_title\": \"Alert when LA inventory is low\",\n   *   \"dashboard_element_id\": 103,\n   *   \"applied_dashboard_filters\": [\n   *     {\n   *       \"filter_title\": \"Warehouse Name\",\n   *       \"field_name\": \"distribution_centers.name\",\n   *       \"filter_value\": \"Los Angeles CA\",\n   *       \"filter_description\": \"is Los Angeles CA\"\n   *     }\n   *   ],\n   *   \"comparison_type\": \"LESS_THAN\",\n   *   \"destinations\": [\n   *     {\n   *       \"destination_type\": \"EMAIL\",\n   *       \"email_address\": \"test@test.com\"\n   *     }\n   *   ],\n   *   \"field\": {\n   *     \"title\": \"Number on Hand\",\n   *     \"name\": \"inventory_items.number_on_hand\"\n   *   },\n   *   \"is_disabled\": false,\n   *   \"is_public\": true,\n   *   \"threshold\": 1000\n   * }\n   * ```\n   *\n   * POST /alerts -> IAlert\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteAlert>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_alert(\n    callback: (readable: Readable) => Promise<IAlert>,\n    body: Partial<IWriteAlert>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IAlert>(\n      callback,\n      'POST',\n      '/alerts',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Enqueue an Alert by ID\n   *\n   * POST /alerts/{alert_id}/enqueue -> void\n   *\n   * @param callback streaming output function\n   * @param alert_id ID of an alert\n   * @param force Whether to enqueue an alert again if its already running.\n   * @param options one-time API call overrides\n   *\n   */\n  async enqueue_alert(\n    callback: (readable: Readable) => Promise<void>,\n    alert_id: string,\n    force?: boolean,\n    options?: Partial<ITransportSettings>\n  ) {\n    alert_id = encodeParam(alert_id)\n    return this.authStream<void>(\n      callback,\n      'POST',\n      `/alerts/${alert_id}/enqueue`,\n      { force },\n      null,\n      options\n    )\n  }\n\n  /**\n   * # Alert Notifications.\n   *   The endpoint returns all the alert notifications received by the user on email in the past 7 days. It also returns whether the notifications have been read by the user.\n   *\n   * GET /alert_notifications -> IAlertNotifications[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAlertNotifications\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async alert_notifications(\n    callback: (readable: Readable) => Promise<IAlertNotifications[]>,\n    request: IRequestAlertNotifications,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IAlertNotifications[]>(\n      callback,\n      'GET',\n      '/alert_notifications',\n      { limit: request.limit, offset: request.offset },\n      null,\n      options\n    )\n  }\n\n  /**\n   * # Reads a Notification\n   *   The endpoint marks a given alert notification as read by the user, in case it wasn't already read. The AlertNotification model is updated for this purpose. It returns the notification as a response.\n   *\n   * PATCH /alert_notifications/{alert_notification_id} -> IAlertNotifications\n   *\n   * @param callback streaming output function\n   * @param alert_notification_id ID of a notification\n   * @param options one-time API call overrides\n   *\n   */\n  async read_alert_notification(\n    callback: (readable: Readable) => Promise<IAlertNotifications>,\n    alert_notification_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    alert_notification_id = encodeParam(alert_notification_id)\n    return this.authStream<IAlertNotifications>(\n      callback,\n      'PATCH',\n      `/alert_notifications/${alert_notification_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion Alert: Alert\n\n  //#region ApiAuth: API Authentication\n\n  /**\n   * ### Present client credentials to obtain an authorization token\n   *\n   * Looker API implements the OAuth2 [Resource Owner Password Credentials Grant](https://docs.looker.com/r/api/outh2_resource_owner_pc) pattern.\n   * The client credentials required for this login must be obtained by creating an API3 key on a user account\n   * in the Looker Admin console. The API3 key consists of a public `client_id` and a private `client_secret`.\n   *\n   * The access token returned by `login` must be used in the HTTP Authorization header of subsequent\n   * API requests, like this:\n   * ```\n   * Authorization: token 4QDkCyCtZzYgj4C2p2cj3csJH7zqS5RzKs2kTnG4\n   * ```\n   * Replace \"4QDkCy...\" with the `access_token` value returned by `login`.\n   * The word `token` is a string literal and must be included exactly as shown.\n   *\n   * This function can accept `client_id` and `client_secret` parameters as URL query params or as www-form-urlencoded params in the body of the HTTP request. Since there is a small risk that URL parameters may be visible to intermediate nodes on the network route (proxies, routers, etc), passing credentials in the body of the request is considered more secure than URL params.\n   *\n   * Example of passing credentials in the HTTP request body:\n   * ````\n   * POST HTTP /login\n   * Content-Type: application/x-www-form-urlencoded\n   *\n   * client_id=CGc9B7v7J48dQSJvxxx&client_secret=nNVS9cSS3xNpSC9JdsBvvvvv\n   * ````\n   *\n   * ### Best Practice:\n   * Always pass credentials in body params. Pass credentials in URL query params **only** when you cannot pass body params due to application, tool, or other limitations.\n   *\n   * For more information and detailed examples of Looker API authorization, see [How to Authenticate to Looker API3](https://github.com/looker/looker-sdk-ruby/blob/master/authentication.md).\n   *\n   * POST /login -> IAccessToken\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestLogin\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async login(\n    callback: (readable: Readable) => Promise<IAccessToken>,\n    request: IRequestLogin,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IAccessToken>(\n      callback,\n      'POST',\n      '/login',\n      { client_id: request.client_id, client_secret: request.client_secret },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create an access token that runs as a given user.\n   *\n   * This can only be called by an authenticated admin user. It allows that admin to generate a new\n   * authentication token for the user with the given user id. That token can then be used for subsequent\n   * API calls - which are then performed *as* that target user.\n   *\n   * The target user does *not* need to have a pre-existing API client_id/client_secret pair. And, no such\n   * credentials are created by this call.\n   *\n   * This allows for building systems where api user authentication for an arbitrary number of users is done\n   * outside of Looker and funneled through a single 'service account' with admin permissions. Note that a\n   * new access token is generated on each call. If target users are going to be making numerous API\n   * calls in a short period then it is wise to cache this authentication token rather than call this before\n   * each of those API calls.\n   *\n   * See 'login' for more detail on the access token and how to use it.\n   *\n   * POST /login/{user_id} -> IAccessToken\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user.\n   * @param associative When true (default), API calls using the returned access_token are attributed to the admin user who created the access_token. When false, API activity is attributed to the user the access_token runs as. False requires a looker license.\n   * @param options one-time API call overrides\n   *\n   */\n  async login_user(\n    callback: (readable: Readable) => Promise<IAccessToken>,\n    user_id: string,\n    associative?: boolean,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<IAccessToken>(\n      callback,\n      'POST',\n      `/login/${user_id}`,\n      { associative },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Logout of the API and invalidate the current access token.\n   *\n   * DELETE /logout -> string\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async logout(\n    callback: (readable: Readable) => Promise<string>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      '/logout',\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion ApiAuth: API Authentication\n\n  //#region Artifact: Artifact Storage\n\n  /**\n   * Get the maximum configured size of the entire artifact store, and the currently used storage in bytes.\n   *\n   * **Note**: The artifact storage API can only be used by Looker-built extensions.\n   *\n   * GET /artifact/usage -> IArtifactUsage\n   *\n   * @param callback streaming output function\n   * @param fields Comma-delimited names of fields to return in responses. Omit for all fields\n   * @param options one-time API call overrides\n   *\n   */\n  async artifact_usage(\n    callback: (readable: Readable) => Promise<IArtifactUsage>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IArtifactUsage>(\n      callback,\n      'GET',\n      '/artifact/usage',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * Get all artifact namespaces and the count of artifacts in each namespace\n   *\n   * **Note**: The artifact storage API can only be used by Looker-built extensions.\n   *\n   * GET /artifact/namespaces -> IArtifactNamespace[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestArtifactNamespaces\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async artifact_namespaces(\n    callback: (readable: Readable) => Promise<IArtifactNamespace[]>,\n    request: IRequestArtifactNamespaces,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IArtifactNamespace[]>(\n      callback,\n      'GET',\n      '/artifact/namespaces',\n      { fields: request.fields, limit: request.limit, offset: request.offset },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Return the value of an artifact\n   *\n   * The MIME type for the API response is set to the `content_type` of the value\n   *\n   * **Note**: The artifact storage API can only be used by Looker-built extensions.\n   *\n   * GET /artifact/{namespace}/value -> string\n   *\n   * @param callback streaming output function\n   * @param namespace Artifact storage namespace\n   * @param key Artifact storage key. Namespace + Key must be unique\n   * @param options one-time API call overrides\n   *\n   */\n  async artifact_value(\n    callback: (readable: Readable) => Promise<string>,\n    namespace: string,\n    key?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    namespace = encodeParam(namespace)\n    return this.authStream<string>(\n      callback,\n      'GET',\n      `/artifact/${namespace}/value`,\n      { key },\n      null,\n      options\n    )\n  }\n\n  /**\n   * Remove *all* artifacts from a namespace. Purged artifacts are permanently deleted\n   *\n   * **Note**: The artifact storage API can only be used by Looker-built extensions.\n   *\n   * DELETE /artifact/{namespace}/purge -> void\n   *\n   * @param callback streaming output function\n   * @param namespace Artifact storage namespace\n   * @param options one-time API call overrides\n   *\n   */\n  async purge_artifacts(\n    callback: (readable: Readable) => Promise<void>,\n    namespace: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    namespace = encodeParam(namespace)\n    return this.authStream<void>(\n      callback,\n      'DELETE',\n      `/artifact/${namespace}/purge`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search all key/value pairs in a namespace for matching criteria.\n   *\n   * Returns an array of artifacts matching the specified search criteria.\n   *\n   * Key search patterns use case-insensitive matching and can contain `%` and `_` as SQL LIKE pattern match wildcard expressions.\n   *\n   * The parameters `min_size` and `max_size` can be used individually or together.\n   *\n   * - `min_size` finds artifacts with sizes greater than or equal to its value\n   * - `max_size` finds artifacts with sizes less than or equal to its value\n   * - using both parameters restricts the minimum and maximum size range for artifacts\n   *\n   * **NOTE**: Artifacts are always returned in alphanumeric order by key.\n   *\n   * Get a **single artifact** by namespace and key with [`artifact`](#!/Artifact/artifact)\n   *\n   * **Note**: The artifact storage API can only be used by Looker-built extensions.\n   *\n   * GET /artifact/{namespace}/search -> IArtifact[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchArtifacts\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_artifacts(\n    callback: (readable: Readable) => Promise<IArtifact[]>,\n    request: IRequestSearchArtifacts,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.namespace = encodeParam(request.namespace)\n    return this.authStream<IArtifact[]>(\n      callback,\n      'GET',\n      `/artifact/${request.namespace}/search`,\n      {\n        fields: request.fields,\n        key: request.key,\n        user_ids: request.user_ids,\n        min_size: request.min_size,\n        max_size: request.max_size,\n        limit: request.limit,\n        offset: request.offset,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get one or more artifacts\n   *\n   * Returns an array of artifacts matching the specified key value(s).\n   *\n   * **Note**: The artifact storage API can only be used by Looker-built extensions.\n   *\n   * GET /artifact/{namespace} -> IArtifact[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestArtifact\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async artifact(\n    callback: (readable: Readable) => Promise<IArtifact[]>,\n    request: IRequestArtifact,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.namespace = encodeParam(request.namespace)\n    return this.authStream<IArtifact[]>(\n      callback,\n      'GET',\n      `/artifact/${request.namespace}`,\n      {\n        key: request.key,\n        fields: request.fields,\n        limit: request.limit,\n        offset: request.offset,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Delete one or more artifacts\n   *\n   * To avoid rate limiting on deletion requests, multiple artifacts can be deleted at the same time by using a comma-delimited list of artifact keys.\n   *\n   * **Note**: The artifact storage API can only be used by Looker-built extensions.\n   *\n   * DELETE /artifact/{namespace} -> void\n   *\n   * @param callback streaming output function\n   * @param namespace Artifact storage namespace\n   * @param key Comma-delimited list of keys. Wildcards not allowed.\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_artifact(\n    callback: (readable: Readable) => Promise<void>,\n    namespace: string,\n    key: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    namespace = encodeParam(namespace)\n    return this.authStream<void>(\n      callback,\n      'DELETE',\n      `/artifact/${namespace}`,\n      { key },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create or update one or more artifacts\n   *\n   * Only `key` and `value` are required to _create_ an artifact.\n   * To _update_ an artifact, its current `version` value must be provided.\n   *\n   * In the following example `body` payload, `one` and `two` are existing artifacts, and `three` is new:\n   *\n   * ```json\n   * [\n   *   { \"key\": \"one\", \"value\": \"[ \\\"updating\\\", \\\"existing\\\", \\\"one\\\" ]\", \"version\": 10, \"content_type\": \"application/json\" },\n   *   { \"key\": \"two\", \"value\": \"updating existing two\", \"version\": 20 },\n   *   { \"key\": \"three\", \"value\": \"creating new three\" },\n   * ]\n   * ```\n   *\n   * Notes for this body:\n   *\n   * - The `value` for `key` **one** is a JSON payload, so a `content_type` override is needed. This override must be done **every** time a JSON value is set.\n   * - The `version` values for **one** and **two** mean they have been saved 10 and 20 times, respectively.\n   * - If `version` is **not** provided for an existing artifact, the entire request will be refused and a `Bad Request` response will be sent.\n   * - If `version` is provided for an artifact, it is only used for helping to prevent inadvertent data overwrites. It cannot be used to **set** the version of an artifact. The Looker server controls `version`.\n   * - We suggest encoding binary values as base64. Because the MIME content type for base64 is detected as plain text, also provide `content_type` to correctly indicate the value's type for retrieval and client-side processing.\n   *\n   * Because artifacts are stored encrypted, the same value can be written multiple times (provided the correct `version` number is used). Looker does not examine any values stored in the artifact store, and only decrypts when sending artifacts back in an API response.\n   *\n   * **Note**: The artifact storage API can only be used by Looker-built extensions.\n   *\n   * PUT /artifacts/{namespace} -> IArtifact[]\n   *\n   * @param callback streaming output function\n   * @param namespace Artifact storage namespace\n   * @param body Partial<IUpdateArtifact[]>\n   * @param fields Comma-delimited names of fields to return in responses. Omit for all fields\n   * @param options one-time API call overrides\n   *\n   */\n  async update_artifacts(\n    callback: (readable: Readable) => Promise<IArtifact[]>,\n    namespace: string,\n    body: Partial<IUpdateArtifact[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    namespace = encodeParam(namespace)\n    return this.authStream<IArtifact[]>(\n      callback,\n      'PUT',\n      `/artifacts/${namespace}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  //#endregion Artifact: Artifact Storage\n\n  //#region Auth: Manage User Authentication Configuration\n\n  /**\n   * ### Create an embed secret using the specified information.\n   *\n   * The value of the `secret` field will be set by Looker and returned.\n   *\n   * POST /embed_config/secrets -> IEmbedSecret\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteEmbedSecret>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_embed_secret(\n    callback: (readable: Readable) => Promise<IEmbedSecret>,\n    body?: Partial<IWriteEmbedSecret>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IEmbedSecret>(\n      callback,\n      'POST',\n      '/embed_config/secrets',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete an embed secret.\n   *\n   * DELETE /embed_config/secrets/{embed_secret_id} -> string\n   *\n   * @param callback streaming output function\n   * @param embed_secret_id Id of Embed Secret\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_embed_secret(\n    callback: (readable: Readable) => Promise<string>,\n    embed_secret_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    embed_secret_id = encodeParam(embed_secret_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/embed_config/secrets/${embed_secret_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create SSO Embed URL\n   *\n   * Creates an SSO embed URL and cryptographically signs it with an embed secret.\n   * This signed URL can then be used to instantiate a Looker embed session in a PBL web application.\n   * Do not make any modifications to this URL - any change may invalidate the signature and\n   * cause the URL to fail to load a Looker embed session.\n   *\n   * A signed SSO embed URL can only be used once. After it has been used to request a page from the\n   * Looker server, the URL is invalid. Future requests using the same URL will fail. This is to prevent\n   * 'replay attacks'.\n   *\n   * The `target_url` property must be a complete URL of a Looker UI page - scheme, hostname, path and query params.\n   * To load a dashboard with id 56 and with a filter of `Date=1 years`, the looker URL would look like `https:/myname.looker.com/dashboards/56?Date=1%20years`.\n   * The best way to obtain this target_url is to navigate to the desired Looker page in your web browser,\n   * copy the URL shown in the browser address bar and paste it into the `target_url` property as a quoted string value in this API request.\n   *\n   * Permissions for the embed user are defined by the groups in which the embed user is a member (group_ids property)\n   * and the lists of models and permissions assigned to the embed user.\n   * At a minimum, you must provide values for either the group_ids property, or both the models and permissions properties.\n   * These properties are additive; an embed user can be a member of certain groups AND be granted access to models and permissions.\n   *\n   * The embed user's access is the union of permissions granted by the group_ids, models, and permissions properties.\n   *\n   * This function does not strictly require all group_ids, user attribute names, or model names to exist at the moment the\n   * SSO embed url is created. Unknown group_id, user attribute names or model names will be passed through to the output URL.\n   * To diagnose potential problems with an SSO embed URL, you can copy the signed URL into the Embed URI Validator text box in `<your looker instance>/admin/embed`.\n   *\n   * The `secret_id` parameter is optional. If specified, its value must be the id of an active secret defined in the Looker instance.\n   * if not specified, the URL will be signed using the newest active secret defined in the Looker instance.\n   *\n   * #### Security Note\n   * Protect this signed URL as you would an access token or password credentials - do not write\n   * it to disk, do not pass it to a third party, and only pass it through a secure HTTPS\n   * encrypted transport.\n   *\n   * POST /embed/sso_url -> IEmbedUrlResponse\n   *\n   * @param callback streaming output function\n   * @param body Partial<IEmbedSsoParams>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_sso_embed_url(\n    callback: (readable: Readable) => Promise<IEmbedUrlResponse>,\n    body: Partial<IEmbedSsoParams>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IEmbedUrlResponse>(\n      callback,\n      'POST',\n      '/embed/sso_url',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Create an Embed URL\n   *\n   * Creates an embed URL that runs as the Looker user making this API call. (\"Embed as me\")\n   * This embed URL can then be used to instantiate a Looker embed session in a\n   * \"Powered by Looker\" (PBL) web application.\n   *\n   * This is similar to Private Embedding (https://docs.looker.com/r/admin/embed/private-embed). Instead of\n   * of logging into the Web UI to authenticate, the user has already authenticated against the API to be able to\n   * make this call. However, unlike Private Embed where the user has access to any other part of the Looker UI,\n   * the embed web session created by requesting the EmbedUrlResponse.url in a browser only has access to\n   * content visible under the `/embed` context.\n   *\n   * An embed URL can only be used once, and must be used within 5 minutes of being created. After it\n   * has been used to request a page from the Looker server, the URL is invalid. Future requests using\n   * the same URL will fail. This is to prevent 'replay attacks'.\n   *\n   * The `target_url` property must be a complete URL of a Looker Embedded UI page - scheme, hostname, path starting with \"/embed\" and query params.\n   * To load a dashboard with id 56 and with a filter of `Date=1 years`, the looker Embed URL would look like `https://myname.looker.com/embed/dashboards/56?Date=1%20years`.\n   * The best way to obtain this target_url is to navigate to the desired Looker page in your web browser,\n   * copy the URL shown in the browser address bar, insert \"/embed\" after the host/port, and paste it into the `target_url` property as a quoted string value in this API request.\n   *\n   * #### Security Note\n   * Protect this embed URL as you would an access token or password credentials - do not write\n   * it to disk, do not pass it to a third party, and only pass it through a secure HTTPS\n   * encrypted transport.\n   *\n   * POST /embed/token_url/me -> IEmbedUrlResponse\n   *\n   * @param callback streaming output function\n   * @param body Partial<IEmbedParams>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_embed_url_as_me(\n    callback: (readable: Readable) => Promise<IEmbedUrlResponse>,\n    body: Partial<IEmbedParams>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IEmbedUrlResponse>(\n      callback,\n      'POST',\n      '/embed/token_url/me',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Acquire a cookieless embed session.\n   *\n   * The acquire session endpoint negates the need for signing the embed url and passing it as a parameter\n   * to the embed login. This endpoint accepts an embed user definition and creates it if it does not exist,\n   * otherwise it reuses it. Note that this endpoint will not update the user, user attributes or group\n   * attributes if the embed user already exists. This is the same behavior as the embed SSO login.\n   *\n   * The endpoint also accepts an optional `session_reference_token`. If present and the session has not expired\n   * and the credentials match the credentials for the embed session, a new authentication token will be\n   * generated. This allows the embed session to attach a new embedded IFRAME to the embed session. Note that\n   * the session will NOT be extended in this scenario, in other words the session_length parameter is ignored.\n   *\n   * If the session_reference_token has expired, it will be ignored and a new embed session will be created.\n   *\n   * If the credentials do not match the credentials associated with an exisiting session_reference_token, a\n   * 404 will be returned.\n   *\n   * The endpoint returns the following:\n   * - Authentication token - a token that is passed to `/embed/login` endpoint that creates or attaches to the\n   *   embed session. This token can be used once and has a lifetime of 30 seconds.\n   * - Session reference token - a token that lives for the length of the session. This token is used to\n   *   generate new api and navigation tokens OR create new embed IFRAMEs.\n   * - Api token - lives for 10 minutes. The Looker client will ask for this token once it is loaded into the\n   *   iframe.\n   * - Navigation token - lives for 10 minutes. The Looker client will ask for this token once it is loaded into\n   *   the iframe.\n   *\n   * POST /embed/cookieless_session/acquire -> IEmbedCookielessSessionAcquireResponse\n   *\n   * @param callback streaming output function\n   * @param body Partial<IEmbedCookielessSessionAcquire>\n   * @param options one-time API call overrides\n   *\n   */\n  async acquire_embed_cookieless_session(\n    callback: (\n      readable: Readable\n    ) => Promise<IEmbedCookielessSessionAcquireResponse>,\n    body: Partial<IEmbedCookielessSessionAcquire>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IEmbedCookielessSessionAcquireResponse>(\n      callback,\n      'POST',\n      '/embed/cookieless_session/acquire',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete cookieless embed session\n   *\n   * This will delete the session associated with the given session reference token. Calling this endpoint will result\n   * in the session and session reference data being cleared from the system. This endpoint can be used to log an embed\n   * user out of the Looker instance.\n   *\n   * DELETE /embed/cookieless_session/{session_reference_token} -> string\n   *\n   * @param callback streaming output function\n   * @param session_reference_token Embed session reference token\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_embed_cookieless_session(\n    callback: (readable: Readable) => Promise<string>,\n    session_reference_token: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    session_reference_token = encodeParam(session_reference_token)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/embed/cookieless_session/${session_reference_token}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Generate api and navigation tokens for a cookieless embed session\n   *\n   * The generate tokens endpoint is used to create new tokens of type:\n   * - Api token.\n   * - Navigation token.\n   * The generate tokens endpoint should be called every time the Looker client asks for a token (except for the\n   * first time when the tokens returned by the acquire_session endpoint should be used).\n   *\n   * PUT /embed/cookieless_session/generate_tokens -> IEmbedCookielessSessionGenerateTokensResponse\n   *\n   * @param callback streaming output function\n   * @param body Partial<IEmbedCookielessSessionGenerateTokens>\n   * @param options one-time API call overrides\n   *\n   */\n  async generate_tokens_for_cookieless_session(\n    callback: (\n      readable: Readable\n    ) => Promise<IEmbedCookielessSessionGenerateTokensResponse>,\n    body: Partial<IEmbedCookielessSessionGenerateTokens>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IEmbedCookielessSessionGenerateTokensResponse>(\n      callback,\n      'PUT',\n      '/embed/cookieless_session/generate_tokens',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get the LDAP configuration.\n   *\n   * Looker can be optionally configured to authenticate users against an Active Directory or other LDAP directory server.\n   * LDAP setup requires coordination with an administrator of that directory server.\n   *\n   * Only Looker administrators can read and update the LDAP configuration.\n   *\n   * Configuring LDAP impacts authentication for all users. This configuration should be done carefully.\n   *\n   * Looker maintains a single LDAP configuration. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n   *\n   * LDAP is enabled or disabled for Looker using the **enabled** field.\n   *\n   * Looker will never return an **auth_password** field. That value can be set, but never retrieved.\n   *\n   * See the [Looker LDAP docs](https://docs.looker.com/r/api/ldap_setup) for additional information.\n   *\n   * GET /ldap_config -> ILDAPConfig\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async ldap_config(\n    callback: (readable: Readable) => Promise<ILDAPConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILDAPConfig>(\n      callback,\n      'GET',\n      '/ldap_config',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the LDAP configuration.\n   *\n   * Configuring LDAP impacts authentication for all users. This configuration should be done carefully.\n   *\n   * Only Looker administrators can read and update the LDAP configuration.\n   *\n   * LDAP is enabled or disabled for Looker using the **enabled** field.\n   *\n   * It is **highly** recommended that any LDAP setting changes be tested using the APIs below before being set globally.\n   *\n   * See the [Looker LDAP docs](https://docs.looker.com/r/api/ldap_setup) for additional information.\n   *\n   * PATCH /ldap_config -> ILDAPConfig\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteLDAPConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_ldap_config(\n    callback: (readable: Readable) => Promise<ILDAPConfig>,\n    body: Partial<IWriteLDAPConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILDAPConfig>(\n      callback,\n      'PATCH',\n      '/ldap_config',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Test the connection settings for an LDAP configuration.\n   *\n   * This tests that the connection is possible given a connection_host and connection_port.\n   *\n   * **connection_host** and **connection_port** are required. **connection_tls** is optional.\n   *\n   * Example:\n   * ```json\n   * {\n   *   \"connection_host\": \"ldap.example.com\",\n   *   \"connection_port\": \"636\",\n   *   \"connection_tls\": true\n   * }\n   * ```\n   *\n   * No authentication to the LDAP server is attempted.\n   *\n   * The active LDAP settings are not modified.\n   *\n   * PUT /ldap_config/test_connection -> ILDAPConfigTestResult\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteLDAPConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async test_ldap_config_connection(\n    callback: (readable: Readable) => Promise<ILDAPConfigTestResult>,\n    body: Partial<IWriteLDAPConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILDAPConfigTestResult>(\n      callback,\n      'PUT',\n      '/ldap_config/test_connection',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Test the connection authentication settings for an LDAP configuration.\n   *\n   * This tests that the connection is possible and that a 'server' account to be used by Looker can       authenticate to the LDAP server given connection and authentication information.\n   *\n   * **connection_host**, **connection_port**, and **auth_username**, are required.       **connection_tls** and **auth_password** are optional.\n   *\n   * Example:\n   * ```json\n   * {\n   *   \"connection_host\": \"ldap.example.com\",\n   *   \"connection_port\": \"636\",\n   *   \"connection_tls\": true,\n   *   \"auth_username\": \"cn=looker,dc=example,dc=com\",\n   *   \"auth_password\": \"secret\"\n   * }\n   * ```\n   *\n   * Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.\n   *\n   * The active LDAP settings are not modified.\n   *\n   * PUT /ldap_config/test_auth -> ILDAPConfigTestResult\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteLDAPConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async test_ldap_config_auth(\n    callback: (readable: Readable) => Promise<ILDAPConfigTestResult>,\n    body: Partial<IWriteLDAPConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILDAPConfigTestResult>(\n      callback,\n      'PUT',\n      '/ldap_config/test_auth',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Test the user authentication settings for an LDAP configuration without authenticating the user.\n   *\n   * This test will let you easily test the mapping for user properties and roles for any user without      needing to authenticate as that user.\n   *\n   * This test accepts a full LDAP configuration along with a username and attempts to find the full info      for the user from the LDAP server without actually authenticating the user. So, user password is not      required.The configuration is validated before attempting to contact the server.\n   *\n   * **test_ldap_user** is required.\n   *\n   * The active LDAP settings are not modified.\n   *\n   * PUT /ldap_config/test_user_info -> ILDAPConfigTestResult\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteLDAPConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async test_ldap_config_user_info(\n    callback: (readable: Readable) => Promise<ILDAPConfigTestResult>,\n    body: Partial<IWriteLDAPConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILDAPConfigTestResult>(\n      callback,\n      'PUT',\n      '/ldap_config/test_user_info',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Test the user authentication settings for an LDAP configuration.\n   *\n   * This test accepts a full LDAP configuration along with a username/password pair and attempts to       authenticate the user with the LDAP server. The configuration is validated before attempting the       authentication.\n   *\n   * Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.\n   *\n   * **test_ldap_user** and **test_ldap_password** are required.\n   *\n   * The active LDAP settings are not modified.\n   *\n   * PUT /ldap_config/test_user_auth -> ILDAPConfigTestResult\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteLDAPConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async test_ldap_config_user_auth(\n    callback: (readable: Readable) => Promise<ILDAPConfigTestResult>,\n    body: Partial<IWriteLDAPConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILDAPConfigTestResult>(\n      callback,\n      'PUT',\n      '/ldap_config/test_user_auth',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Registers a mobile device.\n   * # Required fields: [:device_token, :device_type]\n   *\n   * POST /mobile/device -> IMobileToken\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteMobileToken>\n   * @param options one-time API call overrides\n   *\n   */\n  async register_mobile_device(\n    callback: (readable: Readable) => Promise<IMobileToken>,\n    body: Partial<IWriteMobileToken>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IMobileToken>(\n      callback,\n      'POST',\n      '/mobile/device',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Updates the mobile device registration\n   *\n   * PATCH /mobile/device/{device_id} -> IMobileToken\n   *\n   * @param callback streaming output function\n   * @param device_id Unique id of the device.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_mobile_device_registration(\n    callback: (readable: Readable) => Promise<IMobileToken>,\n    device_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    device_id = encodeParam(device_id)\n    return this.authStream<IMobileToken>(\n      callback,\n      'PATCH',\n      `/mobile/device/${device_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Deregister a mobile device.\n   *\n   * DELETE /mobile/device/{device_id} -> void\n   *\n   * @param callback streaming output function\n   * @param device_id Unique id of the device.\n   * @param options one-time API call overrides\n   *\n   */\n  async deregister_mobile_device(\n    callback: (readable: Readable) => Promise<void>,\n    device_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    device_id = encodeParam(device_id)\n    return this.authStream<void>(\n      callback,\n      'DELETE',\n      `/mobile/device/${device_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### List All OAuth Client Apps\n   *\n   * Lists all applications registered to use OAuth2 login with this Looker instance, including\n   * enabled and disabled apps.\n   *\n   * Results are filtered to include only the apps that the caller (current user)\n   * has permission to see.\n   *\n   * GET /oauth_client_apps -> IOauthClientApp[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_oauth_client_apps(\n    callback: (readable: Readable) => Promise<IOauthClientApp[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IOauthClientApp[]>(\n      callback,\n      'GET',\n      '/oauth_client_apps',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Oauth Client App\n   *\n   * Returns the registered app client with matching client_guid.\n   *\n   * GET /oauth_client_apps/{client_guid} -> IOauthClientApp\n   *\n   * @param callback streaming output function\n   * @param client_guid The unique id of this application\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async oauth_client_app(\n    callback: (readable: Readable) => Promise<IOauthClientApp>,\n    client_guid: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    client_guid = encodeParam(client_guid)\n    return this.authStream<IOauthClientApp>(\n      callback,\n      'GET',\n      `/oauth_client_apps/${client_guid}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Register an OAuth2 Client App\n   *\n   * Registers details identifying an external web app or native app as an OAuth2 login client of the Looker instance.\n   * The app registration must provide a unique client_guid and redirect_uri that the app will present\n   * in OAuth login requests. If the client_guid and redirect_uri parameters in the login request do not match\n   * the app details registered with the Looker instance, the request is assumed to be a forgery and is rejected.\n   *\n   * POST /oauth_client_apps/{client_guid} -> IOauthClientApp\n   *\n   * @param callback streaming output function\n   * @param client_guid The unique id of this application\n   * @param body Partial<IWriteOauthClientApp>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async register_oauth_client_app(\n    callback: (readable: Readable) => Promise<IOauthClientApp>,\n    client_guid: string,\n    body: Partial<IWriteOauthClientApp>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    client_guid = encodeParam(client_guid)\n    return this.authStream<IOauthClientApp>(\n      callback,\n      'POST',\n      `/oauth_client_apps/${client_guid}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Update OAuth2 Client App Details\n   *\n   * Modifies the details a previously registered OAuth2 login client app.\n   *\n   * PATCH /oauth_client_apps/{client_guid} -> IOauthClientApp\n   *\n   * @param callback streaming output function\n   * @param client_guid The unique id of this application\n   * @param body Partial<IWriteOauthClientApp>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_oauth_client_app(\n    callback: (readable: Readable) => Promise<IOauthClientApp>,\n    client_guid: string,\n    body: Partial<IWriteOauthClientApp>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    client_guid = encodeParam(client_guid)\n    return this.authStream<IOauthClientApp>(\n      callback,\n      'PATCH',\n      `/oauth_client_apps/${client_guid}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete OAuth Client App\n   *\n   * Deletes the registration info of the app with the matching client_guid.\n   * All active sessions and tokens issued for this app will immediately become invalid.\n   *\n   * As with most REST DELETE operations, this endpoint does not return an error if the\n   * indicated resource does not exist.\n   *\n   * ### Note: this deletion cannot be undone.\n   *\n   * DELETE /oauth_client_apps/{client_guid} -> string\n   *\n   * @param callback streaming output function\n   * @param client_guid The unique id of this application\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_oauth_client_app(\n    callback: (readable: Readable) => Promise<string>,\n    client_guid: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    client_guid = encodeParam(client_guid)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/oauth_client_apps/${client_guid}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Invalidate All Issued Tokens\n   *\n   * Immediately invalidates all auth codes, sessions, access tokens and refresh tokens issued for\n   * this app for ALL USERS of this app.\n   *\n   * DELETE /oauth_client_apps/{client_guid}/tokens -> string\n   *\n   * @param callback streaming output function\n   * @param client_guid The unique id of the application\n   * @param options one-time API call overrides\n   *\n   */\n  async invalidate_tokens(\n    callback: (readable: Readable) => Promise<string>,\n    client_guid: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    client_guid = encodeParam(client_guid)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/oauth_client_apps/${client_guid}/tokens`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Activate an app for a user\n   *\n   * Activates a user for a given oauth client app. This indicates the user has been informed that\n   * the app will have access to the user's looker data, and that the user has accepted and allowed\n   * the app to use their Looker account.\n   *\n   * Activating a user for an app that the user is already activated with returns a success response.\n   *\n   * POST /oauth_client_apps/{client_guid}/users/{user_id} -> string\n   *\n   * @param callback streaming output function\n   * @param client_guid The unique id of this application\n   * @param user_id The id of the user to enable use of this app\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async activate_app_user(\n    callback: (readable: Readable) => Promise<string>,\n    client_guid: string,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    client_guid = encodeParam(client_guid)\n    user_id = encodeParam(user_id)\n    return this.authStream<string>(\n      callback,\n      'POST',\n      `/oauth_client_apps/${client_guid}/users/${user_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Deactivate an app for a user\n   *\n   * Deactivate a user for a given oauth client app. All tokens issued to the app for\n   * this user will be invalid immediately. Before the user can use the app with their\n   * Looker account, the user will have to read and accept an account use disclosure statement for the app.\n   *\n   * Admin users can deactivate other users, but non-admin users can only deactivate themselves.\n   *\n   * As with most REST DELETE operations, this endpoint does not return an error if the indicated\n   * resource (app or user) does not exist or has already been deactivated.\n   *\n   * DELETE /oauth_client_apps/{client_guid}/users/{user_id} -> string\n   *\n   * @param callback streaming output function\n   * @param client_guid The unique id of this application\n   * @param user_id The id of the user to enable use of this app\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async deactivate_app_user(\n    callback: (readable: Readable) => Promise<string>,\n    client_guid: string,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    client_guid = encodeParam(client_guid)\n    user_id = encodeParam(user_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/oauth_client_apps/${client_guid}/users/${user_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the OIDC configuration.\n   *\n   * Looker can be optionally configured to authenticate users against an OpenID Connect (OIDC)\n   * authentication server. OIDC setup requires coordination with an administrator of that server.\n   *\n   * Only Looker administrators can read and update the OIDC configuration.\n   *\n   * Configuring OIDC impacts authentication for all users. This configuration should be done carefully.\n   *\n   * Looker maintains a single OIDC configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n   *\n   * OIDC is enabled or disabled for Looker using the **enabled** field.\n   *\n   * GET /oidc_config -> IOIDCConfig\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async oidc_config(\n    callback: (readable: Readable) => Promise<IOIDCConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IOIDCConfig>(\n      callback,\n      'GET',\n      '/oidc_config',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the OIDC configuration.\n   *\n   * Configuring OIDC impacts authentication for all users. This configuration should be done carefully.\n   *\n   * Only Looker administrators can read and update the OIDC configuration.\n   *\n   * OIDC is enabled or disabled for Looker using the **enabled** field.\n   *\n   * It is **highly** recommended that any OIDC setting changes be tested using the APIs below before being set globally.\n   *\n   * PATCH /oidc_config -> IOIDCConfig\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteOIDCConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_oidc_config(\n    callback: (readable: Readable) => Promise<IOIDCConfig>,\n    body: Partial<IWriteOIDCConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IOIDCConfig>(\n      callback,\n      'PATCH',\n      '/oidc_config',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get a OIDC test configuration by test_slug.\n   *\n   * GET /oidc_test_configs/{test_slug} -> IOIDCConfig\n   *\n   * @param callback streaming output function\n   * @param test_slug Slug of test config\n   * @param options one-time API call overrides\n   *\n   */\n  async oidc_test_config(\n    callback: (readable: Readable) => Promise<IOIDCConfig>,\n    test_slug: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    test_slug = encodeParam(test_slug)\n    return this.authStream<IOIDCConfig>(\n      callback,\n      'GET',\n      `/oidc_test_configs/${test_slug}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a OIDC test configuration.\n   *\n   * DELETE /oidc_test_configs/{test_slug} -> string\n   *\n   * @param callback streaming output function\n   * @param test_slug Slug of test config\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_oidc_test_config(\n    callback: (readable: Readable) => Promise<string>,\n    test_slug: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    test_slug = encodeParam(test_slug)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/oidc_test_configs/${test_slug}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a OIDC test configuration.\n   *\n   * POST /oidc_test_configs -> IOIDCConfig\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteOIDCConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_oidc_test_config(\n    callback: (readable: Readable) => Promise<IOIDCConfig>,\n    body: Partial<IWriteOIDCConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IOIDCConfig>(\n      callback,\n      'POST',\n      '/oidc_test_configs',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get password config.\n   *\n   * GET /password_config -> IPasswordConfig\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async password_config(\n    callback: (readable: Readable) => Promise<IPasswordConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IPasswordConfig>(\n      callback,\n      'GET',\n      '/password_config',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update password config.\n   *\n   * PATCH /password_config -> IPasswordConfig\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWritePasswordConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_password_config(\n    callback: (readable: Readable) => Promise<IPasswordConfig>,\n    body: Partial<IWritePasswordConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IPasswordConfig>(\n      callback,\n      'PATCH',\n      '/password_config',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Force all credentials_email users to reset their login passwords upon their next login.\n   *\n   * PUT /password_config/force_password_reset_at_next_login_for_all_users -> string\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async force_password_reset_at_next_login_for_all_users(\n    callback: (readable: Readable) => Promise<string>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<string>(\n      callback,\n      'PUT',\n      '/password_config/force_password_reset_at_next_login_for_all_users',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the SAML configuration.\n   *\n   * Looker can be optionally configured to authenticate users against a SAML authentication server.\n   * SAML setup requires coordination with an administrator of that server.\n   *\n   * Only Looker administrators can read and update the SAML configuration.\n   *\n   * Configuring SAML impacts authentication for all users. This configuration should be done carefully.\n   *\n   * Looker maintains a single SAML configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n   *\n   * SAML is enabled or disabled for Looker using the **enabled** field.\n   *\n   * GET /saml_config -> ISamlConfig\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async saml_config(\n    callback: (readable: Readable) => Promise<ISamlConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISamlConfig>(\n      callback,\n      'GET',\n      '/saml_config',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the SAML configuration.\n   *\n   * Configuring SAML impacts authentication for all users. This configuration should be done carefully.\n   *\n   * Only Looker administrators can read and update the SAML configuration.\n   *\n   * SAML is enabled or disabled for Looker using the **enabled** field.\n   *\n   * It is **highly** recommended that any SAML setting changes be tested using the APIs below before being set globally.\n   *\n   * PATCH /saml_config -> ISamlConfig\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteSamlConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_saml_config(\n    callback: (readable: Readable) => Promise<ISamlConfig>,\n    body: Partial<IWriteSamlConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISamlConfig>(\n      callback,\n      'PATCH',\n      '/saml_config',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get a SAML test configuration by test_slug.\n   *\n   * GET /saml_test_configs/{test_slug} -> ISamlConfig\n   *\n   * @param callback streaming output function\n   * @param test_slug Slug of test config\n   * @param options one-time API call overrides\n   *\n   */\n  async saml_test_config(\n    callback: (readable: Readable) => Promise<ISamlConfig>,\n    test_slug: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    test_slug = encodeParam(test_slug)\n    return this.authStream<ISamlConfig>(\n      callback,\n      'GET',\n      `/saml_test_configs/${test_slug}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a SAML test configuration.\n   *\n   * DELETE /saml_test_configs/{test_slug} -> string\n   *\n   * @param callback streaming output function\n   * @param test_slug Slug of test config\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_saml_test_config(\n    callback: (readable: Readable) => Promise<string>,\n    test_slug: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    test_slug = encodeParam(test_slug)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/saml_test_configs/${test_slug}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a SAML test configuration.\n   *\n   * POST /saml_test_configs -> ISamlConfig\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteSamlConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_saml_test_config(\n    callback: (readable: Readable) => Promise<ISamlConfig>,\n    body: Partial<IWriteSamlConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISamlConfig>(\n      callback,\n      'POST',\n      '/saml_test_configs',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Parse the given xml as a SAML IdP metadata document and return the result.\n   *\n   * POST /parse_saml_idp_metadata -> ISamlMetadataParseResult\n   *\n   * @param callback streaming output function\n   * @param body string\n   * @param options one-time API call overrides\n   *\n   */\n  async parse_saml_idp_metadata(\n    callback: (readable: Readable) => Promise<ISamlMetadataParseResult>,\n    body: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISamlMetadataParseResult>(\n      callback,\n      'POST',\n      '/parse_saml_idp_metadata',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Fetch the given url and parse it as a SAML IdP metadata document and return the result.\n   * Note that this requires that the url be public or at least at a location where the Looker instance\n   * can fetch it without requiring any special authentication.\n   *\n   * POST /fetch_and_parse_saml_idp_metadata -> ISamlMetadataParseResult\n   *\n   * @param callback streaming output function\n   * @param body string\n   * @param options one-time API call overrides\n   *\n   */\n  async fetch_and_parse_saml_idp_metadata(\n    callback: (readable: Readable) => Promise<ISamlMetadataParseResult>,\n    body: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISamlMetadataParseResult>(\n      callback,\n      'POST',\n      '/fetch_and_parse_saml_idp_metadata',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get session config.\n   *\n   * GET /session_config -> ISessionConfig\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async session_config(\n    callback: (readable: Readable) => Promise<ISessionConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISessionConfig>(\n      callback,\n      'GET',\n      '/session_config',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update session config.\n   *\n   * PATCH /session_config -> ISessionConfig\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteSessionConfig>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_session_config(\n    callback: (readable: Readable) => Promise<ISessionConfig>,\n    body: Partial<IWriteSessionConfig>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISessionConfig>(\n      callback,\n      'PATCH',\n      '/session_config',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get Support Access Allowlist Users\n   *\n   * Returns the users that have been added to the Support Access Allowlist\n   *\n   * GET /support_access/allowlist -> ISupportAccessAllowlistEntry[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async get_support_access_allowlist_entries(\n    callback: (readable: Readable) => Promise<ISupportAccessAllowlistEntry[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISupportAccessAllowlistEntry[]>(\n      callback,\n      'GET',\n      '/support_access/allowlist',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Add Support Access Allowlist Users\n   *\n   * Adds a list of emails to the Allowlist, using the provided reason\n   *\n   * POST /support_access/allowlist -> ISupportAccessAllowlistEntry[]\n   *\n   * @param callback streaming output function\n   * @param body Partial<ISupportAccessAddEntries>\n   * @param options one-time API call overrides\n   *\n   */\n  async add_support_access_allowlist_entries(\n    callback: (readable: Readable) => Promise<ISupportAccessAllowlistEntry[]>,\n    body: Partial<ISupportAccessAddEntries>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISupportAccessAllowlistEntry[]>(\n      callback,\n      'POST',\n      '/support_access/allowlist',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete Support Access Allowlist User\n   *\n   * Deletes the specified Allowlist Entry Id\n   *\n   * DELETE /support_access/allowlist/{entry_id} -> string\n   *\n   * @param callback streaming output function\n   * @param entry_id Id of Allowlist Entry\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_support_access_allowlist_entry(\n    callback: (readable: Readable) => Promise<string>,\n    entry_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    entry_id = encodeParam(entry_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/support_access/allowlist/${entry_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Enable Support Access\n   *\n   * Enables Support Access for the provided duration\n   *\n   * PUT /support_access/enable -> ISupportAccessStatus\n   *\n   * @param callback streaming output function\n   * @param body Partial<ISupportAccessEnable>\n   * @param options one-time API call overrides\n   *\n   */\n  async enable_support_access(\n    callback: (readable: Readable) => Promise<ISupportAccessStatus>,\n    body: Partial<ISupportAccessEnable>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISupportAccessStatus>(\n      callback,\n      'PUT',\n      '/support_access/enable',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Disable Support Access\n   *\n   * Disables Support Access immediately\n   *\n   * PUT /support_access/disable -> ISupportAccessStatus\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async disable_support_access(\n    callback: (readable: Readable) => Promise<ISupportAccessStatus>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISupportAccessStatus>(\n      callback,\n      'PUT',\n      '/support_access/disable',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Support Access Status\n   *\n   * Returns the current Support Access Status\n   *\n   * GET /support_access/status -> ISupportAccessStatus\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async support_access_status(\n    callback: (readable: Readable) => Promise<ISupportAccessStatus>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISupportAccessStatus>(\n      callback,\n      'GET',\n      '/support_access/status',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get currently locked-out users.\n   *\n   * GET /user_login_lockouts -> IUserLoginLockout[]\n   *\n   * @param callback streaming output function\n   * @param fields Include only these fields in the response\n   * @param options one-time API call overrides\n   *\n   */\n  async all_user_login_lockouts(\n    callback: (readable: Readable) => Promise<IUserLoginLockout[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IUserLoginLockout[]>(\n      callback,\n      'GET',\n      '/user_login_lockouts',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search currently locked-out users.\n   *\n   * GET /user_login_lockouts/search -> IUserLoginLockout[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchUserLoginLockouts\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_user_login_lockouts(\n    callback: (readable: Readable) => Promise<IUserLoginLockout[]>,\n    request: IRequestSearchUserLoginLockouts,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IUserLoginLockout[]>(\n      callback,\n      'GET',\n      '/user_login_lockouts/search',\n      {\n        fields: request.fields,\n        page: request.page,\n        per_page: request.per_page,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        auth_type: request.auth_type,\n        full_name: request.full_name,\n        email: request.email,\n        remote_id: request.remote_id,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Removes login lockout for the associated user.\n   *\n   * DELETE /user_login_lockout/{key} -> string\n   *\n   * @param callback streaming output function\n   * @param key The key associated with the locked user\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_login_lockout(\n    callback: (readable: Readable) => Promise<string>,\n    key: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    key = encodeParam(key)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/user_login_lockout/${key}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion Auth: Manage User Authentication Configuration\n\n  //#region Board: Manage Boards\n\n  /**\n   * ### Get information about all boards.\n   *\n   * GET /boards -> IBoard[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_boards(\n    callback: (readable: Readable) => Promise<IBoard[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IBoard[]>(\n      callback,\n      'GET',\n      '/boards',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a new board.\n   *\n   * POST /boards -> IBoard\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteBoard>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_board(\n    callback: (readable: Readable) => Promise<IBoard>,\n    body: Partial<IWriteBoard>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IBoard>(\n      callback,\n      'POST',\n      '/boards',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Search Boards\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /boards/search -> IBoard[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchBoards\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_boards(\n    callback: (readable: Readable) => Promise<IBoard[]>,\n    request: IRequestSearchBoards,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IBoard[]>(\n      callback,\n      'GET',\n      '/boards/search',\n      {\n        title: request.title,\n        created_at: request.created_at,\n        first_name: request.first_name,\n        last_name: request.last_name,\n        fields: request.fields,\n        favorited: request.favorited,\n        creator_id: request.creator_id,\n        sorts: request.sorts,\n        page: request.page,\n        per_page: request.per_page,\n        offset: request.offset,\n        limit: request.limit,\n        filter_or: request.filter_or,\n        permission: request.permission,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a board.\n   *\n   * GET /boards/{board_id} -> IBoard\n   *\n   * @param callback streaming output function\n   * @param board_id Id of board\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async board(\n    callback: (readable: Readable) => Promise<IBoard>,\n    board_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    board_id = encodeParam(board_id)\n    return this.authStream<IBoard>(\n      callback,\n      'GET',\n      `/boards/${board_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a board definition.\n   *\n   * PATCH /boards/{board_id} -> IBoard\n   *\n   * @param callback streaming output function\n   * @param board_id Id of board\n   * @param body Partial<IWriteBoard>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_board(\n    callback: (readable: Readable) => Promise<IBoard>,\n    board_id: string,\n    body: Partial<IWriteBoard>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    board_id = encodeParam(board_id)\n    return this.authStream<IBoard>(\n      callback,\n      'PATCH',\n      `/boards/${board_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a board.\n   *\n   * DELETE /boards/{board_id} -> string\n   *\n   * @param callback streaming output function\n   * @param board_id Id of board\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_board(\n    callback: (readable: Readable) => Promise<string>,\n    board_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    board_id = encodeParam(board_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/boards/${board_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all board items.\n   *\n   * GET /board_items -> IBoardItem[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllBoardItems\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_board_items(\n    callback: (readable: Readable) => Promise<IBoardItem[]>,\n    request: IRequestAllBoardItems,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IBoardItem[]>(\n      callback,\n      'GET',\n      '/board_items',\n      {\n        fields: request.fields,\n        sorts: request.sorts,\n        board_section_id: request.board_section_id,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a new board item.\n   *\n   * POST /board_items -> IBoardItem\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteBoardItem>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_board_item(\n    callback: (readable: Readable) => Promise<IBoardItem>,\n    body: Partial<IWriteBoardItem>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IBoardItem>(\n      callback,\n      'POST',\n      '/board_items',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a board item.\n   *\n   * GET /board_items/{board_item_id} -> IBoardItem\n   *\n   * @param callback streaming output function\n   * @param board_item_id Id of board item\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async board_item(\n    callback: (readable: Readable) => Promise<IBoardItem>,\n    board_item_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    board_item_id = encodeParam(board_item_id)\n    return this.authStream<IBoardItem>(\n      callback,\n      'GET',\n      `/board_items/${board_item_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a board item definition.\n   *\n   * PATCH /board_items/{board_item_id} -> IBoardItem\n   *\n   * @param callback streaming output function\n   * @param board_item_id Id of board item\n   * @param body Partial<IWriteBoardItem>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_board_item(\n    callback: (readable: Readable) => Promise<IBoardItem>,\n    board_item_id: string,\n    body: Partial<IWriteBoardItem>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    board_item_id = encodeParam(board_item_id)\n    return this.authStream<IBoardItem>(\n      callback,\n      'PATCH',\n      `/board_items/${board_item_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a board item.\n   *\n   * DELETE /board_items/{board_item_id} -> string\n   *\n   * @param callback streaming output function\n   * @param board_item_id Id of board item\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_board_item(\n    callback: (readable: Readable) => Promise<string>,\n    board_item_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    board_item_id = encodeParam(board_item_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/board_items/${board_item_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all board sections.\n   *\n   * GET /board_sections -> IBoardSection[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllBoardSections\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_board_sections(\n    callback: (readable: Readable) => Promise<IBoardSection[]>,\n    request: IRequestAllBoardSections,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IBoardSection[]>(\n      callback,\n      'GET',\n      '/board_sections',\n      { fields: request.fields, sorts: request.sorts },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a new board section.\n   *\n   * POST /board_sections -> IBoardSection\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteBoardSection>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_board_section(\n    callback: (readable: Readable) => Promise<IBoardSection>,\n    body: Partial<IWriteBoardSection>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IBoardSection>(\n      callback,\n      'POST',\n      '/board_sections',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a board section.\n   *\n   * GET /board_sections/{board_section_id} -> IBoardSection\n   *\n   * @param callback streaming output function\n   * @param board_section_id Id of board section\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async board_section(\n    callback: (readable: Readable) => Promise<IBoardSection>,\n    board_section_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    board_section_id = encodeParam(board_section_id)\n    return this.authStream<IBoardSection>(\n      callback,\n      'GET',\n      `/board_sections/${board_section_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a board section definition.\n   *\n   * PATCH /board_sections/{board_section_id} -> IBoardSection\n   *\n   * @param callback streaming output function\n   * @param board_section_id Id of board section\n   * @param body Partial<IWriteBoardSection>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_board_section(\n    callback: (readable: Readable) => Promise<IBoardSection>,\n    board_section_id: string,\n    body: Partial<IWriteBoardSection>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    board_section_id = encodeParam(board_section_id)\n    return this.authStream<IBoardSection>(\n      callback,\n      'PATCH',\n      `/board_sections/${board_section_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a board section.\n   *\n   * DELETE /board_sections/{board_section_id} -> string\n   *\n   * @param callback streaming output function\n   * @param board_section_id Id of board section\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_board_section(\n    callback: (readable: Readable) => Promise<string>,\n    board_section_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    board_section_id = encodeParam(board_section_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/board_sections/${board_section_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion Board: Manage Boards\n\n  //#region ColorCollection: Manage Color Collections\n\n  /**\n   * ### Get an array of all existing Color Collections\n   * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n   *\n   * Get all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\n   *\n   * Get all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\n   *\n   * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n   *\n   * GET /color_collections -> IColorCollection[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_color_collections(\n    callback: (readable: Readable) => Promise<IColorCollection[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IColorCollection[]>(\n      callback,\n      'GET',\n      '/color_collections',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a custom color collection with the specified information\n   *\n   * Creates a new custom color collection object, returning the details, including the created id.\n   *\n   * **Update** an existing color collection with [Update Color Collection](#!/ColorCollection/update_color_collection)\n   *\n   * **Permanently delete** an existing custom color collection with [Delete Color Collection](#!/ColorCollection/delete_color_collection)\n   *\n   * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n   *\n   * POST /color_collections -> IColorCollection\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteColorCollection>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_color_collection(\n    callback: (readable: Readable) => Promise<IColorCollection>,\n    body: Partial<IWriteColorCollection>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IColorCollection>(\n      callback,\n      'POST',\n      '/color_collections',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get an array of all existing **Custom** Color Collections\n   * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n   *\n   * Get all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\n   *\n   * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n   *\n   * GET /color_collections/custom -> IColorCollection[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async color_collections_custom(\n    callback: (readable: Readable) => Promise<IColorCollection[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IColorCollection[]>(\n      callback,\n      'GET',\n      '/color_collections/custom',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get an array of all existing **Standard** Color Collections\n   * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n   *\n   * Get all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\n   *\n   * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n   *\n   * GET /color_collections/standard -> IColorCollection[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async color_collections_standard(\n    callback: (readable: Readable) => Promise<IColorCollection[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IColorCollection[]>(\n      callback,\n      'GET',\n      '/color_collections/standard',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the default color collection\n   *\n   * Use this to retrieve the default Color Collection.\n   *\n   * Set the default color collection with [ColorCollection](#!/ColorCollection/set_default_color_collection)\n   *\n   * GET /color_collections/default -> IColorCollection\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async default_color_collection(\n    callback: (readable: Readable) => Promise<IColorCollection>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IColorCollection>(\n      callback,\n      'GET',\n      '/color_collections/default',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Set the global default Color Collection by ID\n   *\n   * Returns the new specified default Color Collection object.\n   * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n   *\n   * PUT /color_collections/default -> IColorCollection\n   *\n   * @param callback streaming output function\n   * @param collection_id ID of color collection to set as default\n   * @param options one-time API call overrides\n   *\n   */\n  async set_default_color_collection(\n    callback: (readable: Readable) => Promise<IColorCollection>,\n    collection_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IColorCollection>(\n      callback,\n      'PUT',\n      '/color_collections/default',\n      { collection_id },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get a Color Collection by ID\n   *\n   * Use this to retrieve a specific Color Collection.\n   * Get a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n   *\n   * Get all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\n   *\n   * Get all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\n   *\n   * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n   *\n   * GET /color_collections/{collection_id} -> IColorCollection\n   *\n   * @param callback streaming output function\n   * @param collection_id Id of Color Collection\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async color_collection(\n    callback: (readable: Readable) => Promise<IColorCollection>,\n    collection_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    collection_id = encodeParam(collection_id)\n    return this.authStream<IColorCollection>(\n      callback,\n      'GET',\n      `/color_collections/${collection_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a custom color collection by id.\n   * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n   *\n   * PATCH /color_collections/{collection_id} -> IColorCollection\n   *\n   * @param callback streaming output function\n   * @param collection_id Id of Custom Color Collection\n   * @param body Partial<IWriteColorCollection>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_color_collection(\n    callback: (readable: Readable) => Promise<IColorCollection>,\n    collection_id: string,\n    body: Partial<IWriteColorCollection>,\n    options?: Partial<ITransportSettings>\n  ) {\n    collection_id = encodeParam(collection_id)\n    return this.authStream<IColorCollection>(\n      callback,\n      'PATCH',\n      `/color_collections/${collection_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a custom color collection by id\n   *\n   * This operation permanently deletes the identified **Custom** color collection.\n   *\n   * **Standard** color collections cannot be deleted\n   *\n   * Because multiple color collections can have the same label, they must be deleted by ID, not name.\n   * **Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n   *\n   * DELETE /color_collections/{collection_id} -> string\n   *\n   * @param callback streaming output function\n   * @param collection_id Id of Color Collection\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_color_collection(\n    callback: (readable: Readable) => Promise<string>,\n    collection_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    collection_id = encodeParam(collection_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/color_collections/${collection_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion ColorCollection: Manage Color Collections\n\n  //#region Config: Manage General Configuration\n\n  /**\n   * Get the current Cloud Storage Configuration.\n   *\n   * GET /cloud_storage -> IBackupConfiguration\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async cloud_storage_configuration(\n    callback: (readable: Readable) => Promise<IBackupConfiguration>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IBackupConfiguration>(\n      callback,\n      'GET',\n      '/cloud_storage',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * Update the current Cloud Storage Configuration.\n   *\n   * PATCH /cloud_storage -> IBackupConfiguration\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteBackupConfiguration>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_cloud_storage_configuration(\n    callback: (readable: Readable) => Promise<IBackupConfiguration>,\n    body: Partial<IWriteBackupConfiguration>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IBackupConfiguration>(\n      callback,\n      'PATCH',\n      '/cloud_storage',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Looker Configuration Refresh\n   *\n   * This is an endpoint for manually calling refresh on Configuration manager.\n   *\n   * PUT /configuration_force_refresh -> any\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async configuration_force_refresh(\n    callback: (readable: Readable) => Promise<any>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<any>(\n      callback,\n      'PUT',\n      '/configuration_force_refresh',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the current status and content of custom welcome emails\n   *\n   * GET /custom_welcome_email -> ICustomWelcomeEmail\n   *\n   * @deprecated\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async custom_welcome_email(\n    callback: (readable: Readable) => Promise<ICustomWelcomeEmail>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ICustomWelcomeEmail>(\n      callback,\n      'GET',\n      '/custom_welcome_email',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * Update custom welcome email setting and values. Optionally send a test email with the new content to the currently logged in user.\n   *\n   * PATCH /custom_welcome_email -> ICustomWelcomeEmail\n   *\n   * @deprecated\n   *\n   * @param callback streaming output function\n   * @param body Partial<ICustomWelcomeEmail>\n   * @param send_test_welcome_email If true a test email with the content from the request will be sent to the current user after saving\n   * @param options one-time API call overrides\n   *\n   */\n  async update_custom_welcome_email(\n    callback: (readable: Readable) => Promise<ICustomWelcomeEmail>,\n    body: Partial<ICustomWelcomeEmail>,\n    send_test_welcome_email?: boolean,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ICustomWelcomeEmail>(\n      callback,\n      'PATCH',\n      '/custom_welcome_email',\n      { send_test_welcome_email },\n      body,\n      options\n    )\n  }\n\n  /**\n   * Requests to this endpoint will send a welcome email with the custom content provided in the body to the currently logged in user.\n   *\n   * PUT /custom_welcome_email_test -> IWelcomeEmailTest\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWelcomeEmailTest>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_custom_welcome_email_test(\n    callback: (readable: Readable) => Promise<IWelcomeEmailTest>,\n    body: Partial<IWelcomeEmailTest>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IWelcomeEmailTest>(\n      callback,\n      'PUT',\n      '/custom_welcome_email_test',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Retrieve the value for whether or not digest emails is enabled\n   *\n   * GET /digest_emails_enabled -> IDigestEmails\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async digest_emails_enabled(\n    callback: (readable: Readable) => Promise<IDigestEmails>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDigestEmails>(\n      callback,\n      'GET',\n      '/digest_emails_enabled',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the setting for enabling/disabling digest emails\n   *\n   * PATCH /digest_emails_enabled -> IDigestEmails\n   *\n   * @param callback streaming output function\n   * @param body Partial<IDigestEmails>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_digest_emails_enabled(\n    callback: (readable: Readable) => Promise<IDigestEmails>,\n    body: Partial<IDigestEmails>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDigestEmails>(\n      callback,\n      'PATCH',\n      '/digest_emails_enabled',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Trigger the generation of digest email records and send them to Looker's internal system. This does not send\n   * any actual emails, it generates records containing content which may be of interest for users who have become inactive.\n   * Emails will be sent at a later time from Looker's internal system if the Digest Emails feature is enabled in settings.\n   *\n   * POST /digest_email_send -> IDigestEmailSend\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async create_digest_email_send(\n    callback: (readable: Readable) => Promise<IDigestEmailSend>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDigestEmailSend>(\n      callback,\n      'POST',\n      '/digest_email_send',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Egress IP Addresses\n   *\n   * Returns the list of public egress IP Addresses for a hosted customer's instance\n   *\n   * GET /public_egress_ip_addresses -> IEgressIpAddresses\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async public_egress_ip_addresses(\n    callback: (readable: Readable) => Promise<IEgressIpAddresses>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IEgressIpAddresses>(\n      callback,\n      'GET',\n      '/public_egress_ip_addresses',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Set the menu item name and content for internal help resources\n   *\n   * GET /internal_help_resources_content -> IInternalHelpResourcesContent\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async internal_help_resources_content(\n    callback: (readable: Readable) => Promise<IInternalHelpResourcesContent>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IInternalHelpResourcesContent>(\n      callback,\n      'GET',\n      '/internal_help_resources_content',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * Update internal help resources content\n   *\n   * PATCH /internal_help_resources_content -> IInternalHelpResourcesContent\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteInternalHelpResourcesContent>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_internal_help_resources_content(\n    callback: (readable: Readable) => Promise<IInternalHelpResourcesContent>,\n    body: Partial<IWriteInternalHelpResourcesContent>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IInternalHelpResourcesContent>(\n      callback,\n      'PATCH',\n      '/internal_help_resources_content',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get and set the options for internal help resources\n   *\n   * GET /internal_help_resources_enabled -> IInternalHelpResources\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async internal_help_resources(\n    callback: (readable: Readable) => Promise<IInternalHelpResources>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IInternalHelpResources>(\n      callback,\n      'GET',\n      '/internal_help_resources_enabled',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * Update internal help resources settings\n   *\n   * PATCH /internal_help_resources -> IInternalHelpResources\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteInternalHelpResources>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_internal_help_resources(\n    callback: (readable: Readable) => Promise<IInternalHelpResources>,\n    body: Partial<IWriteInternalHelpResources>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IInternalHelpResources>(\n      callback,\n      'PATCH',\n      '/internal_help_resources',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get all legacy features.\n   *\n   * GET /legacy_features -> ILegacyFeature[]\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async all_legacy_features(\n    callback: (readable: Readable) => Promise<ILegacyFeature[]>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILegacyFeature[]>(\n      callback,\n      'GET',\n      '/legacy_features',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the legacy feature with a specific id.\n   *\n   * GET /legacy_features/{legacy_feature_id} -> ILegacyFeature\n   *\n   * @param callback streaming output function\n   * @param legacy_feature_id id of legacy feature\n   * @param options one-time API call overrides\n   *\n   */\n  async legacy_feature(\n    callback: (readable: Readable) => Promise<ILegacyFeature>,\n    legacy_feature_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    legacy_feature_id = encodeParam(legacy_feature_id)\n    return this.authStream<ILegacyFeature>(\n      callback,\n      'GET',\n      `/legacy_features/${legacy_feature_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update information about the legacy feature with a specific id.\n   *\n   * PATCH /legacy_features/{legacy_feature_id} -> ILegacyFeature\n   *\n   * @param callback streaming output function\n   * @param legacy_feature_id id of legacy feature\n   * @param body Partial<IWriteLegacyFeature>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_legacy_feature(\n    callback: (readable: Readable) => Promise<ILegacyFeature>,\n    legacy_feature_id: string,\n    body: Partial<IWriteLegacyFeature>,\n    options?: Partial<ITransportSettings>\n  ) {\n    legacy_feature_id = encodeParam(legacy_feature_id)\n    return this.authStream<ILegacyFeature>(\n      callback,\n      'PATCH',\n      `/legacy_features/${legacy_feature_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get a list of locales that Looker supports.\n   *\n   * GET /locales -> ILocale[]\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async all_locales(\n    callback: (readable: Readable) => Promise<ILocale[]>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILocale[]>(\n      callback,\n      'GET',\n      '/locales',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get all mobile settings.\n   *\n   * GET /mobile/settings -> IMobileSettings\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async mobile_settings(\n    callback: (readable: Readable) => Promise<IMobileSettings>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IMobileSettings>(\n      callback,\n      'GET',\n      '/mobile/settings',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Looker Settings\n   *\n   * Available settings are:\n   *  - allow_user_timezones\n   *  - custom_welcome_email\n   *  - data_connector_default_enabled\n   *  - extension_framework_enabled\n   *  - extension_load_url_enabled\n   *  - marketplace_auto_install_enabled\n   *  - marketplace_enabled\n   *  - onboarding_enabled\n   *  - privatelabel_configuration\n   *  - timezone\n   *\n   * GET /setting -> ISetting\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async get_setting(\n    callback: (readable: Readable) => Promise<ISetting>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISetting>(\n      callback,\n      'GET',\n      '/setting',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Configure Looker Settings\n   *\n   * Available settings are:\n   *  - allow_user_timezones\n   *  - custom_welcome_email\n   *  - data_connector_default_enabled\n   *  - extension_framework_enabled\n   *  - extension_load_url_enabled\n   *  - marketplace_auto_install_enabled\n   *  - marketplace_enabled\n   *  - onboarding_enabled\n   *  - privatelabel_configuration\n   *  - timezone\n   *\n   * See the `Setting` type for more information on the specific values that can be configured.\n   *\n   * PATCH /setting -> ISetting\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteSetting>\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async set_setting(\n    callback: (readable: Readable) => Promise<ISetting>,\n    body: Partial<IWriteSetting>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISetting>(\n      callback,\n      'PATCH',\n      '/setting',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Configure SMTP Settings\n   *   This API allows users to configure the SMTP settings on the Looker instance.\n   *   This API is only supported in the OEM jar. Additionally, only admin users are authorised to call this API.\n   *\n   * POST /smtp_settings -> void\n   *\n   * @param callback streaming output function\n   * @param body Partial<ISmtpSettings>\n   * @param options one-time API call overrides\n   *\n   */\n  async set_smtp_settings(\n    callback: (readable: Readable) => Promise<void>,\n    body: Partial<ISmtpSettings>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<void>(\n      callback,\n      'POST',\n      '/smtp_settings',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get current SMTP status.\n   *\n   * GET /smtp_status -> ISmtpStatus\n   *\n   * @param callback streaming output function\n   * @param fields Include only these fields in the response\n   * @param options one-time API call overrides\n   *\n   */\n  async smtp_status(\n    callback: (readable: Readable) => Promise<ISmtpStatus>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISmtpStatus>(\n      callback,\n      'GET',\n      '/smtp_status',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get a list of timezones that Looker supports (e.g. useful for scheduling tasks).\n   *\n   * GET /timezones -> ITimezone[]\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async all_timezones(\n    callback: (readable: Readable) => Promise<ITimezone[]>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ITimezone[]>(\n      callback,\n      'GET',\n      '/timezones',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all API versions supported by this Looker instance.\n   *\n   * GET /versions -> IApiVersion\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async versions(\n    callback: (readable: Readable) => Promise<IApiVersion>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IApiVersion>(\n      callback,\n      'GET',\n      '/versions',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get an API specification for this Looker instance.\n   *\n   * The specification is returned as a JSON document in Swagger 2.x format\n   *\n   * GET /api_spec/{api_version}/{specification} -> any\n   *\n   * @param callback streaming output function\n   * @param api_version API version\n   * @param specification Specification name. Typically, this is \"swagger.json\"\n   * @param options one-time API call overrides\n   *\n   */\n  async api_spec(\n    callback: (readable: Readable) => Promise<any>,\n    api_version: string,\n    specification: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    api_version = encodeParam(api_version)\n    specification = encodeParam(specification)\n    return this.authStream<any>(\n      callback,\n      'GET',\n      `/api_spec/${api_version}/${specification}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### This feature is enabled only by special license.\n   * ### Gets the whitelabel configuration, which includes hiding documentation links, custom favicon uploading, etc.\n   *\n   * GET /whitelabel_configuration -> IWhitelabelConfiguration\n   *\n   * @deprecated\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async whitelabel_configuration(\n    callback: (readable: Readable) => Promise<IWhitelabelConfiguration>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IWhitelabelConfiguration>(\n      callback,\n      'GET',\n      '/whitelabel_configuration',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the whitelabel configuration\n   *\n   * PUT /whitelabel_configuration -> IWhitelabelConfiguration\n   *\n   * @deprecated\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteWhitelabelConfiguration>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_whitelabel_configuration(\n    callback: (readable: Readable) => Promise<IWhitelabelConfiguration>,\n    body: Partial<IWriteWhitelabelConfiguration>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IWhitelabelConfiguration>(\n      callback,\n      'PUT',\n      '/whitelabel_configuration',\n      null,\n      body,\n      options\n    )\n  }\n\n  //#endregion Config: Manage General Configuration\n\n  //#region Connection: Manage Database Connections\n\n  /**\n   * ### Get information about all connections.\n   *\n   * GET /connections -> IDBConnection[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_connections(\n    callback: (readable: Readable) => Promise<IDBConnection[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDBConnection[]>(\n      callback,\n      'GET',\n      '/connections',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a connection using the specified configuration.\n   *\n   * POST /connections -> IDBConnection\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteDBConnection>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_connection(\n    callback: (readable: Readable) => Promise<IDBConnection>,\n    body: Partial<IWriteDBConnection>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDBConnection>(\n      callback,\n      'POST',\n      '/connections',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a connection.\n   *\n   * GET /connections/{connection_name} -> IDBConnection\n   *\n   * @param callback streaming output function\n   * @param connection_name Name of connection\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async connection(\n    callback: (readable: Readable) => Promise<IDBConnection>,\n    connection_name: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    connection_name = encodeParam(connection_name)\n    return this.authStream<IDBConnection>(\n      callback,\n      'GET',\n      `/connections/${connection_name}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a connection using the specified configuration.\n   *\n   * PATCH /connections/{connection_name} -> IDBConnection\n   *\n   * @param callback streaming output function\n   * @param connection_name Name of connection\n   * @param body Partial<IWriteDBConnection>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_connection(\n    callback: (readable: Readable) => Promise<IDBConnection>,\n    connection_name: string,\n    body: Partial<IWriteDBConnection>,\n    options?: Partial<ITransportSettings>\n  ) {\n    connection_name = encodeParam(connection_name)\n    return this.authStream<IDBConnection>(\n      callback,\n      'PATCH',\n      `/connections/${connection_name}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a connection.\n   *\n   * DELETE /connections/{connection_name} -> string\n   *\n   * @param callback streaming output function\n   * @param connection_name Name of connection\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_connection(\n    callback: (readable: Readable) => Promise<string>,\n    connection_name: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    connection_name = encodeParam(connection_name)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/connections/${connection_name}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a connection override.\n   *\n   * DELETE /connections/{connection_name}/connection_override/{override_context} -> string\n   *\n   * @param callback streaming output function\n   * @param connection_name Name of connection\n   * @param override_context Context of connection override\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_connection_override(\n    callback: (readable: Readable) => Promise<string>,\n    connection_name: string,\n    override_context: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    connection_name = encodeParam(connection_name)\n    override_context = encodeParam(override_context)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/connections/${connection_name}/connection_override/${override_context}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Test an existing connection.\n   *\n   * Note that a connection's 'dialect' property has a 'connection_tests' property that lists the\n   * specific types of tests that the connection supports.\n   *\n   * This API is rate limited.\n   *\n   * Unsupported tests in the request will be ignored.\n   *\n   * PUT /connections/{connection_name}/test -> IDBConnectionTestResult[]\n   *\n   * @param callback streaming output function\n   * @param connection_name Name of connection\n   * @param tests Array of names of tests to run\n   * @param options one-time API call overrides\n   *\n   */\n  async test_connection(\n    callback: (readable: Readable) => Promise<IDBConnectionTestResult[]>,\n    connection_name: string,\n    tests?: DelimArray<string>,\n    options?: Partial<ITransportSettings>\n  ) {\n    connection_name = encodeParam(connection_name)\n    return this.authStream<IDBConnectionTestResult[]>(\n      callback,\n      'PUT',\n      `/connections/${connection_name}/test`,\n      { tests },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Test a connection configuration.\n   *\n   * Note that a connection's 'dialect' property has a 'connection_tests' property that lists the\n   * specific types of tests that the connection supports.\n   *\n   * This API is rate limited.\n   *\n   * Unsupported tests in the request will be ignored.\n   *\n   * PUT /connections/test -> IDBConnectionTestResult[]\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteDBConnection>\n   * @param tests Array of names of tests to run\n   * @param options one-time API call overrides\n   *\n   */\n  async test_connection_config(\n    callback: (readable: Readable) => Promise<IDBConnectionTestResult[]>,\n    body: Partial<IWriteDBConnection>,\n    tests?: DelimArray<string>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDBConnectionTestResult[]>(\n      callback,\n      'PUT',\n      '/connections/test',\n      { tests },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all dialects.\n   *\n   * GET /dialect_info -> IDialectInfo[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_dialect_infos(\n    callback: (readable: Readable) => Promise<IDialectInfo[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDialectInfo[]>(\n      callback,\n      'GET',\n      '/dialect_info',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get all External OAuth Applications.\n   *\n   * This is an OAuth Application which Looker uses to access external systems.\n   *\n   * GET /external_oauth_applications -> IExternalOauthApplication[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllExternalOauthApplications\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_external_oauth_applications(\n    callback: (readable: Readable) => Promise<IExternalOauthApplication[]>,\n    request: IRequestAllExternalOauthApplications,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IExternalOauthApplication[]>(\n      callback,\n      'GET',\n      '/external_oauth_applications',\n      { name: request.name, client_id: request.client_id },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create an OAuth Application using the specified configuration.\n   *\n   * This is an OAuth Application which Looker uses to access external systems.\n   *\n   * POST /external_oauth_applications -> IExternalOauthApplication\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteExternalOauthApplication>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_external_oauth_application(\n    callback: (readable: Readable) => Promise<IExternalOauthApplication>,\n    body: Partial<IWriteExternalOauthApplication>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IExternalOauthApplication>(\n      callback,\n      'POST',\n      '/external_oauth_applications',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Create OAuth User state.\n   *\n   * POST /external_oauth_applications/user_state -> ICreateOAuthApplicationUserStateResponse\n   *\n   * @param callback streaming output function\n   * @param body Partial<ICreateOAuthApplicationUserStateRequest>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_oauth_application_user_state(\n    callback: (\n      readable: Readable\n    ) => Promise<ICreateOAuthApplicationUserStateResponse>,\n    body: Partial<ICreateOAuthApplicationUserStateRequest>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ICreateOAuthApplicationUserStateResponse>(\n      callback,\n      'POST',\n      '/external_oauth_applications/user_state',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all SSH Servers.\n   *\n   * GET /ssh_servers -> ISshServer[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_ssh_servers(\n    callback: (readable: Readable) => Promise<ISshServer[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISshServer[]>(\n      callback,\n      'GET',\n      '/ssh_servers',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create an SSH Server.\n   *\n   * POST /ssh_servers -> ISshServer\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteSshServer>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_ssh_server(\n    callback: (readable: Readable) => Promise<ISshServer>,\n    body: Partial<IWriteSshServer>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISshServer>(\n      callback,\n      'POST',\n      '/ssh_servers',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about an SSH Server.\n   *\n   * GET /ssh_server/{ssh_server_id} -> ISshServer\n   *\n   * @param callback streaming output function\n   * @param ssh_server_id Id of SSH Server\n   * @param options one-time API call overrides\n   *\n   */\n  async ssh_server(\n    callback: (readable: Readable) => Promise<ISshServer>,\n    ssh_server_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    ssh_server_id = encodeParam(ssh_server_id)\n    return this.authStream<ISshServer>(\n      callback,\n      'GET',\n      `/ssh_server/${ssh_server_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update an SSH Server.\n   *\n   * PATCH /ssh_server/{ssh_server_id} -> ISshServer\n   *\n   * @param callback streaming output function\n   * @param ssh_server_id Id of SSH Server\n   * @param body Partial<IWriteSshServer>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_ssh_server(\n    callback: (readable: Readable) => Promise<ISshServer>,\n    ssh_server_id: string,\n    body: Partial<IWriteSshServer>,\n    options?: Partial<ITransportSettings>\n  ) {\n    ssh_server_id = encodeParam(ssh_server_id)\n    return this.authStream<ISshServer>(\n      callback,\n      'PATCH',\n      `/ssh_server/${ssh_server_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete an SSH Server.\n   *\n   * DELETE /ssh_server/{ssh_server_id} -> string\n   *\n   * @param callback streaming output function\n   * @param ssh_server_id Id of SSH Server\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_ssh_server(\n    callback: (readable: Readable) => Promise<string>,\n    ssh_server_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    ssh_server_id = encodeParam(ssh_server_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/ssh_server/${ssh_server_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Test the SSH Server\n   *\n   * GET /ssh_server/{ssh_server_id}/test -> ISshServer\n   *\n   * @param callback streaming output function\n   * @param ssh_server_id Id of SSH Server\n   * @param options one-time API call overrides\n   *\n   */\n  async test_ssh_server(\n    callback: (readable: Readable) => Promise<ISshServer>,\n    ssh_server_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    ssh_server_id = encodeParam(ssh_server_id)\n    return this.authStream<ISshServer>(\n      callback,\n      'GET',\n      `/ssh_server/${ssh_server_id}/test`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all SSH Tunnels.\n   *\n   * GET /ssh_tunnels -> ISshTunnel[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_ssh_tunnels(\n    callback: (readable: Readable) => Promise<ISshTunnel[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISshTunnel[]>(\n      callback,\n      'GET',\n      '/ssh_tunnels',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create an SSH Tunnel\n   *\n   * POST /ssh_tunnels -> ISshTunnel\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteSshTunnel>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_ssh_tunnel(\n    callback: (readable: Readable) => Promise<ISshTunnel>,\n    body: Partial<IWriteSshTunnel>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISshTunnel>(\n      callback,\n      'POST',\n      '/ssh_tunnels',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about an SSH Tunnel.\n   *\n   * GET /ssh_tunnel/{ssh_tunnel_id} -> ISshTunnel\n   *\n   * @param callback streaming output function\n   * @param ssh_tunnel_id Id of SSH Tunnel\n   * @param options one-time API call overrides\n   *\n   */\n  async ssh_tunnel(\n    callback: (readable: Readable) => Promise<ISshTunnel>,\n    ssh_tunnel_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    ssh_tunnel_id = encodeParam(ssh_tunnel_id)\n    return this.authStream<ISshTunnel>(\n      callback,\n      'GET',\n      `/ssh_tunnel/${ssh_tunnel_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update an SSH Tunnel\n   *\n   * PATCH /ssh_tunnel/{ssh_tunnel_id} -> ISshTunnel\n   *\n   * @param callback streaming output function\n   * @param ssh_tunnel_id Id of SSH Tunnel\n   * @param body Partial<IWriteSshTunnel>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_ssh_tunnel(\n    callback: (readable: Readable) => Promise<ISshTunnel>,\n    ssh_tunnel_id: string,\n    body: Partial<IWriteSshTunnel>,\n    options?: Partial<ITransportSettings>\n  ) {\n    ssh_tunnel_id = encodeParam(ssh_tunnel_id)\n    return this.authStream<ISshTunnel>(\n      callback,\n      'PATCH',\n      `/ssh_tunnel/${ssh_tunnel_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete an SSH Tunnel\n   *\n   * DELETE /ssh_tunnel/{ssh_tunnel_id} -> string\n   *\n   * @param callback streaming output function\n   * @param ssh_tunnel_id Id of SSH Tunnel\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_ssh_tunnel(\n    callback: (readable: Readable) => Promise<string>,\n    ssh_tunnel_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    ssh_tunnel_id = encodeParam(ssh_tunnel_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/ssh_tunnel/${ssh_tunnel_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Test the SSH Tunnel\n   *\n   * GET /ssh_tunnel/{ssh_tunnel_id}/test -> ISshTunnel\n   *\n   * @param callback streaming output function\n   * @param ssh_tunnel_id Id of SSH Tunnel\n   * @param options one-time API call overrides\n   *\n   */\n  async test_ssh_tunnel(\n    callback: (readable: Readable) => Promise<ISshTunnel>,\n    ssh_tunnel_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    ssh_tunnel_id = encodeParam(ssh_tunnel_id)\n    return this.authStream<ISshTunnel>(\n      callback,\n      'GET',\n      `/ssh_tunnel/${ssh_tunnel_id}/test`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the SSH public key\n   *\n   * Get the public key created for this instance to identify itself to a remote SSH server.\n   *\n   * GET /ssh_public_key -> ISshPublicKey\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async ssh_public_key(\n    callback: (readable: Readable) => Promise<ISshPublicKey>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISshPublicKey>(\n      callback,\n      'GET',\n      '/ssh_public_key',\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion Connection: Manage Database Connections\n\n  //#region Content: Manage Content\n\n  /**\n   * ### Search Favorite Content\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /content_favorite/search -> IContentFavorite[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchContentFavorites\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_content_favorites(\n    callback: (readable: Readable) => Promise<IContentFavorite[]>,\n    request: IRequestSearchContentFavorites,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IContentFavorite[]>(\n      callback,\n      'GET',\n      '/content_favorite/search',\n      {\n        id: request.id,\n        user_id: request.user_id,\n        content_metadata_id: request.content_metadata_id,\n        dashboard_id: request.dashboard_id,\n        look_id: request.look_id,\n        board_id: request.board_id,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        fields: request.fields,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get favorite content by its id\n   *\n   * GET /content_favorite/{content_favorite_id} -> IContentFavorite\n   *\n   * @param callback streaming output function\n   * @param content_favorite_id Id of favorite content\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async content_favorite(\n    callback: (readable: Readable) => Promise<IContentFavorite>,\n    content_favorite_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    content_favorite_id = encodeParam(content_favorite_id)\n    return this.authStream<IContentFavorite>(\n      callback,\n      'GET',\n      `/content_favorite/${content_favorite_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Delete favorite content\n   *\n   * DELETE /content_favorite/{content_favorite_id} -> string\n   *\n   * @param callback streaming output function\n   * @param content_favorite_id Id of favorite content\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_content_favorite(\n    callback: (readable: Readable) => Promise<string>,\n    content_favorite_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    content_favorite_id = encodeParam(content_favorite_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/content_favorite/${content_favorite_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create favorite content\n   *\n   * POST /content_favorite -> IContentFavorite\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteContentFavorite>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_content_favorite(\n    callback: (readable: Readable) => Promise<IContentFavorite>,\n    body: Partial<IWriteContentFavorite>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IContentFavorite>(\n      callback,\n      'POST',\n      '/content_favorite',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all content metadata in a space.\n   *\n   * GET /content_metadata -> IContentMeta[]\n   *\n   * @param callback streaming output function\n   * @param parent_id Parent space of content.\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_content_metadatas(\n    callback: (readable: Readable) => Promise<IContentMeta[]>,\n    parent_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IContentMeta[]>(\n      callback,\n      'GET',\n      '/content_metadata',\n      { parent_id, fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about an individual content metadata record.\n   *\n   * GET /content_metadata/{content_metadata_id} -> IContentMeta\n   *\n   * @param callback streaming output function\n   * @param content_metadata_id Id of content metadata\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async content_metadata(\n    callback: (readable: Readable) => Promise<IContentMeta>,\n    content_metadata_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    content_metadata_id = encodeParam(content_metadata_id)\n    return this.authStream<IContentMeta>(\n      callback,\n      'GET',\n      `/content_metadata/${content_metadata_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Move a piece of content.\n   *\n   * PATCH /content_metadata/{content_metadata_id} -> IContentMeta\n   *\n   * @param callback streaming output function\n   * @param content_metadata_id Id of content metadata\n   * @param body Partial<IWriteContentMeta>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_content_metadata(\n    callback: (readable: Readable) => Promise<IContentMeta>,\n    content_metadata_id: string,\n    body: Partial<IWriteContentMeta>,\n    options?: Partial<ITransportSettings>\n  ) {\n    content_metadata_id = encodeParam(content_metadata_id)\n    return this.authStream<IContentMeta>(\n      callback,\n      'PATCH',\n      `/content_metadata/${content_metadata_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### All content metadata access records for a content metadata item.\n   *\n   * GET /content_metadata_access -> IContentMetaGroupUser[]\n   *\n   * @param callback streaming output function\n   * @param content_metadata_id Id of content metadata\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_content_metadata_accesses(\n    callback: (readable: Readable) => Promise<IContentMetaGroupUser[]>,\n    content_metadata_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IContentMetaGroupUser[]>(\n      callback,\n      'GET',\n      '/content_metadata_access',\n      { content_metadata_id, fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create content metadata access.\n   *\n   * POST /content_metadata_access -> IContentMetaGroupUser\n   *\n   * @param callback streaming output function\n   * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n   * @param send_boards_notification_email Optionally sends notification email when granting access to a board.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_content_metadata_access(\n    callback: (readable: Readable) => Promise<IContentMetaGroupUser>,\n    body: Partial<IContentMetaGroupUser>,\n    send_boards_notification_email?: boolean,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IContentMetaGroupUser>(\n      callback,\n      'POST',\n      '/content_metadata_access',\n      { send_boards_notification_email },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Update type of access for content metadata.\n   *\n   * PUT /content_metadata_access/{content_metadata_access_id} -> IContentMetaGroupUser\n   *\n   * @param callback streaming output function\n   * @param content_metadata_access_id Id of content metadata access\n   * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n   * @param options one-time API call overrides\n   *\n   */\n  async update_content_metadata_access(\n    callback: (readable: Readable) => Promise<IContentMetaGroupUser>,\n    content_metadata_access_id: string,\n    body: Partial<IContentMetaGroupUser>,\n    options?: Partial<ITransportSettings>\n  ) {\n    content_metadata_access_id = encodeParam(content_metadata_access_id)\n    return this.authStream<IContentMetaGroupUser>(\n      callback,\n      'PUT',\n      `/content_metadata_access/${content_metadata_access_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Remove content metadata access.\n   *\n   * DELETE /content_metadata_access/{content_metadata_access_id} -> string\n   *\n   * @param callback streaming output function\n   * @param content_metadata_access_id Id of content metadata access\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_content_metadata_access(\n    callback: (readable: Readable) => Promise<string>,\n    content_metadata_access_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    content_metadata_access_id = encodeParam(content_metadata_access_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/content_metadata_access/${content_metadata_access_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get an image representing the contents of a dashboard or look.\n   *\n   * The returned thumbnail is an abstract representation of the contents of a dashbord or look and does not\n   * reflect the actual data displayed in the respective visualizations.\n   *\n   * GET /content_thumbnail/{type}/{resource_id} -> string\n   *\n   * @remarks\n   * **NOTE**: Binary content may be returned by this function.\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestContentThumbnail\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async content_thumbnail(\n    callback: (readable: Readable) => Promise<string>,\n    request: IRequestContentThumbnail,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.type = encodeParam(request.type)\n    request.resource_id = encodeParam(request.resource_id)\n    return this.authStream<string>(\n      callback,\n      'GET',\n      `/content_thumbnail/${request.type}/${request.resource_id}`,\n      {\n        reload: request.reload,\n        format: request.format,\n        width: request.width,\n        height: request.height,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Validate All Content\n   *\n   * Performs validation of all looks and dashboards\n   * Returns a list of errors found as well as metadata about the content validation run.\n   *\n   * GET /content_validation -> IContentValidation\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async content_validation(\n    callback: (readable: Readable) => Promise<IContentValidation>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IContentValidation>(\n      callback,\n      'GET',\n      '/content_validation',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search Content Views\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /content_view/search -> IContentView[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchContentViews\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_content_views(\n    callback: (readable: Readable) => Promise<IContentView[]>,\n    request: IRequestSearchContentViews,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IContentView[]>(\n      callback,\n      'GET',\n      '/content_view/search',\n      {\n        view_count: request.view_count,\n        group_id: request.group_id,\n        look_id: request.look_id,\n        dashboard_id: request.dashboard_id,\n        content_metadata_id: request.content_metadata_id,\n        start_of_week_date: request.start_of_week_date,\n        all_time: request.all_time,\n        user_id: request.user_id,\n        fields: request.fields,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get a vector image representing the contents of a dashboard or look.\n   *\n   * # DEPRECATED:  Use [content_thumbnail()](#!/Content/content_thumbnail)\n   *\n   * The returned thumbnail is an abstract representation of the contents of a dashbord or look and does not\n   * reflect the actual data displayed in the respective visualizations.\n   *\n   * GET /vector_thumbnail/{type}/{resource_id} -> string\n   *\n   * @deprecated\n   *\n   * @param callback streaming output function\n   * @param type Either dashboard or look\n   * @param resource_id ID of the dashboard or look to render\n   * @param reload Whether or not to refresh the rendered image with the latest content\n   * @param options one-time API call overrides\n   *\n   */\n  async vector_thumbnail(\n    callback: (readable: Readable) => Promise<string>,\n    type: string,\n    resource_id: string,\n    reload?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    type = encodeParam(type)\n    resource_id = encodeParam(resource_id)\n    return this.authStream<string>(\n      callback,\n      'GET',\n      `/vector_thumbnail/${type}/${resource_id}`,\n      { reload },\n      null,\n      options\n    )\n  }\n\n  //#endregion Content: Manage Content\n\n  //#region Dashboard: Manage Dashboards\n\n  /**\n   * ### Get information about all active dashboards.\n   *\n   * Returns an array of **abbreviated dashboard objects**. Dashboards marked as deleted are excluded from this list.\n   *\n   * Get the **full details** of a specific dashboard by id with [dashboard()](#!/Dashboard/dashboard)\n   *\n   * Find **deleted dashboards** with [search_dashboards()](#!/Dashboard/search_dashboards)\n   *\n   * GET /dashboards -> IDashboardBase[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_dashboards(\n    callback: (readable: Readable) => Promise<IDashboardBase[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDashboardBase[]>(\n      callback,\n      'GET',\n      '/dashboards',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a new dashboard\n   *\n   * Creates a new dashboard object and returns the details of the newly created dashboard.\n   *\n   * `Title` and `space_id` are required fields.\n   * `Space_id` must contain the id of an existing space.\n   * A dashboard's `title` must be unique within the space in which it resides.\n   *\n   * If you receive a 422 error response when creating a dashboard, be sure to look at the\n   * response body for information about exactly which fields are missing or contain invalid data.\n   *\n   * You can **update** an existing dashboard with [update_dashboard()](#!/Dashboard/update_dashboard)\n   *\n   * You can **permanently delete** an existing dashboard with [delete_dashboard()](#!/Dashboard/delete_dashboard)\n   *\n   * POST /dashboards -> IDashboard\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteDashboard>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_dashboard(\n    callback: (readable: Readable) => Promise<IDashboard>,\n    body: Partial<IWriteDashboard>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDashboard>(\n      callback,\n      'POST',\n      '/dashboards',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Search Dashboards\n   *\n   * Returns an **array of dashboard objects** that match the specified search criteria.\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   *\n   * The parameters `limit`, and `offset` are recommended for fetching results in page-size chunks.\n   *\n   * Get a **single dashboard** by id with [dashboard()](#!/Dashboard/dashboard)\n   *\n   * GET /dashboards/search -> IDashboard[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchDashboards\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_dashboards(\n    callback: (readable: Readable) => Promise<IDashboard[]>,\n    request: IRequestSearchDashboards,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDashboard[]>(\n      callback,\n      'GET',\n      '/dashboards/search',\n      {\n        id: request.id,\n        slug: request.slug,\n        title: request.title,\n        description: request.description,\n        content_favorite_id: request.content_favorite_id,\n        folder_id: request.folder_id,\n        deleted: request.deleted,\n        user_id: request.user_id,\n        view_count: request.view_count,\n        content_metadata_id: request.content_metadata_id,\n        curate: request.curate,\n        last_viewed_at: request.last_viewed_at,\n        fields: request.fields,\n        page: request.page,\n        per_page: request.per_page,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Import a LookML dashboard to a space as a UDD\n   * Creates a UDD (a dashboard which exists in the Looker database rather than as a LookML file) from the LookML dashboard\n   * and places it in the space specified. The created UDD will have a lookml_link_id which links to the original LookML dashboard.\n   *\n   * To give the imported dashboard specify a (e.g. title: \"my title\") in the body of your request, otherwise the imported\n   * dashboard will have the same title as the original LookML dashboard.\n   *\n   * For this operation to succeed the user must have permission to see the LookML dashboard in question, and have permission to\n   * create content in the space the dashboard is being imported to.\n   *\n   * **Sync** a linked UDD with [sync_lookml_dashboard()](#!/Dashboard/sync_lookml_dashboard)\n   * **Unlink** a linked UDD by setting lookml_link_id to null with [update_dashboard()](#!/Dashboard/update_dashboard)\n   *\n   * POST /dashboards/{lookml_dashboard_id}/import/{space_id} -> IDashboard\n   *\n   * @param callback streaming output function\n   * @param lookml_dashboard_id Id of LookML dashboard\n   * @param space_id Id of space to import the dashboard to\n   * @param body Partial<IWriteDashboard>\n   * @param raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.\n   * @param options one-time API call overrides\n   *\n   */\n  async import_lookml_dashboard(\n    callback: (readable: Readable) => Promise<IDashboard>,\n    lookml_dashboard_id: string,\n    space_id: string,\n    body?: Partial<IWriteDashboard>,\n    raw_locale?: boolean,\n    options?: Partial<ITransportSettings>\n  ) {\n    lookml_dashboard_id = encodeParam(lookml_dashboard_id)\n    space_id = encodeParam(space_id)\n    return this.authStream<IDashboard>(\n      callback,\n      'POST',\n      `/dashboards/${lookml_dashboard_id}/import/${space_id}`,\n      { raw_locale },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Update all linked dashboards to match the specified LookML dashboard.\n   *\n   * Any UDD (a dashboard which exists in the Looker database rather than as a LookML file) which has a `lookml_link_id`\n   * property value referring to a LookML dashboard's id (model::dashboardname) will be updated so that it matches the current state of the LookML dashboard.\n   *\n   * For this operation to succeed the user must have permission to view the LookML dashboard, and only linked dashboards\n   * that the user has permission to update will be synced.\n   *\n   * To **link** or **unlink** a UDD set the `lookml_link_id` property with [update_dashboard()](#!/Dashboard/update_dashboard)\n   *\n   * PATCH /dashboards/{lookml_dashboard_id}/sync -> number[]\n   *\n   * @param callback streaming output function\n   * @param lookml_dashboard_id Id of LookML dashboard, in the form 'model::dashboardname'\n   * @param body Partial<IWriteDashboard>\n   * @param raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.\n   * @param options one-time API call overrides\n   *\n   */\n  async sync_lookml_dashboard(\n    callback: (readable: Readable) => Promise<number[]>,\n    lookml_dashboard_id: string,\n    body: Partial<IWriteDashboard>,\n    raw_locale?: boolean,\n    options?: Partial<ITransportSettings>\n  ) {\n    lookml_dashboard_id = encodeParam(lookml_dashboard_id)\n    return this.authStream<number[]>(\n      callback,\n      'PATCH',\n      `/dashboards/${lookml_dashboard_id}/sync`,\n      { raw_locale },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a dashboard\n   *\n   * Returns the full details of the identified dashboard object\n   *\n   * Get a **summary list** of all active dashboards with [all_dashboards()](#!/Dashboard/all_dashboards)\n   *\n   * You can **Search** for dashboards with [search_dashboards()](#!/Dashboard/search_dashboards)\n   *\n   * GET /dashboards/{dashboard_id} -> IDashboard\n   *\n   * @param callback streaming output function\n   * @param dashboard_id Id of dashboard\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard(\n    callback: (readable: Readable) => Promise<IDashboard>,\n    dashboard_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_id = encodeParam(dashboard_id)\n    return this.authStream<IDashboard>(\n      callback,\n      'GET',\n      `/dashboards/${dashboard_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a dashboard\n   *\n   * You can use this function to change the string and integer properties of\n   * a dashboard. Nested objects such as filters, dashboard elements, or dashboard layout components\n   * cannot be modified by this function - use the update functions for the respective\n   * nested object types (like [update_dashboard_filter()](#!/3.1/Dashboard/update_dashboard_filter) to change a filter)\n   * to modify nested objects referenced by a dashboard.\n   *\n   * If you receive a 422 error response when updating a dashboard, be sure to look at the\n   * response body for information about exactly which fields are missing or contain invalid data.\n   *\n   * PATCH /dashboards/{dashboard_id} -> IDashboard\n   *\n   * @param callback streaming output function\n   * @param dashboard_id Id of dashboard\n   * @param body Partial<IWriteDashboard>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_dashboard(\n    callback: (readable: Readable) => Promise<IDashboard>,\n    dashboard_id: string,\n    body: Partial<IWriteDashboard>,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_id = encodeParam(dashboard_id)\n    return this.authStream<IDashboard>(\n      callback,\n      'PATCH',\n      `/dashboards/${dashboard_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete the dashboard with the specified id\n   *\n   * Permanently **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)\n   *\n   * \"Soft\" delete or hide a dashboard by setting its `deleted` status to `True` with [update_dashboard()](#!/Dashboard/update_dashboard).\n   *\n   * Note: When a dashboard is deleted in the UI, it is soft deleted. Use this API call to permanently remove it, if desired.\n   *\n   * DELETE /dashboards/{dashboard_id} -> string\n   *\n   * @param callback streaming output function\n   * @param dashboard_id Id of dashboard\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_dashboard(\n    callback: (readable: Readable) => Promise<string>,\n    dashboard_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_id = encodeParam(dashboard_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/dashboards/${dashboard_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Aggregate Table LookML for Each Query on a Dahboard\n   *\n   * Returns a JSON object that contains the dashboard id and Aggregate Table lookml\n   *\n   * GET /dashboards/aggregate_table_lookml/{dashboard_id} -> IDashboardAggregateTableLookml\n   *\n   * @param callback streaming output function\n   * @param dashboard_id Id of dashboard\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard_aggregate_table_lookml(\n    callback: (readable: Readable) => Promise<IDashboardAggregateTableLookml>,\n    dashboard_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_id = encodeParam(dashboard_id)\n    return this.authStream<IDashboardAggregateTableLookml>(\n      callback,\n      'GET',\n      `/dashboards/aggregate_table_lookml/${dashboard_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get lookml of a UDD\n   *\n   * Returns a JSON object that contains the dashboard id and the full lookml\n   *\n   * GET /dashboards/lookml/{dashboard_id} -> IDashboardLookml\n   *\n   * @param callback streaming output function\n   * @param dashboard_id Id of dashboard\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard_lookml(\n    callback: (readable: Readable) => Promise<IDashboardLookml>,\n    dashboard_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_id = encodeParam(dashboard_id)\n    return this.authStream<IDashboardLookml>(\n      callback,\n      'GET',\n      `/dashboards/lookml/${dashboard_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Move an existing dashboard\n   *\n   * Moves a dashboard to a specified folder, and returns the moved dashboard.\n   *\n   * `dashboard_id` and `folder_id` are required.\n   * `dashboard_id` and `folder_id` must already exist, and `folder_id` must be different from the current `folder_id` of the dashboard.\n   *\n   * PATCH /dashboards/{dashboard_id}/move -> IDashboard\n   *\n   * @param callback streaming output function\n   * @param dashboard_id Dashboard id to move.\n   * @param folder_id Folder id to move to.\n   * @param options one-time API call overrides\n   *\n   */\n  async move_dashboard(\n    callback: (readable: Readable) => Promise<IDashboard>,\n    dashboard_id: string,\n    folder_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_id = encodeParam(dashboard_id)\n    return this.authStream<IDashboard>(\n      callback,\n      'PATCH',\n      `/dashboards/${dashboard_id}/move`,\n      { folder_id },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Creates a dashboard object based on LookML Dashboard YAML, and returns the details of the newly created dashboard.\n   *\n   * If a dashboard exists with the YAML-defined \"preferred_slug\", the new dashboard will overwrite it. Otherwise, a new\n   * dashboard will be created. Note that when a dashboard is overwritten, alerts will not be maintained.\n   *\n   * If a folder_id is specified: new dashboards will be placed in that folder, and overwritten dashboards will be moved to it\n   * If the folder_id isn't specified: new dashboards will be placed in the caller's personal folder, and overwritten dashboards\n   * will remain where they were\n   *\n   * LookML must contain valid LookML YAML code. It's recommended to use the LookML format returned\n   * from [dashboard_lookml()](#!/Dashboard/dashboard_lookml) as the input LookML (newlines replaced with\n   * ).\n   *\n   * Note that the created dashboard is not linked to any LookML Dashboard,\n   * i.e. [sync_lookml_dashboard()](#!/Dashboard/sync_lookml_dashboard) will not update dashboards created by this method.\n   *\n   * POST /dashboards/lookml -> IDashboardLookml\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteDashboardLookml>\n   * @param options one-time API call overrides\n   *\n   */\n  async import_dashboard_from_lookml(\n    callback: (readable: Readable) => Promise<IDashboardLookml>,\n    body: Partial<IWriteDashboardLookml>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDashboardLookml>(\n      callback,\n      'POST',\n      '/dashboards/lookml',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * # DEPRECATED:  Use [import_dashboard_from_lookml()](#!/Dashboard/import_dashboard_from_lookml)\n   *\n   * POST /dashboards/from_lookml -> IDashboardLookml\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteDashboardLookml>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_dashboard_from_lookml(\n    callback: (readable: Readable) => Promise<IDashboardLookml>,\n    body: Partial<IWriteDashboardLookml>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDashboardLookml>(\n      callback,\n      'POST',\n      '/dashboards/from_lookml',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Copy an existing dashboard\n   *\n   * Creates a copy of an existing dashboard, in a specified folder, and returns the copied dashboard.\n   *\n   * `dashboard_id` is required, `dashboard_id` and `folder_id` must already exist if specified.\n   * `folder_id` will default to the existing folder.\n   *\n   * If a dashboard with the same title already exists in the target folder, the copy will have '(copy)'\n   *   or '(copy <# of copies>)' appended.\n   *\n   * POST /dashboards/{dashboard_id}/copy -> IDashboard\n   *\n   * @param callback streaming output function\n   * @param dashboard_id Dashboard id to copy.\n   * @param folder_id Folder id to copy to.\n   * @param options one-time API call overrides\n   *\n   */\n  async copy_dashboard(\n    callback: (readable: Readable) => Promise<IDashboard>,\n    dashboard_id: string,\n    folder_id?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_id = encodeParam(dashboard_id)\n    return this.authStream<IDashboard>(\n      callback,\n      'POST',\n      `/dashboards/${dashboard_id}/copy`,\n      { folder_id },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search Dashboard Elements\n   *\n   * Returns an **array of DashboardElement objects** that match the specified search criteria.\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /dashboard_elements/search -> IDashboardElement[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchDashboardElements\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_dashboard_elements(\n    callback: (readable: Readable) => Promise<IDashboardElement[]>,\n    request: IRequestSearchDashboardElements,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDashboardElement[]>(\n      callback,\n      'GET',\n      '/dashboard_elements/search',\n      {\n        dashboard_id: request.dashboard_id,\n        look_id: request.look_id,\n        title: request.title,\n        deleted: request.deleted,\n        fields: request.fields,\n        filter_or: request.filter_or,\n        sorts: request.sorts,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the dashboard element with a specific id.\n   *\n   * GET /dashboard_elements/{dashboard_element_id} -> IDashboardElement\n   *\n   * @param callback streaming output function\n   * @param dashboard_element_id Id of dashboard element\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard_element(\n    callback: (readable: Readable) => Promise<IDashboardElement>,\n    dashboard_element_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_element_id = encodeParam(dashboard_element_id)\n    return this.authStream<IDashboardElement>(\n      callback,\n      'GET',\n      `/dashboard_elements/${dashboard_element_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the dashboard element with a specific id.\n   *\n   * PATCH /dashboard_elements/{dashboard_element_id} -> IDashboardElement\n   *\n   * @param callback streaming output function\n   * @param dashboard_element_id Id of dashboard element\n   * @param body Partial<IWriteDashboardElement>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_dashboard_element(\n    callback: (readable: Readable) => Promise<IDashboardElement>,\n    dashboard_element_id: string,\n    body: Partial<IWriteDashboardElement>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_element_id = encodeParam(dashboard_element_id)\n    return this.authStream<IDashboardElement>(\n      callback,\n      'PATCH',\n      `/dashboard_elements/${dashboard_element_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a dashboard element with a specific id.\n   *\n   * DELETE /dashboard_elements/{dashboard_element_id} -> string\n   *\n   * @param callback streaming output function\n   * @param dashboard_element_id Id of dashboard element\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_dashboard_element(\n    callback: (readable: Readable) => Promise<string>,\n    dashboard_element_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_element_id = encodeParam(dashboard_element_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/dashboard_elements/${dashboard_element_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all the dashboard elements on a dashboard with a specific id.\n   *\n   * GET /dashboards/{dashboard_id}/dashboard_elements -> IDashboardElement[]\n   *\n   * @param callback streaming output function\n   * @param dashboard_id Id of dashboard\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard_dashboard_elements(\n    callback: (readable: Readable) => Promise<IDashboardElement[]>,\n    dashboard_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_id = encodeParam(dashboard_id)\n    return this.authStream<IDashboardElement[]>(\n      callback,\n      'GET',\n      `/dashboards/${dashboard_id}/dashboard_elements`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a dashboard element on the dashboard with a specific id.\n   *\n   * POST /dashboard_elements -> IDashboardElement\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestCreateDashboardElement\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async create_dashboard_element(\n    callback: (readable: Readable) => Promise<IDashboardElement>,\n    request: IRequestCreateDashboardElement,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDashboardElement>(\n      callback,\n      'POST',\n      '/dashboard_elements',\n      { fields: request.fields, apply_filters: request.apply_filters },\n      request.body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the dashboard filters with a specific id.\n   *\n   * GET /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter\n   *\n   * @param callback streaming output function\n   * @param dashboard_filter_id Id of dashboard filters\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard_filter(\n    callback: (readable: Readable) => Promise<IDashboardFilter>,\n    dashboard_filter_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_filter_id = encodeParam(dashboard_filter_id)\n    return this.authStream<IDashboardFilter>(\n      callback,\n      'GET',\n      `/dashboard_filters/${dashboard_filter_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the dashboard filter with a specific id.\n   *\n   * PATCH /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter\n   *\n   * @param callback streaming output function\n   * @param dashboard_filter_id Id of dashboard filter\n   * @param body Partial<IWriteDashboardFilter>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_dashboard_filter(\n    callback: (readable: Readable) => Promise<IDashboardFilter>,\n    dashboard_filter_id: string,\n    body: Partial<IWriteDashboardFilter>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_filter_id = encodeParam(dashboard_filter_id)\n    return this.authStream<IDashboardFilter>(\n      callback,\n      'PATCH',\n      `/dashboard_filters/${dashboard_filter_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a dashboard filter with a specific id.\n   *\n   * DELETE /dashboard_filters/{dashboard_filter_id} -> string\n   *\n   * @param callback streaming output function\n   * @param dashboard_filter_id Id of dashboard filter\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_dashboard_filter(\n    callback: (readable: Readable) => Promise<string>,\n    dashboard_filter_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_filter_id = encodeParam(dashboard_filter_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/dashboard_filters/${dashboard_filter_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all the dashboard filters on a dashboard with a specific id.\n   *\n   * GET /dashboards/{dashboard_id}/dashboard_filters -> IDashboardFilter[]\n   *\n   * @param callback streaming output function\n   * @param dashboard_id Id of dashboard\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard_dashboard_filters(\n    callback: (readable: Readable) => Promise<IDashboardFilter[]>,\n    dashboard_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_id = encodeParam(dashboard_id)\n    return this.authStream<IDashboardFilter[]>(\n      callback,\n      'GET',\n      `/dashboards/${dashboard_id}/dashboard_filters`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a dashboard filter on the dashboard with a specific id.\n   *\n   * POST /dashboard_filters -> IDashboardFilter\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteCreateDashboardFilter>\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async create_dashboard_filter(\n    callback: (readable: Readable) => Promise<IDashboardFilter>,\n    body: Partial<IWriteCreateDashboardFilter>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDashboardFilter>(\n      callback,\n      'POST',\n      '/dashboard_filters',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the dashboard elements with a specific id.\n   *\n   * GET /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent\n   *\n   * @param callback streaming output function\n   * @param dashboard_layout_component_id Id of dashboard layout component\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard_layout_component(\n    callback: (readable: Readable) => Promise<IDashboardLayoutComponent>,\n    dashboard_layout_component_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_layout_component_id = encodeParam(dashboard_layout_component_id)\n    return this.authStream<IDashboardLayoutComponent>(\n      callback,\n      'GET',\n      `/dashboard_layout_components/${dashboard_layout_component_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the dashboard element with a specific id.\n   *\n   * PATCH /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent\n   *\n   * @param callback streaming output function\n   * @param dashboard_layout_component_id Id of dashboard layout component\n   * @param body Partial<IWriteDashboardLayoutComponent>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_dashboard_layout_component(\n    callback: (readable: Readable) => Promise<IDashboardLayoutComponent>,\n    dashboard_layout_component_id: string,\n    body: Partial<IWriteDashboardLayoutComponent>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_layout_component_id = encodeParam(dashboard_layout_component_id)\n    return this.authStream<IDashboardLayoutComponent>(\n      callback,\n      'PATCH',\n      `/dashboard_layout_components/${dashboard_layout_component_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all the dashboard layout components for a dashboard layout with a specific id.\n   *\n   * GET /dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components -> IDashboardLayoutComponent[]\n   *\n   * @param callback streaming output function\n   * @param dashboard_layout_id Id of dashboard layout component\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard_layout_dashboard_layout_components(\n    callback: (readable: Readable) => Promise<IDashboardLayoutComponent[]>,\n    dashboard_layout_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_layout_id = encodeParam(dashboard_layout_id)\n    return this.authStream<IDashboardLayoutComponent[]>(\n      callback,\n      'GET',\n      `/dashboard_layouts/${dashboard_layout_id}/dashboard_layout_components`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the dashboard layouts with a specific id.\n   *\n   * GET /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout\n   *\n   * @param callback streaming output function\n   * @param dashboard_layout_id Id of dashboard layouts\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard_layout(\n    callback: (readable: Readable) => Promise<IDashboardLayout>,\n    dashboard_layout_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_layout_id = encodeParam(dashboard_layout_id)\n    return this.authStream<IDashboardLayout>(\n      callback,\n      'GET',\n      `/dashboard_layouts/${dashboard_layout_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the dashboard layout with a specific id.\n   *\n   * PATCH /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout\n   *\n   * @param callback streaming output function\n   * @param dashboard_layout_id Id of dashboard layout\n   * @param body Partial<IWriteDashboardLayout>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_dashboard_layout(\n    callback: (readable: Readable) => Promise<IDashboardLayout>,\n    dashboard_layout_id: string,\n    body: Partial<IWriteDashboardLayout>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_layout_id = encodeParam(dashboard_layout_id)\n    return this.authStream<IDashboardLayout>(\n      callback,\n      'PATCH',\n      `/dashboard_layouts/${dashboard_layout_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a dashboard layout with a specific id.\n   *\n   * DELETE /dashboard_layouts/{dashboard_layout_id} -> string\n   *\n   * @param callback streaming output function\n   * @param dashboard_layout_id Id of dashboard layout\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_dashboard_layout(\n    callback: (readable: Readable) => Promise<string>,\n    dashboard_layout_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_layout_id = encodeParam(dashboard_layout_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/dashboard_layouts/${dashboard_layout_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all the dashboard elements on a dashboard with a specific id.\n   *\n   * GET /dashboards/{dashboard_id}/dashboard_layouts -> IDashboardLayout[]\n   *\n   * @param callback streaming output function\n   * @param dashboard_id Id of dashboard\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async dashboard_dashboard_layouts(\n    callback: (readable: Readable) => Promise<IDashboardLayout[]>,\n    dashboard_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_id = encodeParam(dashboard_id)\n    return this.authStream<IDashboardLayout[]>(\n      callback,\n      'GET',\n      `/dashboards/${dashboard_id}/dashboard_layouts`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a dashboard layout on the dashboard with a specific id.\n   *\n   * POST /dashboard_layouts -> IDashboardLayout\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteDashboardLayout>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_dashboard_layout(\n    callback: (readable: Readable) => Promise<IDashboardLayout>,\n    body: Partial<IWriteDashboardLayout>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDashboardLayout>(\n      callback,\n      'POST',\n      '/dashboard_layouts',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  //#endregion Dashboard: Manage Dashboards\n\n  //#region DataAction: Run Data Actions\n\n  /**\n   * Perform a data action. The data action object can be obtained from query results, and used to perform an arbitrary action.\n   *\n   * POST /data_actions -> IDataActionResponse\n   *\n   * @param callback streaming output function\n   * @param body Partial<IDataActionRequest>\n   * @param options one-time API call overrides\n   *\n   */\n  async perform_data_action(\n    callback: (readable: Readable) => Promise<IDataActionResponse>,\n    body: Partial<IDataActionRequest>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDataActionResponse>(\n      callback,\n      'POST',\n      '/data_actions',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * For some data actions, the remote server may supply a form requesting further user input. This endpoint takes a data action, asks the remote server to generate a form for it, and returns that form to you for presentation to the user.\n   *\n   * POST /data_actions/form -> IDataActionForm\n   *\n   * @param callback streaming output function\n   * @param body Partial<IDictionary<string>>\n   * @param options one-time API call overrides\n   *\n   */\n  async fetch_remote_data_action_form(\n    callback: (readable: Readable) => Promise<IDataActionForm>,\n    body: Partial<IDictionary<string>>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDataActionForm>(\n      callback,\n      'POST',\n      '/data_actions/form',\n      null,\n      body,\n      options\n    )\n  }\n\n  //#endregion DataAction: Run Data Actions\n\n  //#region Datagroup: Manage Datagroups\n\n  /**\n   * ### Get information about all datagroups.\n   *\n   * GET /datagroups -> IDatagroup[]\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async all_datagroups(\n    callback: (readable: Readable) => Promise<IDatagroup[]>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDatagroup[]>(\n      callback,\n      'GET',\n      '/datagroups',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a datagroup.\n   *\n   * GET /datagroups/{datagroup_id} -> IDatagroup\n   *\n   * @param callback streaming output function\n   * @param datagroup_id ID of datagroup.\n   * @param options one-time API call overrides\n   *\n   */\n  async datagroup(\n    callback: (readable: Readable) => Promise<IDatagroup>,\n    datagroup_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    datagroup_id = encodeParam(datagroup_id)\n    return this.authStream<IDatagroup>(\n      callback,\n      'GET',\n      `/datagroups/${datagroup_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a datagroup using the specified params.\n   *\n   * PATCH /datagroups/{datagroup_id} -> IDatagroup\n   *\n   * @param callback streaming output function\n   * @param datagroup_id ID of datagroup.\n   * @param body Partial<IWriteDatagroup>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_datagroup(\n    callback: (readable: Readable) => Promise<IDatagroup>,\n    datagroup_id: string,\n    body: Partial<IWriteDatagroup>,\n    options?: Partial<ITransportSettings>\n  ) {\n    datagroup_id = encodeParam(datagroup_id)\n    return this.authStream<IDatagroup>(\n      callback,\n      'PATCH',\n      `/datagroups/${datagroup_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  //#endregion Datagroup: Manage Datagroups\n\n  //#region DerivedTable: View Derived Table graphs\n\n  /**\n   * ### Discover information about derived tables\n   *\n   * GET /derived_table/graph/model/{model} -> IDependencyGraph\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestGraphDerivedTablesForModel\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async graph_derived_tables_for_model(\n    callback: (readable: Readable) => Promise<IDependencyGraph>,\n    request: IRequestGraphDerivedTablesForModel,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.model = encodeParam(request.model)\n    return this.authStream<IDependencyGraph>(\n      callback,\n      'GET',\n      `/derived_table/graph/model/${request.model}`,\n      { format: request.format, color: request.color },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the subgraph representing this derived table and its dependencies.\n   *\n   * GET /derived_table/graph/view/{view} -> IDependencyGraph\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestGraphDerivedTablesForView\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async graph_derived_tables_for_view(\n    callback: (readable: Readable) => Promise<IDependencyGraph>,\n    request: IRequestGraphDerivedTablesForView,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.view = encodeParam(request.view)\n    return this.authStream<IDependencyGraph>(\n      callback,\n      'GET',\n      `/derived_table/graph/view/${request.view}`,\n      { models: request.models, workspace: request.workspace },\n      null,\n      options\n    )\n  }\n\n  /**\n   * Enqueue materialization for a PDT with the given model name and view name\n   *\n   * GET /derived_table/{model_name}/{view_name}/start -> IMaterializePDT\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestStartPdtBuild\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async start_pdt_build(\n    callback: (readable: Readable) => Promise<IMaterializePDT>,\n    request: IRequestStartPdtBuild,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.model_name = encodeParam(request.model_name)\n    request.view_name = encodeParam(request.view_name)\n    return this.authStream<IMaterializePDT>(\n      callback,\n      'GET',\n      `/derived_table/${request.model_name}/${request.view_name}/start`,\n      {\n        force_rebuild: request.force_rebuild,\n        force_full_incremental: request.force_full_incremental,\n        workspace: request.workspace,\n        source: request.source,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * Check status of PDT materialization\n   *\n   * GET /derived_table/{materialization_id}/status -> IMaterializePDT\n   *\n   * @param callback streaming output function\n   * @param materialization_id The materialization id to check status for.\n   * @param options one-time API call overrides\n   *\n   */\n  async check_pdt_build(\n    callback: (readable: Readable) => Promise<IMaterializePDT>,\n    materialization_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    materialization_id = encodeParam(materialization_id)\n    return this.authStream<IMaterializePDT>(\n      callback,\n      'GET',\n      `/derived_table/${materialization_id}/status`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * Stop a PDT materialization\n   *\n   * GET /derived_table/{materialization_id}/stop -> IMaterializePDT\n   *\n   * @param callback streaming output function\n   * @param materialization_id The materialization id to stop.\n   * @param source The source of this request.\n   * @param options one-time API call overrides\n   *\n   */\n  async stop_pdt_build(\n    callback: (readable: Readable) => Promise<IMaterializePDT>,\n    materialization_id: string,\n    source?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    materialization_id = encodeParam(materialization_id)\n    return this.authStream<IMaterializePDT>(\n      callback,\n      'GET',\n      `/derived_table/${materialization_id}/stop`,\n      { source },\n      null,\n      options\n    )\n  }\n\n  //#endregion DerivedTable: View Derived Table graphs\n\n  //#region Folder: Manage Folders\n\n  /**\n   * Search for folders by creator id, parent id, name, etc\n   *\n   * GET /folders/search -> IFolder[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchFolders\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_folders(\n    callback: (readable: Readable) => Promise<IFolder[]>,\n    request: IRequestSearchFolders,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IFolder[]>(\n      callback,\n      'GET',\n      '/folders/search',\n      {\n        fields: request.fields,\n        page: request.page,\n        per_page: request.per_page,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        name: request.name,\n        id: request.id,\n        parent_id: request.parent_id,\n        creator_id: request.creator_id,\n        filter_or: request.filter_or,\n        is_shared_root: request.is_shared_root,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the folder with a specific id.\n   *\n   * GET /folders/{folder_id} -> IFolder\n   *\n   * @param callback streaming output function\n   * @param folder_id Id of folder\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async folder(\n    callback: (readable: Readable) => Promise<IFolder>,\n    folder_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    folder_id = encodeParam(folder_id)\n    return this.authStream<IFolder>(\n      callback,\n      'GET',\n      `/folders/${folder_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the folder with a specific id.\n   *\n   * PATCH /folders/{folder_id} -> IFolder\n   *\n   * @param callback streaming output function\n   * @param folder_id Id of folder\n   * @param body Partial<IUpdateFolder>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_folder(\n    callback: (readable: Readable) => Promise<IFolder>,\n    folder_id: string,\n    body: Partial<IUpdateFolder>,\n    options?: Partial<ITransportSettings>\n  ) {\n    folder_id = encodeParam(folder_id)\n    return this.authStream<IFolder>(\n      callback,\n      'PATCH',\n      `/folders/${folder_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete the folder with a specific id including any children folders.\n   * **DANGER** this will delete all looks and dashboards in the folder.\n   *\n   * DELETE /folders/{folder_id} -> string\n   *\n   * @param callback streaming output function\n   * @param folder_id Id of folder\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_folder(\n    callback: (readable: Readable) => Promise<string>,\n    folder_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    folder_id = encodeParam(folder_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/folders/${folder_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all folders.\n   *\n   * In API 3.x, this will not return empty personal folders, unless they belong to the calling user,\n   * or if they contain soft-deleted content.\n   *\n   * In API 4.0+, all personal folders will be returned.\n   *\n   * GET /folders -> IFolder[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_folders(\n    callback: (readable: Readable) => Promise<IFolder[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IFolder[]>(\n      callback,\n      'GET',\n      '/folders',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a folder with specified information.\n   *\n   * Caller must have permission to edit the parent folder and to create folders, otherwise the request\n   * returns 404 Not Found.\n   *\n   * POST /folders -> IFolder\n   *\n   * @param callback streaming output function\n   * @param body Partial<ICreateFolder>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_folder(\n    callback: (readable: Readable) => Promise<IFolder>,\n    body: Partial<ICreateFolder>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IFolder>(\n      callback,\n      'POST',\n      '/folders',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get the children of a folder.\n   *\n   * GET /folders/{folder_id}/children -> IFolder[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestFolderChildren\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async folder_children(\n    callback: (readable: Readable) => Promise<IFolder[]>,\n    request: IRequestFolderChildren,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.folder_id = encodeParam(request.folder_id)\n    return this.authStream<IFolder[]>(\n      callback,\n      'GET',\n      `/folders/${request.folder_id}/children`,\n      {\n        fields: request.fields,\n        page: request.page,\n        per_page: request.per_page,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search the children of a folder\n   *\n   * GET /folders/{folder_id}/children/search -> IFolder[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestFolderChildrenSearch\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async folder_children_search(\n    callback: (readable: Readable) => Promise<IFolder[]>,\n    request: IRequestFolderChildrenSearch,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.folder_id = encodeParam(request.folder_id)\n    return this.authStream<IFolder[]>(\n      callback,\n      'GET',\n      `/folders/${request.folder_id}/children/search`,\n      { fields: request.fields, sorts: request.sorts, name: request.name },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the parent of a folder\n   *\n   * GET /folders/{folder_id}/parent -> IFolder\n   *\n   * @param callback streaming output function\n   * @param folder_id Id of folder\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async folder_parent(\n    callback: (readable: Readable) => Promise<IFolder>,\n    folder_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    folder_id = encodeParam(folder_id)\n    return this.authStream<IFolder>(\n      callback,\n      'GET',\n      `/folders/${folder_id}/parent`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the ancestors of a folder\n   *\n   * GET /folders/{folder_id}/ancestors -> IFolder[]\n   *\n   * @param callback streaming output function\n   * @param folder_id Id of folder\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async folder_ancestors(\n    callback: (readable: Readable) => Promise<IFolder[]>,\n    folder_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    folder_id = encodeParam(folder_id)\n    return this.authStream<IFolder[]>(\n      callback,\n      'GET',\n      `/folders/${folder_id}/ancestors`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get all looks in a folder.\n   * In API 3.x, this will return all looks in a folder, including looks in the trash.\n   * In API 4.0+, all looks in a folder will be returned, excluding looks in the trash.\n   *\n   * GET /folders/{folder_id}/looks -> ILookWithQuery[]\n   *\n   * @param callback streaming output function\n   * @param folder_id Id of folder\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async folder_looks(\n    callback: (readable: Readable) => Promise<ILookWithQuery[]>,\n    folder_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    folder_id = encodeParam(folder_id)\n    return this.authStream<ILookWithQuery[]>(\n      callback,\n      'GET',\n      `/folders/${folder_id}/looks`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the dashboards in a folder\n   *\n   * GET /folders/{folder_id}/dashboards -> IDashboard[]\n   *\n   * @param callback streaming output function\n   * @param folder_id Id of folder\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async folder_dashboards(\n    callback: (readable: Readable) => Promise<IDashboard[]>,\n    folder_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    folder_id = encodeParam(folder_id)\n    return this.authStream<IDashboard[]>(\n      callback,\n      'GET',\n      `/folders/${folder_id}/dashboards`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  //#endregion Folder: Manage Folders\n\n  //#region Group: Manage Groups\n\n  /**\n   * ### Get information about all groups.\n   *\n   * GET /groups -> IGroup[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllGroups\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_groups(\n    callback: (readable: Readable) => Promise<IGroup[]>,\n    request: IRequestAllGroups,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IGroup[]>(\n      callback,\n      'GET',\n      '/groups',\n      {\n        fields: request.fields,\n        page: request.page,\n        per_page: request.per_page,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        ids: request.ids,\n        content_metadata_id: request.content_metadata_id,\n        can_add_to_content_metadata: request.can_add_to_content_metadata,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Creates a new group (admin only).\n   *\n   * POST /groups -> IGroup\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteGroup>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_group(\n    callback: (readable: Readable) => Promise<IGroup>,\n    body: Partial<IWriteGroup>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IGroup>(\n      callback,\n      'POST',\n      '/groups',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Search groups\n   *\n   * Returns all group records that match the given search criteria.\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /groups/search -> IGroup[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchGroups\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_groups(\n    callback: (readable: Readable) => Promise<IGroup[]>,\n    request: IRequestSearchGroups,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IGroup[]>(\n      callback,\n      'GET',\n      '/groups/search',\n      {\n        fields: request.fields,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        filter_or: request.filter_or,\n        id: request.id,\n        name: request.name,\n        external_group_id: request.external_group_id,\n        externally_managed: request.externally_managed,\n        externally_orphaned: request.externally_orphaned,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search groups include roles\n   *\n   * Returns all group records that match the given search criteria, and attaches any associated roles.\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /groups/search/with_roles -> IGroupSearch[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchGroupsWithRoles\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_groups_with_roles(\n    callback: (readable: Readable) => Promise<IGroupSearch[]>,\n    request: IRequestSearchGroupsWithRoles,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IGroupSearch[]>(\n      callback,\n      'GET',\n      '/groups/search/with_roles',\n      {\n        fields: request.fields,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        filter_or: request.filter_or,\n        id: request.id,\n        name: request.name,\n        external_group_id: request.external_group_id,\n        externally_managed: request.externally_managed,\n        externally_orphaned: request.externally_orphaned,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search groups include hierarchy\n   *\n   * Returns all group records that match the given search criteria, and attaches\n   * associated role_ids and parent group_ids.\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /groups/search/with_hierarchy -> IGroupHierarchy[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchGroupsWithHierarchy\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_groups_with_hierarchy(\n    callback: (readable: Readable) => Promise<IGroupHierarchy[]>,\n    request: IRequestSearchGroupsWithHierarchy,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IGroupHierarchy[]>(\n      callback,\n      'GET',\n      '/groups/search/with_hierarchy',\n      {\n        fields: request.fields,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        filter_or: request.filter_or,\n        id: request.id,\n        name: request.name,\n        external_group_id: request.external_group_id,\n        externally_managed: request.externally_managed,\n        externally_orphaned: request.externally_orphaned,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a group.\n   *\n   * GET /groups/{group_id} -> IGroup\n   *\n   * @param callback streaming output function\n   * @param group_id Id of group\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async group(\n    callback: (readable: Readable) => Promise<IGroup>,\n    group_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    group_id = encodeParam(group_id)\n    return this.authStream<IGroup>(\n      callback,\n      'GET',\n      `/groups/${group_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Updates the a group (admin only).\n   *\n   * PATCH /groups/{group_id} -> IGroup\n   *\n   * @param callback streaming output function\n   * @param group_id Id of group\n   * @param body Partial<IWriteGroup>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_group(\n    callback: (readable: Readable) => Promise<IGroup>,\n    group_id: string,\n    body: Partial<IWriteGroup>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    group_id = encodeParam(group_id)\n    return this.authStream<IGroup>(\n      callback,\n      'PATCH',\n      `/groups/${group_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Deletes a group (admin only).\n   *\n   * DELETE /groups/{group_id} -> string\n   *\n   * @param callback streaming output function\n   * @param group_id Id of group\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_group(\n    callback: (readable: Readable) => Promise<string>,\n    group_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    group_id = encodeParam(group_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/groups/${group_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all the groups in a group\n   *\n   * GET /groups/{group_id}/groups -> IGroup[]\n   *\n   * @param callback streaming output function\n   * @param group_id Id of group\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_group_groups(\n    callback: (readable: Readable) => Promise<IGroup[]>,\n    group_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    group_id = encodeParam(group_id)\n    return this.authStream<IGroup[]>(\n      callback,\n      'GET',\n      `/groups/${group_id}/groups`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Adds a new group to a group.\n   *\n   * POST /groups/{group_id}/groups -> IGroup\n   *\n   * @param callback streaming output function\n   * @param group_id Id of group\n   * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n   * @param options one-time API call overrides\n   *\n   */\n  async add_group_group(\n    callback: (readable: Readable) => Promise<IGroup>,\n    group_id: string,\n    body: Partial<IGroupIdForGroupInclusion>,\n    options?: Partial<ITransportSettings>\n  ) {\n    group_id = encodeParam(group_id)\n    return this.authStream<IGroup>(\n      callback,\n      'POST',\n      `/groups/${group_id}/groups`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all the users directly included in a group.\n   *\n   * GET /groups/{group_id}/users -> IUser[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllGroupUsers\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_group_users(\n    callback: (readable: Readable) => Promise<IUser[]>,\n    request: IRequestAllGroupUsers,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.group_id = encodeParam(request.group_id)\n    return this.authStream<IUser[]>(\n      callback,\n      'GET',\n      `/groups/${request.group_id}/users`,\n      {\n        fields: request.fields,\n        page: request.page,\n        per_page: request.per_page,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Adds a new user to a group.\n   *\n   * POST /groups/{group_id}/users -> IUser\n   *\n   * @param callback streaming output function\n   * @param group_id Id of group\n   * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n   * @param options one-time API call overrides\n   *\n   */\n  async add_group_user(\n    callback: (readable: Readable) => Promise<IUser>,\n    group_id: string,\n    body: Partial<IGroupIdForGroupUserInclusion>,\n    options?: Partial<ITransportSettings>\n  ) {\n    group_id = encodeParam(group_id)\n    return this.authStream<IUser>(\n      callback,\n      'POST',\n      `/groups/${group_id}/users`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Removes a user from a group.\n   *\n   * DELETE /groups/{group_id}/users/{user_id} -> void\n   *\n   * @param callback streaming output function\n   * @param group_id Id of group\n   * @param user_id Id of user to remove from group\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_group_user(\n    callback: (readable: Readable) => Promise<void>,\n    group_id: string,\n    user_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    group_id = encodeParam(group_id)\n    user_id = encodeParam(user_id)\n    return this.authStream<void>(\n      callback,\n      'DELETE',\n      `/groups/${group_id}/users/${user_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Removes a group from a group.\n   *\n   * DELETE /groups/{group_id}/groups/{deleting_group_id} -> void\n   *\n   * @param callback streaming output function\n   * @param group_id Id of group\n   * @param deleting_group_id Id of group to delete\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_group_from_group(\n    callback: (readable: Readable) => Promise<void>,\n    group_id: string,\n    deleting_group_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    group_id = encodeParam(group_id)\n    deleting_group_id = encodeParam(deleting_group_id)\n    return this.authStream<void>(\n      callback,\n      'DELETE',\n      `/groups/${group_id}/groups/${deleting_group_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Set the value of a user attribute for a group.\n   *\n   * For information about how user attribute values are calculated, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\n   *\n   * PATCH /groups/{group_id}/attribute_values/{user_attribute_id} -> IUserAttributeGroupValue\n   *\n   * @param callback streaming output function\n   * @param group_id Id of group\n   * @param user_attribute_id Id of user attribute\n   * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n   * @param options one-time API call overrides\n   *\n   */\n  async update_user_attribute_group_value(\n    callback: (readable: Readable) => Promise<IUserAttributeGroupValue>,\n    group_id: string,\n    user_attribute_id: string,\n    body: Partial<IUserAttributeGroupValue>,\n    options?: Partial<ITransportSettings>\n  ) {\n    group_id = encodeParam(group_id)\n    user_attribute_id = encodeParam(user_attribute_id)\n    return this.authStream<IUserAttributeGroupValue>(\n      callback,\n      'PATCH',\n      `/groups/${group_id}/attribute_values/${user_attribute_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Remove a user attribute value from a group.\n   *\n   * DELETE /groups/{group_id}/attribute_values/{user_attribute_id} -> void\n   *\n   * @param callback streaming output function\n   * @param group_id Id of group\n   * @param user_attribute_id Id of user attribute\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_attribute_group_value(\n    callback: (readable: Readable) => Promise<void>,\n    group_id: string,\n    user_attribute_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    group_id = encodeParam(group_id)\n    user_attribute_id = encodeParam(user_attribute_id)\n    return this.authStream<void>(\n      callback,\n      'DELETE',\n      `/groups/${group_id}/attribute_values/${user_attribute_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion Group: Manage Groups\n\n  //#region Homepage: Manage Homepage\n\n  /**\n   * ### Get information about the primary homepage's sections.\n   *\n   * GET /primary_homepage_sections -> IHomepageSection[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_primary_homepage_sections(\n    callback: (readable: Readable) => Promise<IHomepageSection[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IHomepageSection[]>(\n      callback,\n      'GET',\n      '/primary_homepage_sections',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  //#endregion Homepage: Manage Homepage\n\n  //#region Integration: Manage Integrations\n\n  /**\n   * ### Get information about all Integration Hubs.\n   *\n   * GET /integration_hubs -> IIntegrationHub[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_integration_hubs(\n    callback: (readable: Readable) => Promise<IIntegrationHub[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IIntegrationHub[]>(\n      callback,\n      'GET',\n      '/integration_hubs',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a new Integration Hub.\n   *\n   * This API is rate limited to prevent it from being used for SSRF attacks\n   *\n   * POST /integration_hubs -> IIntegrationHub\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteIntegrationHub>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_integration_hub(\n    callback: (readable: Readable) => Promise<IIntegrationHub>,\n    body: Partial<IWriteIntegrationHub>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IIntegrationHub>(\n      callback,\n      'POST',\n      '/integration_hubs',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a Integration Hub.\n   *\n   * GET /integration_hubs/{integration_hub_id} -> IIntegrationHub\n   *\n   * @param callback streaming output function\n   * @param integration_hub_id Id of integration_hub\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async integration_hub(\n    callback: (readable: Readable) => Promise<IIntegrationHub>,\n    integration_hub_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    integration_hub_id = encodeParam(integration_hub_id)\n    return this.authStream<IIntegrationHub>(\n      callback,\n      'GET',\n      `/integration_hubs/${integration_hub_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a Integration Hub definition.\n   *\n   * This API is rate limited to prevent it from being used for SSRF attacks\n   *\n   * PATCH /integration_hubs/{integration_hub_id} -> IIntegrationHub\n   *\n   * @param callback streaming output function\n   * @param integration_hub_id Id of integration_hub\n   * @param body Partial<IWriteIntegrationHub>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_integration_hub(\n    callback: (readable: Readable) => Promise<IIntegrationHub>,\n    integration_hub_id: string,\n    body: Partial<IWriteIntegrationHub>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    integration_hub_id = encodeParam(integration_hub_id)\n    return this.authStream<IIntegrationHub>(\n      callback,\n      'PATCH',\n      `/integration_hubs/${integration_hub_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a Integration Hub.\n   *\n   * DELETE /integration_hubs/{integration_hub_id} -> string\n   *\n   * @param callback streaming output function\n   * @param integration_hub_id Id of integration_hub\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_integration_hub(\n    callback: (readable: Readable) => Promise<string>,\n    integration_hub_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    integration_hub_id = encodeParam(integration_hub_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/integration_hubs/${integration_hub_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * Accepts the legal agreement for a given integration hub. This only works for integration hubs that have legal_agreement_required set to true and legal_agreement_signed set to false.\n   *\n   * POST /integration_hubs/{integration_hub_id}/accept_legal_agreement -> IIntegrationHub\n   *\n   * @param callback streaming output function\n   * @param integration_hub_id Id of integration_hub\n   * @param options one-time API call overrides\n   *\n   */\n  async accept_integration_hub_legal_agreement(\n    callback: (readable: Readable) => Promise<IIntegrationHub>,\n    integration_hub_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    integration_hub_id = encodeParam(integration_hub_id)\n    return this.authStream<IIntegrationHub>(\n      callback,\n      'POST',\n      `/integration_hubs/${integration_hub_id}/accept_legal_agreement`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all Integrations.\n   *\n   * GET /integrations -> IIntegration[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllIntegrations\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_integrations(\n    callback: (readable: Readable) => Promise<IIntegration[]>,\n    request: IRequestAllIntegrations,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IIntegration[]>(\n      callback,\n      'GET',\n      '/integrations',\n      {\n        fields: request.fields,\n        integration_hub_id: request.integration_hub_id,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a Integration.\n   *\n   * GET /integrations/{integration_id} -> IIntegration\n   *\n   * @param callback streaming output function\n   * @param integration_id Id of integration\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async integration(\n    callback: (readable: Readable) => Promise<IIntegration>,\n    integration_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    integration_id = encodeParam(integration_id)\n    return this.authStream<IIntegration>(\n      callback,\n      'GET',\n      `/integrations/${integration_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update parameters on a Integration.\n   *\n   * PATCH /integrations/{integration_id} -> IIntegration\n   *\n   * @param callback streaming output function\n   * @param integration_id Id of integration\n   * @param body Partial<IWriteIntegration>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_integration(\n    callback: (readable: Readable) => Promise<IIntegration>,\n    integration_id: string,\n    body: Partial<IWriteIntegration>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    integration_id = encodeParam(integration_id)\n    return this.authStream<IIntegration>(\n      callback,\n      'PATCH',\n      `/integrations/${integration_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * Returns the Integration form for presentation to the user.\n   *\n   * POST /integrations/{integration_id}/form -> IDataActionForm\n   *\n   * @param callback streaming output function\n   * @param integration_id Id of integration\n   * @param body Partial<IDictionary<string>>\n   * @param options one-time API call overrides\n   *\n   */\n  async fetch_integration_form(\n    callback: (readable: Readable) => Promise<IDataActionForm>,\n    integration_id: string,\n    body?: Partial<IDictionary<string>>,\n    options?: Partial<ITransportSettings>\n  ) {\n    integration_id = encodeParam(integration_id)\n    return this.authStream<IDataActionForm>(\n      callback,\n      'POST',\n      `/integrations/${integration_id}/form`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * Tests the integration to make sure all the settings are working.\n   *\n   * POST /integrations/{integration_id}/test -> IIntegrationTestResult\n   *\n   * @param callback streaming output function\n   * @param integration_id Id of integration\n   * @param options one-time API call overrides\n   *\n   */\n  async test_integration(\n    callback: (readable: Readable) => Promise<IIntegrationTestResult>,\n    integration_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    integration_id = encodeParam(integration_id)\n    return this.authStream<IIntegrationTestResult>(\n      callback,\n      'POST',\n      `/integrations/${integration_id}/test`,\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion Integration: Manage Integrations\n\n  //#region Look: Run and Manage Looks\n\n  /**\n   * ### Get information about all active Looks\n   *\n   * Returns an array of **abbreviated Look objects** describing all the looks that the caller has access to. Soft-deleted Looks are **not** included.\n   *\n   * Get the **full details** of a specific look by id with [look(id)](#!/Look/look)\n   *\n   * Find **soft-deleted looks** with [search_looks()](#!/Look/search_looks)\n   *\n   * GET /looks -> ILook[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_looks(\n    callback: (readable: Readable) => Promise<ILook[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILook[]>(\n      callback,\n      'GET',\n      '/looks',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a Look\n   *\n   * To create a look to display query data, first create the query with [create_query()](#!/Query/create_query)\n   * then assign the query's id to the `query_id` property in the call to `create_look()`.\n   *\n   * To place the look into a particular space, assign the space's id to the `space_id` property\n   * in the call to `create_look()`.\n   *\n   * POST /looks -> ILookWithQuery\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteLookWithQuery>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_look(\n    callback: (readable: Readable) => Promise<ILookWithQuery>,\n    body: Partial<IWriteLookWithQuery>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILookWithQuery>(\n      callback,\n      'POST',\n      '/looks',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Search Looks\n   *\n   * Returns an **array of Look objects** that match the specified search criteria.\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   *\n   * Get a **single look** by id with [look(id)](#!/Look/look)\n   *\n   * GET /looks/search -> ILook[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchLooks\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_looks(\n    callback: (readable: Readable) => Promise<ILook[]>,\n    request: IRequestSearchLooks,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILook[]>(\n      callback,\n      'GET',\n      '/looks/search',\n      {\n        id: request.id,\n        title: request.title,\n        description: request.description,\n        content_favorite_id: request.content_favorite_id,\n        folder_id: request.folder_id,\n        user_id: request.user_id,\n        view_count: request.view_count,\n        deleted: request.deleted,\n        query_id: request.query_id,\n        curate: request.curate,\n        last_viewed_at: request.last_viewed_at,\n        fields: request.fields,\n        page: request.page,\n        per_page: request.per_page,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get a Look.\n   *\n   * Returns detailed information about a Look and its associated Query.\n   *\n   * GET /looks/{look_id} -> ILookWithQuery\n   *\n   * @param callback streaming output function\n   * @param look_id Id of look\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async look(\n    callback: (readable: Readable) => Promise<ILookWithQuery>,\n    look_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    look_id = encodeParam(look_id)\n    return this.authStream<ILookWithQuery>(\n      callback,\n      'GET',\n      `/looks/${look_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Modify a Look\n   *\n   * Use this function to modify parts of a look. Property values given in a call to `update_look` are\n   * applied to the existing look, so there's no need to include properties whose values are not changing.\n   * It's best to specify only the properties you want to change and leave everything else out\n   * of your `update_look` call. **Look properties marked 'read-only' will be ignored.**\n   *\n   * When a user deletes a look in the Looker UI, the look data remains in the database but is\n   * marked with a deleted flag (\"soft-deleted\"). Soft-deleted looks can be undeleted (by an admin)\n   * if the delete was in error.\n   *\n   * To soft-delete a look via the API, use [update_look()](#!/Look/update_look) to change the look's `deleted` property to `true`.\n   * You can undelete a look by calling `update_look` to change the look's `deleted` property to `false`.\n   *\n   * Soft-deleted looks are excluded from the results of [all_looks()](#!/Look/all_looks) and [search_looks()](#!/Look/search_looks), so they\n   * essentially disappear from view even though they still reside in the db.\n   * In API 3.1 and later, you can pass `deleted: true` as a parameter to [search_looks()](#!/3.1/Look/search_looks) to list soft-deleted looks.\n   *\n   * NOTE: [delete_look()](#!/Look/delete_look) performs a \"hard delete\" - the look data is removed from the Looker\n   * database and destroyed. There is no \"undo\" for `delete_look()`.\n   *\n   * PATCH /looks/{look_id} -> ILookWithQuery\n   *\n   * @param callback streaming output function\n   * @param look_id Id of look\n   * @param body Partial<IWriteLookWithQuery>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_look(\n    callback: (readable: Readable) => Promise<ILookWithQuery>,\n    look_id: string,\n    body: Partial<IWriteLookWithQuery>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    look_id = encodeParam(look_id)\n    return this.authStream<ILookWithQuery>(\n      callback,\n      'PATCH',\n      `/looks/${look_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Permanently Delete a Look\n   *\n   * This operation **permanently** removes a look from the Looker database.\n   *\n   * NOTE: There is no \"undo\" for this kind of delete.\n   *\n   * For information about soft-delete (which can be undone) see [update_look()](#!/Look/update_look).\n   *\n   * DELETE /looks/{look_id} -> string\n   *\n   * @param callback streaming output function\n   * @param look_id Id of look\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_look(\n    callback: (readable: Readable) => Promise<string>,\n    look_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    look_id = encodeParam(look_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/looks/${look_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Run a Look\n   *\n   * Runs a given look's query and returns the results in the requested format.\n   *\n   * Supported formats:\n   *\n   * | result_format | Description\n   * | :-----------: | :--- |\n   * | json | Plain json\n   * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n   * | csv | Comma separated values with a header\n   * | txt | Tab separated values with a header\n   * | html | Simple html\n   * | md | Simple markdown\n   * | xlsx | MS Excel spreadsheet\n   * | sql | Returns the generated SQL rather than running the query\n   * | png | A PNG image of the visualization of the query\n   * | jpg | A JPG image of the visualization of the query\n   *\n   * GET /looks/{look_id}/run/{result_format} -> string\n   *\n   * @remarks\n   * **NOTE**: Binary content may be returned by this function.\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestRunLook\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async run_look(\n    callback: (readable: Readable) => Promise<string>,\n    request: IRequestRunLook,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.look_id = encodeParam(request.look_id)\n    request.result_format = encodeParam(request.result_format)\n    return this.authStream<string>(\n      callback,\n      'GET',\n      `/looks/${request.look_id}/run/${request.result_format}`,\n      {\n        limit: request.limit,\n        apply_formatting: request.apply_formatting,\n        apply_vis: request.apply_vis,\n        cache: request.cache,\n        image_width: request.image_width,\n        image_height: request.image_height,\n        generate_drill_links: request.generate_drill_links,\n        force_production: request.force_production,\n        cache_only: request.cache_only,\n        path_prefix: request.path_prefix,\n        rebuild_pdts: request.rebuild_pdts,\n        server_table_calcs: request.server_table_calcs,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Copy an existing look\n   *\n   * Creates a copy of an existing look, in a specified folder, and returns the copied look.\n   *\n   * `look_id` and `folder_id` are required.\n   *\n   * `look_id` and `folder_id` must already exist, and `folder_id` must be different from the current `folder_id` of the dashboard.\n   *\n   * POST /looks/{look_id}/copy -> ILookWithQuery\n   *\n   * @param callback streaming output function\n   * @param look_id Look id to copy.\n   * @param folder_id Folder id to copy to.\n   * @param options one-time API call overrides\n   *\n   */\n  async copy_look(\n    callback: (readable: Readable) => Promise<ILookWithQuery>,\n    look_id: string,\n    folder_id?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    look_id = encodeParam(look_id)\n    return this.authStream<ILookWithQuery>(\n      callback,\n      'POST',\n      `/looks/${look_id}/copy`,\n      { folder_id },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Move an existing look\n   *\n   * Moves a look to a specified folder, and returns the moved look.\n   *\n   * `look_id` and `folder_id` are required.\n   * `look_id` and `folder_id` must already exist, and `folder_id` must be different from the current `folder_id` of the dashboard.\n   *\n   * PATCH /looks/{look_id}/move -> ILookWithQuery\n   *\n   * @param callback streaming output function\n   * @param look_id Look id to move.\n   * @param folder_id Folder id to move to.\n   * @param options one-time API call overrides\n   *\n   */\n  async move_look(\n    callback: (readable: Readable) => Promise<ILookWithQuery>,\n    look_id: string,\n    folder_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    look_id = encodeParam(look_id)\n    return this.authStream<ILookWithQuery>(\n      callback,\n      'PATCH',\n      `/looks/${look_id}/move`,\n      { folder_id },\n      null,\n      options\n    )\n  }\n\n  //#endregion Look: Run and Manage Looks\n\n  //#region LookmlModel: Manage LookML Models\n\n  /**\n   * ### Get information about all lookml models.\n   *\n   * GET /lookml_models -> ILookmlModel[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllLookmlModels\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_lookml_models(\n    callback: (readable: Readable) => Promise<ILookmlModel[]>,\n    request: IRequestAllLookmlModels,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILookmlModel[]>(\n      callback,\n      'GET',\n      '/lookml_models',\n      { fields: request.fields, limit: request.limit, offset: request.offset },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a lookml model using the specified configuration.\n   *\n   * POST /lookml_models -> ILookmlModel\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteLookmlModel>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_lookml_model(\n    callback: (readable: Readable) => Promise<ILookmlModel>,\n    body: Partial<IWriteLookmlModel>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ILookmlModel>(\n      callback,\n      'POST',\n      '/lookml_models',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a lookml model.\n   *\n   * GET /lookml_models/{lookml_model_name} -> ILookmlModel\n   *\n   * @param callback streaming output function\n   * @param lookml_model_name Name of lookml model.\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async lookml_model(\n    callback: (readable: Readable) => Promise<ILookmlModel>,\n    lookml_model_name: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    lookml_model_name = encodeParam(lookml_model_name)\n    return this.authStream<ILookmlModel>(\n      callback,\n      'GET',\n      `/lookml_models/${lookml_model_name}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a lookml model using the specified configuration.\n   *\n   * PATCH /lookml_models/{lookml_model_name} -> ILookmlModel\n   *\n   * @param callback streaming output function\n   * @param lookml_model_name Name of lookml model.\n   * @param body Partial<IWriteLookmlModel>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_lookml_model(\n    callback: (readable: Readable) => Promise<ILookmlModel>,\n    lookml_model_name: string,\n    body: Partial<IWriteLookmlModel>,\n    options?: Partial<ITransportSettings>\n  ) {\n    lookml_model_name = encodeParam(lookml_model_name)\n    return this.authStream<ILookmlModel>(\n      callback,\n      'PATCH',\n      `/lookml_models/${lookml_model_name}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a lookml model.\n   *\n   * DELETE /lookml_models/{lookml_model_name} -> string\n   *\n   * @param callback streaming output function\n   * @param lookml_model_name Name of lookml model.\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_lookml_model(\n    callback: (readable: Readable) => Promise<string>,\n    lookml_model_name: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    lookml_model_name = encodeParam(lookml_model_name)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/lookml_models/${lookml_model_name}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a lookml model explore.\n   *\n   * GET /lookml_models/{lookml_model_name}/explores/{explore_name} -> ILookmlModelExplore\n   *\n   * @param callback streaming output function\n   * @param lookml_model_name Name of lookml model.\n   * @param explore_name Name of explore.\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async lookml_model_explore(\n    callback: (readable: Readable) => Promise<ILookmlModelExplore>,\n    lookml_model_name: string,\n    explore_name: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    lookml_model_name = encodeParam(lookml_model_name)\n    explore_name = encodeParam(explore_name)\n    return this.authStream<ILookmlModelExplore>(\n      callback,\n      'GET',\n      `/lookml_models/${lookml_model_name}/explores/${explore_name}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  //#endregion LookmlModel: Manage LookML Models\n\n  //#region Metadata: Connection Metadata Features\n\n  /**\n   * ### Field name suggestions for a model and view\n   *\n   * `filters` is a string hash of values, with the key as the field name and the string value as the filter expression:\n   *\n   * ```ruby\n   * {'users.age': '>=60'}\n   * ```\n   *\n   * or\n   *\n   * ```ruby\n   * {'users.age': '<30'}\n   * ```\n   *\n   * or\n   *\n   * ```ruby\n   * {'users.age': '=50'}\n   * ```\n   *\n   * GET /models/{model_name}/views/{view_name}/fields/{field_name}/suggestions -> IModelFieldSuggestions\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestModelFieldnameSuggestions\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async model_fieldname_suggestions(\n    callback: (readable: Readable) => Promise<IModelFieldSuggestions>,\n    request: IRequestModelFieldnameSuggestions,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.model_name = encodeParam(request.model_name)\n    request.view_name = encodeParam(request.view_name)\n    request.field_name = encodeParam(request.field_name)\n    return this.authStream<IModelFieldSuggestions>(\n      callback,\n      'GET',\n      `/models/${request.model_name}/views/${request.view_name}/fields/${request.field_name}/suggestions`,\n      { term: request.term, filters: request.filters },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get a single model\n   *\n   * GET /models/{model_name} -> IModel\n   *\n   * @param callback streaming output function\n   * @param model_name Name of model\n   * @param options one-time API call overrides\n   *\n   */\n  async get_model(\n    callback: (readable: Readable) => Promise<IModel>,\n    model_name: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    model_name = encodeParam(model_name)\n    return this.authStream<IModel>(\n      callback,\n      'GET',\n      `/models/${model_name}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### List databases available to this connection\n   *\n   * Certain dialects can support multiple databases per single connection.\n   * If this connection supports multiple databases, the database names will be returned in an array.\n   *\n   * Connections using dialects that do not support multiple databases will return an empty array.\n   *\n   * **Note**: [Connection Features](#!/Metadata/connection_features) can be used to determine if a connection supports\n   * multiple databases.\n   *\n   * GET /connections/{connection_name}/databases -> string[]\n   *\n   * @param callback streaming output function\n   * @param connection_name Name of connection\n   * @param options one-time API call overrides\n   *\n   */\n  async connection_databases(\n    callback: (readable: Readable) => Promise<string[]>,\n    connection_name: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    connection_name = encodeParam(connection_name)\n    return this.authStream<string[]>(\n      callback,\n      'GET',\n      `/connections/${connection_name}/databases`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Retrieve metadata features for this connection\n   *\n   * Returns a list of feature names with `true` (available) or `false` (not available)\n   *\n   * GET /connections/{connection_name}/features -> IConnectionFeatures\n   *\n   * @param callback streaming output function\n   * @param connection_name Name of connection\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async connection_features(\n    callback: (readable: Readable) => Promise<IConnectionFeatures>,\n    connection_name: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    connection_name = encodeParam(connection_name)\n    return this.authStream<IConnectionFeatures>(\n      callback,\n      'GET',\n      `/connections/${connection_name}/features`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the list of schemas and tables for a connection\n   *\n   * GET /connections/{connection_name}/schemas -> ISchema[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestConnectionSchemas\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async connection_schemas(\n    callback: (readable: Readable) => Promise<ISchema[]>,\n    request: IRequestConnectionSchemas,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.connection_name = encodeParam(request.connection_name)\n    return this.authStream<ISchema[]>(\n      callback,\n      'GET',\n      `/connections/${request.connection_name}/schemas`,\n      {\n        database: request.database,\n        cache: request.cache,\n        fields: request.fields,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the list of tables for a schema\n   *\n   * For dialects that support multiple databases, optionally identify which to use. If not provided, the default\n   * database for the connection will be used.\n   *\n   * For dialects that do **not** support multiple databases, **do not use** the database parameter\n   *\n   * GET /connections/{connection_name}/tables -> ISchemaTables[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestConnectionTables\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async connection_tables(\n    callback: (readable: Readable) => Promise<ISchemaTables[]>,\n    request: IRequestConnectionTables,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.connection_name = encodeParam(request.connection_name)\n    return this.authStream<ISchemaTables[]>(\n      callback,\n      'GET',\n      `/connections/${request.connection_name}/tables`,\n      {\n        database: request.database,\n        schema_name: request.schema_name,\n        cache: request.cache,\n        fields: request.fields,\n        table_filter: request.table_filter,\n        table_limit: request.table_limit,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the columns (and therefore also the tables) in a specific schema\n   *\n   * GET /connections/{connection_name}/columns -> ISchemaColumns[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestConnectionColumns\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async connection_columns(\n    callback: (readable: Readable) => Promise<ISchemaColumns[]>,\n    request: IRequestConnectionColumns,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.connection_name = encodeParam(request.connection_name)\n    return this.authStream<ISchemaColumns[]>(\n      callback,\n      'GET',\n      `/connections/${request.connection_name}/columns`,\n      {\n        database: request.database,\n        schema_name: request.schema_name,\n        cache: request.cache,\n        table_limit: request.table_limit,\n        table_names: request.table_names,\n        fields: request.fields,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search a connection for columns matching the specified name\n   *\n   * **Note**: `column_name` must be a valid column name. It is not a search pattern.\n   *\n   * GET /connections/{connection_name}/search_columns -> IColumnSearch[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestConnectionSearchColumns\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async connection_search_columns(\n    callback: (readable: Readable) => Promise<IColumnSearch[]>,\n    request: IRequestConnectionSearchColumns,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.connection_name = encodeParam(request.connection_name)\n    return this.authStream<IColumnSearch[]>(\n      callback,\n      'GET',\n      `/connections/${request.connection_name}/search_columns`,\n      { column_name: request.column_name, fields: request.fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Connection cost estimating\n   *\n   * Assign a `sql` statement to the body of the request. e.g., for Ruby, `{sql: 'select * from users'}`\n   *\n   * **Note**: If the connection's dialect has no support for cost estimates, an error will be returned\n   *\n   * POST /connections/{connection_name}/cost_estimate -> ICostEstimate\n   *\n   * @param callback streaming output function\n   * @param connection_name Name of connection\n   * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async connection_cost_estimate(\n    callback: (readable: Readable) => Promise<ICostEstimate>,\n    connection_name: string,\n    body: Partial<ICreateCostEstimate>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    connection_name = encodeParam(connection_name)\n    return this.authStream<ICostEstimate>(\n      callback,\n      'POST',\n      `/connections/${connection_name}/cost_estimate`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  //#endregion Metadata: Connection Metadata Features\n\n  //#region Project: Manage Projects\n\n  /**\n   * ### Generate Lockfile for All LookML Dependencies\n   *\n   *       Git must have been configured, must be in dev mode and deploy permission required\n   *\n   *       Install_all is a two step process\n   *       1. For each remote_dependency in a project the dependency manager will resolve any ambiguous ref.\n   *       2. The project will then write out a lockfile including each remote_dependency with its resolved ref.\n   *\n   * POST /projects/{project_id}/manifest/lock_all -> string\n   *\n   * @param callback streaming output function\n   * @param project_id Id of project\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async lock_all(\n    callback: (readable: Readable) => Promise<string>,\n    project_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<string>(\n      callback,\n      'POST',\n      `/projects/${project_id}/manifest/lock_all`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get All Git Branches\n   *\n   * Returns a list of git branches in the project repository\n   *\n   * GET /projects/{project_id}/git_branches -> IGitBranch[]\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param options one-time API call overrides\n   *\n   */\n  async all_git_branches(\n    callback: (readable: Readable) => Promise<IGitBranch[]>,\n    project_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IGitBranch[]>(\n      callback,\n      'GET',\n      `/projects/${project_id}/git_branches`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the Current Git Branch\n   *\n   * Returns the git branch currently checked out in the given project repository\n   *\n   * GET /projects/{project_id}/git_branch -> IGitBranch\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param options one-time API call overrides\n   *\n   */\n  async git_branch(\n    callback: (readable: Readable) => Promise<IGitBranch>,\n    project_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IGitBranch>(\n      callback,\n      'GET',\n      `/projects/${project_id}/git_branch`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Checkout and/or reset --hard an existing Git Branch\n   *\n   * Only allowed in development mode\n   *   - Call `update_session` to select the 'dev' workspace.\n   *\n   * Checkout an existing branch if name field is different from the name of the currently checked out branch.\n   *\n   * Optionally specify a branch name, tag name or commit SHA to which the branch should be reset.\n   *   **DANGER** hard reset will be force pushed to the remote. Unsaved changes and commits may be permanently lost.\n   *\n   * PUT /projects/{project_id}/git_branch -> IGitBranch\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param body Partial<IWriteGitBranch>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_git_branch(\n    callback: (readable: Readable) => Promise<IGitBranch>,\n    project_id: string,\n    body: Partial<IWriteGitBranch>,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IGitBranch>(\n      callback,\n      'PUT',\n      `/projects/${project_id}/git_branch`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Create and Checkout a Git Branch\n   *\n   * Creates and checks out a new branch in the given project repository\n   * Only allowed in development mode\n   *   - Call `update_session` to select the 'dev' workspace.\n   *\n   * Optionally specify a branch name, tag name or commit SHA as the start point in the ref field.\n   *   If no ref is specified, HEAD of the current branch will be used as the start point for the new branch.\n   *\n   * POST /projects/{project_id}/git_branch -> IGitBranch\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param body Partial<IWriteGitBranch>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_git_branch(\n    callback: (readable: Readable) => Promise<IGitBranch>,\n    project_id: string,\n    body: Partial<IWriteGitBranch>,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IGitBranch>(\n      callback,\n      'POST',\n      `/projects/${project_id}/git_branch`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get the specified Git Branch\n   *\n   * Returns the git branch specified in branch_name path param if it exists in the given project repository\n   *\n   * GET /projects/{project_id}/git_branch/{branch_name} -> IGitBranch\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param branch_name Branch Name\n   * @param options one-time API call overrides\n   *\n   */\n  async find_git_branch(\n    callback: (readable: Readable) => Promise<IGitBranch>,\n    project_id: string,\n    branch_name: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    branch_name = encodeParam(branch_name)\n    return this.authStream<IGitBranch>(\n      callback,\n      'GET',\n      `/projects/${project_id}/git_branch/${branch_name}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Delete the specified Git Branch\n   *\n   * Delete git branch specified in branch_name path param from local and remote of specified project repository\n   *\n   * DELETE /projects/{project_id}/git_branch/{branch_name} -> string\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param branch_name Branch Name\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_git_branch(\n    callback: (readable: Readable) => Promise<string>,\n    project_id: string,\n    branch_name: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    branch_name = encodeParam(branch_name)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/projects/${project_id}/git_branch/${branch_name}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Deploy a Remote Branch or Ref to Production\n   *\n   * Git must have been configured and deploy permission required.\n   *\n   * Deploy is a one/two step process\n   * 1. If this is the first deploy of this project, create the production project with git repository.\n   * 2. Pull the branch or ref into the production project.\n   *\n   * Can only specify either a branch or a ref.\n   *\n   * POST /projects/{project_id}/deploy_ref_to_production -> string\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestDeployRefToProduction\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async deploy_ref_to_production(\n    callback: (readable: Readable) => Promise<string>,\n    request: IRequestDeployRefToProduction,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.project_id = encodeParam(request.project_id)\n    return this.authStream<string>(\n      callback,\n      'POST',\n      `/projects/${request.project_id}/deploy_ref_to_production`,\n      { branch: request.branch, ref: request.ref },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Deploy LookML from this Development Mode Project to Production\n   *\n   * Git must have been configured, must be in dev mode and deploy permission required\n   *\n   * Deploy is a two / three step process:\n   *\n   * 1. Push commits in current branch of dev mode project to the production branch (origin/master).\n   *    Note a. This step is skipped in read-only projects.\n   *    Note b. If this step is unsuccessful for any reason (e.g. rejected non-fastforward because production branch has\n   *              commits not in current branch), subsequent steps will be skipped.\n   * 2. If this is the first deploy of this project, create the production project with git repository.\n   * 3. Pull the production branch into the production project.\n   *\n   * POST /projects/{project_id}/deploy_to_production -> string\n   *\n   * @param callback streaming output function\n   * @param project_id Id of project\n   * @param options one-time API call overrides\n   *\n   */\n  async deploy_to_production(\n    callback: (readable: Readable) => Promise<string>,\n    project_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<string>(\n      callback,\n      'POST',\n      `/projects/${project_id}/deploy_to_production`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Reset a project to the revision of the project that is in production.\n   *\n   * **DANGER** this will delete any changes that have not been pushed to a remote repository.\n   *\n   * POST /projects/{project_id}/reset_to_production -> string\n   *\n   * @param callback streaming output function\n   * @param project_id Id of project\n   * @param options one-time API call overrides\n   *\n   */\n  async reset_project_to_production(\n    callback: (readable: Readable) => Promise<string>,\n    project_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<string>(\n      callback,\n      'POST',\n      `/projects/${project_id}/reset_to_production`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Reset a project development branch to the revision of the project that is on the remote.\n   *\n   * **DANGER** this will delete any changes that have not been pushed to a remote repository.\n   *\n   * POST /projects/{project_id}/reset_to_remote -> string\n   *\n   * @param callback streaming output function\n   * @param project_id Id of project\n   * @param options one-time API call overrides\n   *\n   */\n  async reset_project_to_remote(\n    callback: (readable: Readable) => Promise<string>,\n    project_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<string>(\n      callback,\n      'POST',\n      `/projects/${project_id}/reset_to_remote`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get All Projects\n   *\n   * Returns all projects visible to the current user\n   *\n   * GET /projects -> IProject[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async all_projects(\n    callback: (readable: Readable) => Promise<IProject[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IProject[]>(\n      callback,\n      'GET',\n      '/projects',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create A Project\n   *\n   * dev mode required.\n   * - Call `update_session` to select the 'dev' workspace.\n   *\n   * `name` is required.\n   * `git_remote_url` is not allowed. To configure Git for the newly created project, follow the instructions in `update_project`.\n   *\n   * POST /projects -> IProject\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteProject>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_project(\n    callback: (readable: Readable) => Promise<IProject>,\n    body: Partial<IWriteProject>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IProject>(\n      callback,\n      'POST',\n      '/projects',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get A Project\n   *\n   * Returns the project with the given project id\n   *\n   * GET /projects/{project_id} -> IProject\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async project(\n    callback: (readable: Readable) => Promise<IProject>,\n    project_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IProject>(\n      callback,\n      'GET',\n      `/projects/${project_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update Project Configuration\n   *\n   * Apply changes to a project's configuration.\n   *\n   *\n   * #### Configuring Git for a Project\n   *\n   * To set up a Looker project with a remote git repository, follow these steps:\n   *\n   * 1. Call `update_session` to select the 'dev' workspace.\n   * 1. Call `create_git_deploy_key` to create a new deploy key for the project\n   * 1. Copy the deploy key text into the remote git repository's ssh key configuration\n   * 1. Call `update_project` to set project's `git_remote_url` ()and `git_service_name`, if necessary).\n   *\n   * When you modify a project's `git_remote_url`, Looker connects to the remote repository to fetch\n   * metadata. The remote git repository MUST be configured with the Looker-generated deploy\n   * key for this project prior to setting the project's `git_remote_url`.\n   *\n   * To set up a Looker project with a git repository residing on the Looker server (a 'bare' git repo):\n   *\n   * 1. Call `update_session` to select the 'dev' workspace.\n   * 1. Call `update_project` setting `git_remote_url` to null and `git_service_name` to \"bare\".\n   *\n   * PATCH /projects/{project_id} -> IProject\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param body Partial<IWriteProject>\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async update_project(\n    callback: (readable: Readable) => Promise<IProject>,\n    project_id: string,\n    body: Partial<IWriteProject>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IProject>(\n      callback,\n      'PATCH',\n      `/projects/${project_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get A Projects Manifest object\n   *\n   * Returns the project with the given project id\n   *\n   * GET /projects/{project_id}/manifest -> IManifest\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param options one-time API call overrides\n   *\n   */\n  async manifest(\n    callback: (readable: Readable) => Promise<IManifest>,\n    project_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IManifest>(\n      callback,\n      'GET',\n      `/projects/${project_id}/manifest`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Git Deploy Key\n   *\n   * Returns the ssh public key previously created for a project's git repository.\n   *\n   * GET /projects/{project_id}/git/deploy_key -> string\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param options one-time API call overrides\n   *\n   */\n  async git_deploy_key(\n    callback: (readable: Readable) => Promise<string>,\n    project_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<string>(\n      callback,\n      'GET',\n      `/projects/${project_id}/git/deploy_key`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create Git Deploy Key\n   *\n   * Create a public/private key pair for authenticating ssh git requests from Looker to a remote git repository\n   * for a particular Looker project.\n   *\n   * Returns the public key of the generated ssh key pair.\n   *\n   * Copy this public key to your remote git repository's ssh keys configuration so that the remote git service can\n   * validate and accept git requests from the Looker server.\n   *\n   * POST /projects/{project_id}/git/deploy_key -> string\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param options one-time API call overrides\n   *\n   */\n  async create_git_deploy_key(\n    callback: (readable: Readable) => Promise<string>,\n    project_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<string>(\n      callback,\n      'POST',\n      `/projects/${project_id}/git/deploy_key`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Cached Project Validation Results\n   *\n   * Returns the cached results of a previous project validation calculation, if any.\n   * Returns http status 204 No Content if no validation results exist.\n   *\n   * Validating the content of all the files in a project can be computationally intensive\n   * for large projects. Use this API to simply fetch the results of the most recent\n   * project validation rather than revalidating the entire project from scratch.\n   *\n   * A value of `\"stale\": true` in the response indicates that the project has changed since\n   * the cached validation results were computed. The cached validation results may no longer\n   * reflect the current state of the project.\n   *\n   * GET /projects/{project_id}/validate -> IProjectValidationCache\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async project_validation_results(\n    callback: (readable: Readable) => Promise<IProjectValidationCache>,\n    project_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IProjectValidationCache>(\n      callback,\n      'GET',\n      `/projects/${project_id}/validate`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Validate Project\n   *\n   * Performs lint validation of all lookml files in the project.\n   * Returns a list of errors found, if any.\n   *\n   * Validating the content of all the files in a project can be computationally intensive\n   * for large projects. For best performance, call `validate_project(project_id)` only\n   * when you really want to recompute project validation. To quickly display the results of\n   * the most recent project validation (without recomputing), use `project_validation_results(project_id)`\n   *\n   * POST /projects/{project_id}/validate -> IProjectValidation\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async validate_project(\n    callback: (readable: Readable) => Promise<IProjectValidation>,\n    project_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IProjectValidation>(\n      callback,\n      'POST',\n      `/projects/${project_id}/validate`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Project Workspace\n   *\n   * Returns information about the state of the project files in the currently selected workspace\n   *\n   * GET /projects/{project_id}/current_workspace -> IProjectWorkspace\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async project_workspace(\n    callback: (readable: Readable) => Promise<IProjectWorkspace>,\n    project_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IProjectWorkspace>(\n      callback,\n      'GET',\n      `/projects/${project_id}/current_workspace`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get All Project Files\n   *\n   * Returns a list of the files in the project\n   *\n   * GET /projects/{project_id}/files -> IProjectFile[]\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async all_project_files(\n    callback: (readable: Readable) => Promise<IProjectFile[]>,\n    project_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IProjectFile[]>(\n      callback,\n      'GET',\n      `/projects/${project_id}/files`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Project File Info\n   *\n   * Returns information about a file in the project\n   *\n   * GET /projects/{project_id}/files/file -> IProjectFile\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param file_id File Id\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async project_file(\n    callback: (readable: Readable) => Promise<IProjectFile>,\n    project_id: string,\n    file_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IProjectFile>(\n      callback,\n      'GET',\n      `/projects/${project_id}/files/file`,\n      { file_id, fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get All Git Connection Tests\n   *\n   * dev mode required.\n   *   - Call `update_session` to select the 'dev' workspace.\n   *\n   * Returns a list of tests which can be run against a project's (or the dependency project for the provided remote_url) git connection. Call [Run Git Connection Test](#!/Project/run_git_connection_test) to execute each test in sequence.\n   *\n   * Tests are ordered by increasing specificity. Tests should be run in the order returned because later tests require functionality tested by tests earlier in the test list.\n   *\n   * For example, a late-stage test for write access is meaningless if connecting to the git server (an early test) is failing.\n   *\n   * GET /projects/{project_id}/git_connection_tests -> IGitConnectionTest[]\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_git_connection_tests(\n    callback: (readable: Readable) => Promise<IGitConnectionTest[]>,\n    project_id: string,\n    remote_url?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<IGitConnectionTest[]>(\n      callback,\n      'GET',\n      `/projects/${project_id}/git_connection_tests`,\n      { remote_url },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Run a git connection test\n   *\n   * Run the named test on the git service used by this project (or the dependency project for the provided remote_url) and return the result. This\n   * is intended to help debug git connections when things do not work properly, to give\n   * more helpful information about why a git url is not working with Looker.\n   *\n   * Tests should be run in the order they are returned by [Get All Git Connection Tests](#!/Project/all_git_connection_tests).\n   *\n   * GET /projects/{project_id}/git_connection_tests/{test_id} -> IGitConnectionTestResult\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestRunGitConnectionTest\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async run_git_connection_test(\n    callback: (readable: Readable) => Promise<IGitConnectionTestResult>,\n    request: IRequestRunGitConnectionTest,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.project_id = encodeParam(request.project_id)\n    request.test_id = encodeParam(request.test_id)\n    return this.authStream<IGitConnectionTestResult>(\n      callback,\n      'GET',\n      `/projects/${request.project_id}/git_connection_tests/${request.test_id}`,\n      {\n        remote_url: request.remote_url,\n        use_production: request.use_production,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get All LookML Tests\n   *\n   * Returns a list of tests which can be run to validate a project's LookML code and/or the underlying data,\n   * optionally filtered by the file id.\n   * Call [Run LookML Test](#!/Project/run_lookml_test) to execute tests.\n   *\n   * GET /projects/{project_id}/lookml_tests -> ILookmlTest[]\n   *\n   * @param callback streaming output function\n   * @param project_id Project Id\n   * @param file_id File Id\n   * @param options one-time API call overrides\n   *\n   */\n  async all_lookml_tests(\n    callback: (readable: Readable) => Promise<ILookmlTest[]>,\n    project_id: string,\n    file_id?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    project_id = encodeParam(project_id)\n    return this.authStream<ILookmlTest[]>(\n      callback,\n      'GET',\n      `/projects/${project_id}/lookml_tests`,\n      { file_id },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Run LookML Tests\n   *\n   * Runs all tests in the project, optionally filtered by file, test, and/or model.\n   *\n   * GET /projects/{project_id}/lookml_tests/run -> ILookmlTestResult[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestRunLookmlTest\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async run_lookml_test(\n    callback: (readable: Readable) => Promise<ILookmlTestResult[]>,\n    request: IRequestRunLookmlTest,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.project_id = encodeParam(request.project_id)\n    return this.authStream<ILookmlTestResult[]>(\n      callback,\n      'GET',\n      `/projects/${request.project_id}/lookml_tests/run`,\n      { file_id: request.file_id, test: request.test, model: request.model },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Creates a tag for the most recent commit, or a specific ref is a SHA is provided\n   *\n   * This is an internal-only, undocumented route.\n   *\n   * POST /projects/{project_id}/tag -> IProject\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestTagRef\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async tag_ref(\n    callback: (readable: Readable) => Promise<IProject>,\n    request: IRequestTagRef,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.project_id = encodeParam(request.project_id)\n    return this.authStream<IProject>(\n      callback,\n      'POST',\n      `/projects/${request.project_id}/tag`,\n      {\n        commit_sha: request.commit_sha,\n        tag_name: request.tag_name,\n        tag_message: request.tag_message,\n      },\n      request.body,\n      options\n    )\n  }\n\n  /**\n   * ### Configure Repository Credential for a remote dependency\n   *\n   * Admin required.\n   *\n   * `root_project_id` is required.\n   * `credential_id` is required.\n   *\n   * PUT /projects/{root_project_id}/credential/{credential_id} -> IRepositoryCredential\n   *\n   * @param callback streaming output function\n   * @param root_project_id Root Project Id\n   * @param credential_id Credential Id\n   * @param body Partial<IWriteRepositoryCredential>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_repository_credential(\n    callback: (readable: Readable) => Promise<IRepositoryCredential>,\n    root_project_id: string,\n    credential_id: string,\n    body: Partial<IWriteRepositoryCredential>,\n    options?: Partial<ITransportSettings>\n  ) {\n    root_project_id = encodeParam(root_project_id)\n    credential_id = encodeParam(credential_id)\n    return this.authStream<IRepositoryCredential>(\n      callback,\n      'PUT',\n      `/projects/${root_project_id}/credential/${credential_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Repository Credential for a remote dependency\n   *\n   * Admin required.\n   *\n   * `root_project_id` is required.\n   * `credential_id` is required.\n   *\n   * DELETE /projects/{root_project_id}/credential/{credential_id} -> string\n   *\n   * @param callback streaming output function\n   * @param root_project_id Root Project Id\n   * @param credential_id Credential Id\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_repository_credential(\n    callback: (readable: Readable) => Promise<string>,\n    root_project_id: string,\n    credential_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    root_project_id = encodeParam(root_project_id)\n    credential_id = encodeParam(credential_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/projects/${root_project_id}/credential/${credential_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get all Repository Credentials for a project\n   *\n   * `root_project_id` is required.\n   *\n   * GET /projects/{root_project_id}/credentials -> IRepositoryCredential[]\n   *\n   * @param callback streaming output function\n   * @param root_project_id Root Project Id\n   * @param options one-time API call overrides\n   *\n   */\n  async get_all_repository_credentials(\n    callback: (readable: Readable) => Promise<IRepositoryCredential[]>,\n    root_project_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    root_project_id = encodeParam(root_project_id)\n    return this.authStream<IRepositoryCredential[]>(\n      callback,\n      'GET',\n      `/projects/${root_project_id}/credentials`,\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion Project: Manage Projects\n\n  //#region Query: Run and Manage Queries\n\n  /**\n   * ### Create an async query task\n   *\n   * Creates a query task (job) to run a previously created query asynchronously. Returns a Query Task ID.\n   *\n   * Use [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task.\n   * After the query task status reaches \"Complete\", use [query_task_results(query_task_id)](#!/Query/query_task_results) to fetch the results of the query.\n   *\n   * POST /query_tasks -> IQueryTask\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestCreateQueryTask\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async create_query_task(\n    callback: (readable: Readable) => Promise<IQueryTask>,\n    request: IRequestCreateQueryTask,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IQueryTask>(\n      callback,\n      'POST',\n      '/query_tasks',\n      {\n        limit: request.limit,\n        apply_formatting: request.apply_formatting,\n        apply_vis: request.apply_vis,\n        cache: request.cache,\n        generate_drill_links: request.generate_drill_links,\n        force_production: request.force_production,\n        cache_only: request.cache_only,\n        path_prefix: request.path_prefix,\n        rebuild_pdts: request.rebuild_pdts,\n        server_table_calcs: request.server_table_calcs,\n        image_width: request.image_width,\n        image_height: request.image_height,\n        fields: request.fields,\n      },\n      request.body,\n      options\n    )\n  }\n\n  /**\n   * ### Fetch results of multiple async queries\n   *\n   * Returns the results of multiple async queries in one request.\n   *\n   * For Query Tasks that are not completed, the response will include the execution status of the Query Task but will not include query results.\n   * Query Tasks whose results have expired will have a status of 'expired'.\n   * If the user making the API request does not have sufficient privileges to view a Query Task result, the result will have a status of 'missing'\n   *\n   * GET /query_tasks/multi_results -> IDictionary<any>\n   *\n   * @param callback streaming output function\n   * @param query_task_ids List of Query Task IDs\n   * @param options one-time API call overrides\n   *\n   */\n  async query_task_multi_results(\n    callback: (readable: Readable) => Promise<IDictionary<any>>,\n    query_task_ids: DelimArray<string>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IDictionary<any>>(\n      callback,\n      'GET',\n      '/query_tasks/multi_results',\n      { query_task_ids },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Query Task details\n   *\n   * Use this function to check the status of an async query task. After the status\n   * reaches \"Complete\", you can call [query_task_results(query_task_id)](#!/Query/query_task_results) to\n   * retrieve the results of the query.\n   *\n   * Use [create_query_task()](#!/Query/create_query_task) to create an async query task.\n   *\n   * GET /query_tasks/{query_task_id} -> IQueryTask\n   *\n   * @param callback streaming output function\n   * @param query_task_id ID of the Query Task\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async query_task(\n    callback: (readable: Readable) => Promise<IQueryTask>,\n    query_task_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    query_task_id = encodeParam(query_task_id)\n    return this.authStream<IQueryTask>(\n      callback,\n      'GET',\n      `/query_tasks/${query_task_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Async Query Results\n   *\n   * Returns the results of an async query task if the query has completed.\n   *\n   * If the query task is still running or waiting to run, this function returns 204 No Content.\n   *\n   * If the query task ID is invalid or the cached results of the query task have expired, this function returns 404 Not Found.\n   *\n   * Use [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task\n   * Call query_task_results only after the query task status reaches \"Complete\".\n   *\n   * You can also use [query_task_multi_results()](#!/Query/query_task_multi_results) retrieve the\n   * results of multiple async query tasks at the same time.\n   *\n   * #### SQL Error Handling:\n   * If the query fails due to a SQL db error, how this is communicated depends on the result_format you requested in `create_query_task()`.\n   *\n   * For `json_detail` result_format: `query_task_results()` will respond with HTTP status '200 OK' and db SQL error info\n   * will be in the `errors` property of the response object. The 'data' property will be empty.\n   *\n   * For all other result formats: `query_task_results()` will respond with HTTP status `400 Bad Request` and some db SQL error info\n   * will be in the message of the 400 error response, but not as detailed as expressed in `json_detail.errors`.\n   * These data formats can only carry row data, and error info is not row data.\n   *\n   * GET /query_tasks/{query_task_id}/results -> string\n   *\n   * @param callback streaming output function\n   * @param query_task_id ID of the Query Task\n   * @param options one-time API call overrides\n   *\n   */\n  async query_task_results(\n    callback: (readable: Readable) => Promise<string>,\n    query_task_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    query_task_id = encodeParam(query_task_id)\n    return this.authStream<string>(\n      callback,\n      'GET',\n      `/query_tasks/${query_task_id}/results`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get a previously created query by id.\n   *\n   * A Looker query object includes the various parameters that define a database query that has been run or\n   * could be run in the future. These parameters include: model, view, fields, filters, pivots, etc.\n   * Query *results* are not part of the query object.\n   *\n   * Query objects are unique and immutable. Query objects are created automatically in Looker as users explore data.\n   * Looker does not delete them; they become part of the query history. When asked to create a query for\n   * any given set of parameters, Looker will first try to find an existing query object with matching\n   * parameters and will only create a new object when an appropriate object can not be found.\n   *\n   * This 'get' method is used to get the details about a query for a given id. See the other methods here\n   * to 'create' and 'run' queries.\n   *\n   * Note that some fields like 'filter_config' and 'vis_config' etc are specific to how the Looker UI\n   * builds queries and visualizations and are not generally useful for API use. They are not required when\n   * creating new queries and can usually just be ignored.\n   *\n   * GET /queries/{query_id} -> IQuery\n   *\n   * @param callback streaming output function\n   * @param query_id Id of query\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async query(\n    callback: (readable: Readable) => Promise<IQuery>,\n    query_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    query_id = encodeParam(query_id)\n    return this.authStream<IQuery>(\n      callback,\n      'GET',\n      `/queries/${query_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the query for a given query slug.\n   *\n   * This returns the query for the 'slug' in a query share URL.\n   *\n   * The 'slug' is a randomly chosen short string that is used as an alternative to the query's id value\n   * for use in URLs etc. This method exists as a convenience to help you use the API to 'find' queries that\n   * have been created using the Looker UI.\n   *\n   * You can use the Looker explore page to build a query and then choose the 'Share' option to\n   * show the share url for the query. Share urls generally look something like 'https://looker.yourcompany/x/vwGSbfc'.\n   * The trailing 'vwGSbfc' is the share slug. You can pass that string to this api method to get details about the query.\n   * Those details include the 'id' that you can use to run the query. Or, you can copy the query body\n   * (perhaps with your own modification) and use that as the basis to make/run new queries.\n   *\n   * This will also work with slugs from Looker explore urls like\n   * 'https://looker.yourcompany/explore/ecommerce/orders?qid=aogBgL6o3cKK1jN3RoZl5s'. In this case\n   * 'aogBgL6o3cKK1jN3RoZl5s' is the slug.\n   *\n   * GET /queries/slug/{slug} -> IQuery\n   *\n   * @param callback streaming output function\n   * @param slug Slug of query\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async query_for_slug(\n    callback: (readable: Readable) => Promise<IQuery>,\n    slug: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    slug = encodeParam(slug)\n    return this.authStream<IQuery>(\n      callback,\n      'GET',\n      `/queries/slug/${slug}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a query.\n   *\n   * This allows you to create a new query that you can later run. Looker queries are immutable once created\n   * and are not deleted. If you create a query that is exactly like an existing query then the existing query\n   * will be returned and no new query will be created. Whether a new query is created or not, you can use\n   * the 'id' in the returned query with the 'run' method.\n   *\n   * The query parameters are passed as json in the body of the request.\n   *\n   * POST /queries -> IQuery\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteQuery>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_query(\n    callback: (readable: Readable) => Promise<IQuery>,\n    body: Partial<IWriteQuery>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IQuery>(\n      callback,\n      'POST',\n      '/queries',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Run a saved query.\n   *\n   * This runs a previously saved query. You can use this on a query that was generated in the Looker UI\n   * or one that you have explicitly created using the API. You can also use a query 'id' from a saved 'Look'.\n   *\n   * The 'result_format' parameter specifies the desired structure and format of the response.\n   *\n   * Supported formats:\n   *\n   * | result_format | Description\n   * | :-----------: | :--- |\n   * | json | Plain json\n   * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n   * | csv | Comma separated values with a header\n   * | txt | Tab separated values with a header\n   * | html | Simple html\n   * | md | Simple markdown\n   * | xlsx | MS Excel spreadsheet\n   * | sql | Returns the generated SQL rather than running the query\n   * | png | A PNG image of the visualization of the query\n   * | jpg | A JPG image of the visualization of the query\n   *\n   * GET /queries/{query_id}/run/{result_format} -> string\n   *\n   * @remarks\n   * **NOTE**: Binary content may be returned by this function.\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestRunQuery\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async run_query(\n    callback: (readable: Readable) => Promise<string>,\n    request: IRequestRunQuery,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.query_id = encodeParam(request.query_id)\n    request.result_format = encodeParam(request.result_format)\n    return this.authStream<string>(\n      callback,\n      'GET',\n      `/queries/${request.query_id}/run/${request.result_format}`,\n      {\n        limit: request.limit,\n        apply_formatting: request.apply_formatting,\n        apply_vis: request.apply_vis,\n        cache: request.cache,\n        image_width: request.image_width,\n        image_height: request.image_height,\n        generate_drill_links: request.generate_drill_links,\n        force_production: request.force_production,\n        cache_only: request.cache_only,\n        path_prefix: request.path_prefix,\n        rebuild_pdts: request.rebuild_pdts,\n        server_table_calcs: request.server_table_calcs,\n        source: request.source,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Run the query that is specified inline in the posted body.\n   *\n   * This allows running a query as defined in json in the posted body. This combines\n   * the two actions of posting & running a query into one step.\n   *\n   * Here is an example body in json:\n   * ```\n   * {\n   *   \"model\":\"thelook\",\n   *   \"view\":\"inventory_items\",\n   *   \"fields\":[\"category.name\",\"inventory_items.days_in_inventory_tier\",\"products.count\"],\n   *   \"filters\":{\"category.name\":\"socks\"},\n   *   \"sorts\":[\"products.count desc 0\"],\n   *   \"limit\":\"500\",\n   *   \"query_timezone\":\"America/Los_Angeles\"\n   * }\n   * ```\n   *\n   * When using the Ruby SDK this would be passed as a Ruby hash like:\n   * ```\n   * {\n   *  :model=>\"thelook\",\n   *  :view=>\"inventory_items\",\n   *  :fields=>\n   *   [\"category.name\",\n   *    \"inventory_items.days_in_inventory_tier\",\n   *    \"products.count\"],\n   *  :filters=>{:\"category.name\"=>\"socks\"},\n   *  :sorts=>[\"products.count desc 0\"],\n   *  :limit=>\"500\",\n   *  :query_timezone=>\"America/Los_Angeles\",\n   * }\n   * ```\n   *\n   * This will return the result of running the query in the format specified by the 'result_format' parameter.\n   *\n   * Supported formats:\n   *\n   * | result_format | Description\n   * | :-----------: | :--- |\n   * | json | Plain json\n   * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n   * | csv | Comma separated values with a header\n   * | txt | Tab separated values with a header\n   * | html | Simple html\n   * | md | Simple markdown\n   * | xlsx | MS Excel spreadsheet\n   * | sql | Returns the generated SQL rather than running the query\n   * | png | A PNG image of the visualization of the query\n   * | jpg | A JPG image of the visualization of the query\n   *\n   * POST /queries/run/{result_format} -> string\n   *\n   * @remarks\n   * **NOTE**: Binary content may be returned by this function.\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestRunInlineQuery\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async run_inline_query(\n    callback: (readable: Readable) => Promise<string>,\n    request: IRequestRunInlineQuery,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.result_format = encodeParam(request.result_format)\n    return this.authStream<string>(\n      callback,\n      'POST',\n      `/queries/run/${request.result_format}`,\n      {\n        limit: request.limit,\n        apply_formatting: request.apply_formatting,\n        apply_vis: request.apply_vis,\n        cache: request.cache,\n        image_width: request.image_width,\n        image_height: request.image_height,\n        generate_drill_links: request.generate_drill_links,\n        force_production: request.force_production,\n        cache_only: request.cache_only,\n        path_prefix: request.path_prefix,\n        rebuild_pdts: request.rebuild_pdts,\n        server_table_calcs: request.server_table_calcs,\n      },\n      request.body,\n      options\n    )\n  }\n\n  /**\n   * ### Run an URL encoded query.\n   *\n   * This requires the caller to encode the specifiers for the query into the URL query part using\n   * Looker-specific syntax as explained below.\n   *\n   * Generally, you would want to use one of the methods that takes the parameters as json in the POST body\n   * for creating and/or running queries. This method exists for cases where one really needs to encode the\n   * parameters into the URL of a single 'GET' request. This matches the way that the Looker UI formats\n   * 'explore' URLs etc.\n   *\n   * The parameters here are very similar to the json body formatting except that the filter syntax is\n   * tricky. Unfortunately, this format makes this method not currently callable via the 'Try it out!' button\n   * in this documentation page. But, this is callable when creating URLs manually or when using the Looker SDK.\n   *\n   * Here is an example inline query URL:\n   *\n   * ```\n   * https://looker.mycompany.com:19999/api/3.0/queries/models/thelook/views/inventory_items/run/json?fields=category.name,inventory_items.days_in_inventory_tier,products.count&f[category.name]=socks&sorts=products.count+desc+0&limit=500&query_timezone=America/Los_Angeles\n   * ```\n   *\n   * When invoking this endpoint with the Ruby SDK, pass the query parameter parts as a hash. The hash to match the above would look like:\n   *\n   * ```ruby\n   * query_params =\n   * {\n   *   fields: \"category.name,inventory_items.days_in_inventory_tier,products.count\",\n   *   :\"f[category.name]\" => \"socks\",\n   *   sorts: \"products.count desc 0\",\n   *   limit: \"500\",\n   *   query_timezone: \"America/Los_Angeles\"\n   * }\n   * response = ruby_sdk.run_url_encoded_query('thelook','inventory_items','json', query_params)\n   *\n   * ```\n   *\n   * Again, it is generally easier to use the variant of this method that passes the full query in the POST body.\n   * This method is available for cases where other alternatives won't fit the need.\n   *\n   * Supported formats:\n   *\n   * | result_format | Description\n   * | :-----------: | :--- |\n   * | json | Plain json\n   * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n   * | csv | Comma separated values with a header\n   * | txt | Tab separated values with a header\n   * | html | Simple html\n   * | md | Simple markdown\n   * | xlsx | MS Excel spreadsheet\n   * | sql | Returns the generated SQL rather than running the query\n   * | png | A PNG image of the visualization of the query\n   * | jpg | A JPG image of the visualization of the query\n   *\n   * GET /queries/models/{model_name}/views/{view_name}/run/{result_format} -> string\n   *\n   * @remarks\n   * **NOTE**: Binary content may be returned by this function.\n   *\n   * @param callback streaming output function\n   * @param model_name Model name\n   * @param view_name View name\n   * @param result_format Format of result\n   * @param options one-time API call overrides\n   *\n   */\n  async run_url_encoded_query(\n    callback: (readable: Readable) => Promise<string>,\n    model_name: string,\n    view_name: string,\n    result_format: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    model_name = encodeParam(model_name)\n    view_name = encodeParam(view_name)\n    result_format = encodeParam(result_format)\n    return this.authStream<string>(\n      callback,\n      'GET',\n      `/queries/models/${model_name}/views/${view_name}/run/${result_format}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Merge Query\n   *\n   * Returns a merge query object given its id.\n   *\n   * GET /merge_queries/{merge_query_id} -> IMergeQuery\n   *\n   * @param callback streaming output function\n   * @param merge_query_id Merge Query Id\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async merge_query(\n    callback: (readable: Readable) => Promise<IMergeQuery>,\n    merge_query_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    merge_query_id = encodeParam(merge_query_id)\n    return this.authStream<IMergeQuery>(\n      callback,\n      'GET',\n      `/merge_queries/${merge_query_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create Merge Query\n   *\n   * Creates a new merge query object.\n   *\n   * A merge query takes the results of one or more queries and combines (merges) the results\n   * according to field mapping definitions. The result is similar to a SQL left outer join.\n   *\n   * A merge query can merge results of queries from different SQL databases.\n   *\n   * The order that queries are defined in the source_queries array property is significant. The\n   * first query in the array defines the primary key into which the results of subsequent\n   * queries will be merged.\n   *\n   * Like model/view query objects, merge queries are immutable and have structural identity - if\n   * you make a request to create a new merge query that is identical to an existing merge query,\n   * the existing merge query will be returned instead of creating a duplicate. Conversely, any\n   * change to the contents of a merge query will produce a new object with a new id.\n   *\n   * POST /merge_queries -> IMergeQuery\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteMergeQuery>\n   * @param fields Requested fields\n   * @param options one-time API call overrides\n   *\n   */\n  async create_merge_query(\n    callback: (readable: Readable) => Promise<IMergeQuery>,\n    body?: Partial<IWriteMergeQuery>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IMergeQuery>(\n      callback,\n      'POST',\n      '/merge_queries',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * Get information about all running queries.\n   *\n   * GET /running_queries -> IRunningQueries[]\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async all_running_queries(\n    callback: (readable: Readable) => Promise<IRunningQueries[]>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IRunningQueries[]>(\n      callback,\n      'GET',\n      '/running_queries',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * Kill a query with a specific query_task_id.\n   *\n   * DELETE /running_queries/{query_task_id} -> string\n   *\n   * @param callback streaming output function\n   * @param query_task_id Query task id.\n   * @param options one-time API call overrides\n   *\n   */\n  async kill_query(\n    callback: (readable: Readable) => Promise<string>,\n    query_task_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    query_task_id = encodeParam(query_task_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/running_queries/${query_task_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * Get a SQL Runner query.\n   *\n   * GET /sql_queries/{slug} -> ISqlQuery\n   *\n   * @param callback streaming output function\n   * @param slug slug of query\n   * @param options one-time API call overrides\n   *\n   */\n  async sql_query(\n    callback: (readable: Readable) => Promise<ISqlQuery>,\n    slug: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    slug = encodeParam(slug)\n    return this.authStream<ISqlQuery>(\n      callback,\n      'GET',\n      `/sql_queries/${slug}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a SQL Runner Query\n   *\n   * Either the `connection_name` or `model_name` parameter MUST be provided.\n   *\n   * POST /sql_queries -> ISqlQuery\n   *\n   * @param callback streaming output function\n   * @param body Partial<ISqlQueryCreate>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_sql_query(\n    callback: (readable: Readable) => Promise<ISqlQuery>,\n    body: Partial<ISqlQueryCreate>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ISqlQuery>(\n      callback,\n      'POST',\n      '/sql_queries',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * Execute a SQL Runner query in a given result_format.\n   *\n   * POST /sql_queries/{slug}/run/{result_format} -> string\n   *\n   * @remarks\n   * **NOTE**: Binary content may be returned by this function.\n   *\n   * @param callback streaming output function\n   * @param slug slug of query\n   * @param result_format Format of result, options are: [\"inline_json\", \"json\", \"json_detail\", \"json_fe\", \"csv\", \"html\", \"md\", \"txt\", \"xlsx\", \"gsxml\", \"json_label\"]\n   * @param download Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.\n   * @param options one-time API call overrides\n   *\n   */\n  async run_sql_query(\n    callback: (readable: Readable) => Promise<string>,\n    slug: string,\n    result_format: string,\n    download?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    slug = encodeParam(slug)\n    result_format = encodeParam(result_format)\n    return this.authStream<string>(\n      callback,\n      'POST',\n      `/sql_queries/${slug}/run/${result_format}`,\n      { download },\n      null,\n      options\n    )\n  }\n\n  //#endregion Query: Run and Manage Queries\n\n  //#region RenderTask: Manage Render Tasks\n\n  /**\n   * ### Create a new task to render a look to an image.\n   *\n   * Returns a render task object.\n   * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n   * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n   *\n   * POST /render_tasks/looks/{look_id}/{result_format} -> IRenderTask\n   *\n   * @param callback streaming output function\n   * @param look_id Id of look to render\n   * @param result_format Output type: png, or jpg\n   * @param width Output width in pixels\n   * @param height Output height in pixels\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_look_render_task(\n    callback: (readable: Readable) => Promise<IRenderTask>,\n    look_id: string,\n    result_format: string,\n    width: number,\n    height: number,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    look_id = encodeParam(look_id)\n    result_format = encodeParam(result_format)\n    return this.authStream<IRenderTask>(\n      callback,\n      'POST',\n      `/render_tasks/looks/${look_id}/${result_format}`,\n      { width, height, fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a new task to render an existing query to an image.\n   *\n   * Returns a render task object.\n   * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n   * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n   *\n   * POST /render_tasks/queries/{query_id}/{result_format} -> IRenderTask\n   *\n   * @param callback streaming output function\n   * @param query_id Id of the query to render\n   * @param result_format Output type: png or jpg\n   * @param width Output width in pixels\n   * @param height Output height in pixels\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_query_render_task(\n    callback: (readable: Readable) => Promise<IRenderTask>,\n    query_id: string,\n    result_format: string,\n    width: number,\n    height: number,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    query_id = encodeParam(query_id)\n    result_format = encodeParam(result_format)\n    return this.authStream<IRenderTask>(\n      callback,\n      'POST',\n      `/render_tasks/queries/${query_id}/${result_format}`,\n      { width, height, fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a new task to render a dashboard to a document or image.\n   *\n   * Returns a render task object.\n   * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n   * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n   *\n   * POST /render_tasks/dashboards/{dashboard_id}/{result_format} -> IRenderTask\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestCreateDashboardRenderTask\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async create_dashboard_render_task(\n    callback: (readable: Readable) => Promise<IRenderTask>,\n    request: IRequestCreateDashboardRenderTask,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.dashboard_id = encodeParam(request.dashboard_id)\n    request.result_format = encodeParam(request.result_format)\n    return this.authStream<IRenderTask>(\n      callback,\n      'POST',\n      `/render_tasks/dashboards/${request.dashboard_id}/${request.result_format}`,\n      {\n        width: request.width,\n        height: request.height,\n        fields: request.fields,\n        pdf_paper_size: request.pdf_paper_size,\n        pdf_landscape: request.pdf_landscape,\n        long_tables: request.long_tables,\n      },\n      request.body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a render task.\n   *\n   * Returns a render task object.\n   * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n   * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n   *\n   * GET /render_tasks/{render_task_id} -> IRenderTask\n   *\n   * @param callback streaming output function\n   * @param render_task_id Id of render task\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async render_task(\n    callback: (readable: Readable) => Promise<IRenderTask>,\n    render_task_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    render_task_id = encodeParam(render_task_id)\n    return this.authStream<IRenderTask>(\n      callback,\n      'GET',\n      `/render_tasks/${render_task_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the document or image produced by a completed render task.\n   *\n   * Note that the PDF or image result will be a binary blob in the HTTP response, as indicated by the\n   * Content-Type in the response headers. This may require specialized (or at least different) handling than text\n   * responses such as JSON. You may need to tell your HTTP client that the response is binary so that it does not\n   * attempt to parse the binary data as text.\n   *\n   * If the render task exists but has not finished rendering the results, the response HTTP status will be\n   * **202 Accepted**, the response body will be empty, and the response will have a Retry-After header indicating\n   * that the caller should repeat the request at a later time.\n   *\n   * Returns 404 if the render task cannot be found, if the cached result has expired, or if the caller\n   * does not have permission to view the results.\n   *\n   * For detailed information about the status of the render task, use [Render Task](#!/RenderTask/render_task).\n   * Polling loops waiting for completion of a render task would be better served by polling **render_task(id)** until\n   * the task status reaches completion (or error) instead of polling **render_task_results(id)** alone.\n   *\n   * GET /render_tasks/{render_task_id}/results -> string\n   *\n   * @remarks\n   * **NOTE**: Binary content is returned by this function.\n   *\n   * @param callback streaming output function\n   * @param render_task_id Id of render task\n   * @param options one-time API call overrides\n   *\n   */\n  async render_task_results(\n    callback: (readable: Readable) => Promise<string>,\n    render_task_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    render_task_id = encodeParam(render_task_id)\n    return this.authStream<string>(\n      callback,\n      'GET',\n      `/render_tasks/${render_task_id}/results`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a new task to render a dashboard element to an image.\n   *\n   * Returns a render task object.\n   * To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\n   * Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n   *\n   * POST /render_tasks/dashboard_elements/{dashboard_element_id}/{result_format} -> IRenderTask\n   *\n   * @param callback streaming output function\n   * @param dashboard_element_id Id of dashboard element to render: UDD dashboard element would be numeric and LookML dashboard element would be model_name::dashboard_title::lookml_link_id\n   * @param result_format Output type: png or jpg\n   * @param width Output width in pixels\n   * @param height Output height in pixels\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_dashboard_element_render_task(\n    callback: (readable: Readable) => Promise<IRenderTask>,\n    dashboard_element_id: string,\n    result_format: string,\n    width: number,\n    height: number,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    dashboard_element_id = encodeParam(dashboard_element_id)\n    result_format = encodeParam(result_format)\n    return this.authStream<IRenderTask>(\n      callback,\n      'POST',\n      `/render_tasks/dashboard_elements/${dashboard_element_id}/${result_format}`,\n      { width, height, fields },\n      null,\n      options\n    )\n  }\n\n  //#endregion RenderTask: Manage Render Tasks\n\n  //#region Role: Manage Roles\n\n  /**\n   * ### Search model sets\n   * Returns all model set records that match the given search criteria.\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /model_sets/search -> IModelSet[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchModelSets\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_model_sets(\n    callback: (readable: Readable) => Promise<IModelSet[]>,\n    request: IRequestSearchModelSets,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IModelSet[]>(\n      callback,\n      'GET',\n      '/model_sets/search',\n      {\n        fields: request.fields,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        id: request.id,\n        name: request.name,\n        all_access: request.all_access,\n        built_in: request.built_in,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the model set with a specific id.\n   *\n   * GET /model_sets/{model_set_id} -> IModelSet\n   *\n   * @param callback streaming output function\n   * @param model_set_id Id of model set\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async model_set(\n    callback: (readable: Readable) => Promise<IModelSet>,\n    model_set_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    model_set_id = encodeParam(model_set_id)\n    return this.authStream<IModelSet>(\n      callback,\n      'GET',\n      `/model_sets/${model_set_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update information about the model set with a specific id.\n   *\n   * PATCH /model_sets/{model_set_id} -> IModelSet\n   *\n   * @param callback streaming output function\n   * @param model_set_id id of model set\n   * @param body Partial<IWriteModelSet>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_model_set(\n    callback: (readable: Readable) => Promise<IModelSet>,\n    model_set_id: string,\n    body: Partial<IWriteModelSet>,\n    options?: Partial<ITransportSettings>\n  ) {\n    model_set_id = encodeParam(model_set_id)\n    return this.authStream<IModelSet>(\n      callback,\n      'PATCH',\n      `/model_sets/${model_set_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete the model set with a specific id.\n   *\n   * DELETE /model_sets/{model_set_id} -> string\n   *\n   * @param callback streaming output function\n   * @param model_set_id id of model set\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_model_set(\n    callback: (readable: Readable) => Promise<string>,\n    model_set_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    model_set_id = encodeParam(model_set_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/model_sets/${model_set_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all model sets.\n   *\n   * GET /model_sets -> IModelSet[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_model_sets(\n    callback: (readable: Readable) => Promise<IModelSet[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IModelSet[]>(\n      callback,\n      'GET',\n      '/model_sets',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a model set with the specified information. Model sets are used by Roles.\n   *\n   * POST /model_sets -> IModelSet\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteModelSet>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_model_set(\n    callback: (readable: Readable) => Promise<IModelSet>,\n    body: Partial<IWriteModelSet>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IModelSet>(\n      callback,\n      'POST',\n      '/model_sets',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get all supported permissions.\n   *\n   * GET /permissions -> IPermission[]\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async all_permissions(\n    callback: (readable: Readable) => Promise<IPermission[]>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IPermission[]>(\n      callback,\n      'GET',\n      '/permissions',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search permission sets\n   * Returns all permission set records that match the given search criteria.\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /permission_sets/search -> IPermissionSet[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchPermissionSets\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_permission_sets(\n    callback: (readable: Readable) => Promise<IPermissionSet[]>,\n    request: IRequestSearchPermissionSets,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IPermissionSet[]>(\n      callback,\n      'GET',\n      '/permission_sets/search',\n      {\n        fields: request.fields,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        id: request.id,\n        name: request.name,\n        all_access: request.all_access,\n        built_in: request.built_in,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the permission set with a specific id.\n   *\n   * GET /permission_sets/{permission_set_id} -> IPermissionSet\n   *\n   * @param callback streaming output function\n   * @param permission_set_id Id of permission set\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async permission_set(\n    callback: (readable: Readable) => Promise<IPermissionSet>,\n    permission_set_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    permission_set_id = encodeParam(permission_set_id)\n    return this.authStream<IPermissionSet>(\n      callback,\n      'GET',\n      `/permission_sets/${permission_set_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update information about the permission set with a specific id.\n   *\n   * PATCH /permission_sets/{permission_set_id} -> IPermissionSet\n   *\n   * @param callback streaming output function\n   * @param permission_set_id Id of permission set\n   * @param body Partial<IWritePermissionSet>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_permission_set(\n    callback: (readable: Readable) => Promise<IPermissionSet>,\n    permission_set_id: string,\n    body: Partial<IWritePermissionSet>,\n    options?: Partial<ITransportSettings>\n  ) {\n    permission_set_id = encodeParam(permission_set_id)\n    return this.authStream<IPermissionSet>(\n      callback,\n      'PATCH',\n      `/permission_sets/${permission_set_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete the permission set with a specific id.\n   *\n   * DELETE /permission_sets/{permission_set_id} -> string\n   *\n   * @param callback streaming output function\n   * @param permission_set_id Id of permission set\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_permission_set(\n    callback: (readable: Readable) => Promise<string>,\n    permission_set_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    permission_set_id = encodeParam(permission_set_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/permission_sets/${permission_set_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all permission sets.\n   *\n   * GET /permission_sets -> IPermissionSet[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_permission_sets(\n    callback: (readable: Readable) => Promise<IPermissionSet[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IPermissionSet[]>(\n      callback,\n      'GET',\n      '/permission_sets',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a permission set with the specified information. Permission sets are used by Roles.\n   *\n   * POST /permission_sets -> IPermissionSet\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWritePermissionSet>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_permission_set(\n    callback: (readable: Readable) => Promise<IPermissionSet>,\n    body: Partial<IWritePermissionSet>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IPermissionSet>(\n      callback,\n      'POST',\n      '/permission_sets',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all roles.\n   *\n   * GET /roles -> IRole[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllRoles\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_roles(\n    callback: (readable: Readable) => Promise<IRole[]>,\n    request: IRequestAllRoles,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IRole[]>(\n      callback,\n      'GET',\n      '/roles',\n      { fields: request.fields, ids: request.ids },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a role with the specified information.\n   *\n   * POST /roles -> IRole\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteRole>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_role(\n    callback: (readable: Readable) => Promise<IRole>,\n    body: Partial<IWriteRole>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IRole>(\n      callback,\n      'POST',\n      '/roles',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Search roles\n   *\n   * Returns all role records that match the given search criteria.\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /roles/search -> IRole[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchRoles\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_roles(\n    callback: (readable: Readable) => Promise<IRole[]>,\n    request: IRequestSearchRoles,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IRole[]>(\n      callback,\n      'GET',\n      '/roles/search',\n      {\n        fields: request.fields,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        id: request.id,\n        name: request.name,\n        built_in: request.built_in,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search roles include user count\n   *\n   * Returns all role records that match the given search criteria, and attaches\n   * associated user counts.\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /roles/search/with_user_count -> IRoleSearch[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchRolesWithUserCount\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_roles_with_user_count(\n    callback: (readable: Readable) => Promise<IRoleSearch[]>,\n    request: IRequestSearchRolesWithUserCount,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IRoleSearch[]>(\n      callback,\n      'GET',\n      '/roles/search/with_user_count',\n      {\n        fields: request.fields,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        id: request.id,\n        name: request.name,\n        built_in: request.built_in,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the role with a specific id.\n   *\n   * GET /roles/{role_id} -> IRole\n   *\n   * @param callback streaming output function\n   * @param role_id id of role\n   * @param options one-time API call overrides\n   *\n   */\n  async role(\n    callback: (readable: Readable) => Promise<IRole>,\n    role_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    role_id = encodeParam(role_id)\n    return this.authStream<IRole>(\n      callback,\n      'GET',\n      `/roles/${role_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update information about the role with a specific id.\n   *\n   * PATCH /roles/{role_id} -> IRole\n   *\n   * @param callback streaming output function\n   * @param role_id id of role\n   * @param body Partial<IWriteRole>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_role(\n    callback: (readable: Readable) => Promise<IRole>,\n    role_id: string,\n    body: Partial<IWriteRole>,\n    options?: Partial<ITransportSettings>\n  ) {\n    role_id = encodeParam(role_id)\n    return this.authStream<IRole>(\n      callback,\n      'PATCH',\n      `/roles/${role_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete the role with a specific id.\n   *\n   * DELETE /roles/{role_id} -> string\n   *\n   * @param callback streaming output function\n   * @param role_id id of role\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_role(\n    callback: (readable: Readable) => Promise<string>,\n    role_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    role_id = encodeParam(role_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/roles/${role_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all the groups with the role that has a specific id.\n   *\n   * GET /roles/{role_id}/groups -> IGroup[]\n   *\n   * @param callback streaming output function\n   * @param role_id id of role\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async role_groups(\n    callback: (readable: Readable) => Promise<IGroup[]>,\n    role_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    role_id = encodeParam(role_id)\n    return this.authStream<IGroup[]>(\n      callback,\n      'GET',\n      `/roles/${role_id}/groups`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Set all groups for a role, removing all existing group associations from that role.\n   *\n   * PUT /roles/{role_id}/groups -> IGroup[]\n   *\n   * @param callback streaming output function\n   * @param role_id id of role\n   * @param body Partial<string[]>\n   * @param options one-time API call overrides\n   *\n   */\n  async set_role_groups(\n    callback: (readable: Readable) => Promise<IGroup[]>,\n    role_id: string,\n    body: Partial<string[]>,\n    options?: Partial<ITransportSettings>\n  ) {\n    role_id = encodeParam(role_id)\n    return this.authStream<IGroup[]>(\n      callback,\n      'PUT',\n      `/roles/${role_id}/groups`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all the users with the role that has a specific id.\n   *\n   * GET /roles/{role_id}/users -> IUser[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestRoleUsers\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async role_users(\n    callback: (readable: Readable) => Promise<IUser[]>,\n    request: IRequestRoleUsers,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.role_id = encodeParam(request.role_id)\n    return this.authStream<IUser[]>(\n      callback,\n      'GET',\n      `/roles/${request.role_id}/users`,\n      {\n        fields: request.fields,\n        direct_association_only: request.direct_association_only,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Set all the users of the role with a specific id.\n   *\n   * PUT /roles/{role_id}/users -> IUser[]\n   *\n   * @param callback streaming output function\n   * @param role_id id of role\n   * @param body Partial<string[]>\n   * @param options one-time API call overrides\n   *\n   */\n  async set_role_users(\n    callback: (readable: Readable) => Promise<IUser[]>,\n    role_id: string,\n    body: Partial<string[]>,\n    options?: Partial<ITransportSettings>\n  ) {\n    role_id = encodeParam(role_id)\n    return this.authStream<IUser[]>(\n      callback,\n      'PUT',\n      `/roles/${role_id}/users`,\n      null,\n      body,\n      options\n    )\n  }\n\n  //#endregion Role: Manage Roles\n\n  //#region ScheduledPlan: Manage Scheduled Plans\n\n  /**\n   * ### Get Scheduled Plans for a Space\n   *\n   * Returns scheduled plans owned by the caller for a given space id.\n   *\n   * GET /scheduled_plans/space/{space_id} -> IScheduledPlan[]\n   *\n   * @param callback streaming output function\n   * @param space_id Space Id\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async scheduled_plans_for_space(\n    callback: (readable: Readable) => Promise<IScheduledPlan[]>,\n    space_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    space_id = encodeParam(space_id)\n    return this.authStream<IScheduledPlan[]>(\n      callback,\n      'GET',\n      `/scheduled_plans/space/${space_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Information About a Scheduled Plan\n   *\n   * Admins can fetch information about other users' Scheduled Plans.\n   *\n   * GET /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan\n   *\n   * @param callback streaming output function\n   * @param scheduled_plan_id Scheduled Plan Id\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async scheduled_plan(\n    callback: (readable: Readable) => Promise<IScheduledPlan>,\n    scheduled_plan_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    scheduled_plan_id = encodeParam(scheduled_plan_id)\n    return this.authStream<IScheduledPlan>(\n      callback,\n      'GET',\n      `/scheduled_plans/${scheduled_plan_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a Scheduled Plan\n   *\n   * Admins can update other users' Scheduled Plans.\n   *\n   * Note: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations\n   * currently defined for the scheduled plan.\n   *\n   * For Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan\n   * specifying only B in the destinations, then destinations A and C will be deleted by the update.\n   *\n   * Updating a scheduled plan to assign null or an empty array to the scheduled_plan_destinations property is an error, as a scheduled plan must always have at least one destination.\n   *\n   * If you omit the scheduled_plan_destinations property from the object passed to update, then the destinations\n   * defined on the original scheduled plan will remain unchanged.\n   *\n   * #### Email Permissions:\n   *\n   * For details about permissions required to schedule delivery to email and the safeguards\n   * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n   *\n   *\n   * #### Scheduled Plan Destination Formats\n   *\n   * Scheduled plan destinations must specify the data format to produce and send to the destination.\n   *\n   * Formats:\n   *\n   * | format | Description\n   * | :-----------: | :--- |\n   * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n   * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n   * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n   * | csv | Comma separated values with a header\n   * | txt | Tab separated values with a header\n   * | html | Simple html\n   * | xlsx | MS Excel spreadsheet\n   * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n   * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n   * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n   * ||\n   *\n   * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n   *\n   * PATCH /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan\n   *\n   * @param callback streaming output function\n   * @param scheduled_plan_id Scheduled Plan Id\n   * @param body Partial<IWriteScheduledPlan>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_scheduled_plan(\n    callback: (readable: Readable) => Promise<IScheduledPlan>,\n    scheduled_plan_id: string,\n    body: Partial<IWriteScheduledPlan>,\n    options?: Partial<ITransportSettings>\n  ) {\n    scheduled_plan_id = encodeParam(scheduled_plan_id)\n    return this.authStream<IScheduledPlan>(\n      callback,\n      'PATCH',\n      `/scheduled_plans/${scheduled_plan_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a Scheduled Plan\n   *\n   * Normal users can only delete their own scheduled plans.\n   * Admins can delete other users' scheduled plans.\n   * This delete cannot be undone.\n   *\n   * DELETE /scheduled_plans/{scheduled_plan_id} -> string\n   *\n   * @param callback streaming output function\n   * @param scheduled_plan_id Scheduled Plan Id\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_scheduled_plan(\n    callback: (readable: Readable) => Promise<string>,\n    scheduled_plan_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    scheduled_plan_id = encodeParam(scheduled_plan_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/scheduled_plans/${scheduled_plan_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### List All Scheduled Plans\n   *\n   * Returns all scheduled plans which belong to the caller or given user.\n   *\n   * If no user_id is provided, this function returns the scheduled plans owned by the caller.\n   *\n   *\n   * To list all schedules for all users, pass `all_users=true`.\n   *\n   *\n   * The caller must have `see_schedules` permission to see other users' scheduled plans.\n   *\n   * GET /scheduled_plans -> IScheduledPlan[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllScheduledPlans\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_scheduled_plans(\n    callback: (readable: Readable) => Promise<IScheduledPlan[]>,\n    request: IRequestAllScheduledPlans,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IScheduledPlan[]>(\n      callback,\n      'GET',\n      '/scheduled_plans',\n      {\n        user_id: request.user_id,\n        fields: request.fields,\n        all_users: request.all_users,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a Scheduled Plan\n   *\n   * Create a scheduled plan to render a Look or Dashboard on a recurring schedule.\n   *\n   * To create a scheduled plan, you MUST provide values for the following fields:\n   * `name`\n   * and\n   * `look_id`, `dashboard_id`, `lookml_dashboard_id`, or `query_id`\n   * and\n   * `cron_tab` or `datagroup`\n   * and\n   * at least one scheduled_plan_destination\n   *\n   * A scheduled plan MUST have at least one scheduled_plan_destination defined.\n   *\n   * When `look_id` is set, `require_no_results`, `require_results`, and `require_change` are all required.\n   *\n   * If `create_scheduled_plan` fails with a 422 error, be sure to look at the error messages in the response which will explain exactly what fields are missing or values that are incompatible.\n   *\n   * The queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.\n   *\n   * When `run_as_recipient` is `false` or not specified, the queries that provide the data for the\n   * look or dashboard are run in the context of user account that owns the scheduled plan.\n   *\n   * When `run_as_recipient` is `true` and all the email recipients are Looker user accounts, the\n   * queries are run in the context of each recipient, so different recipients may see different\n   * data from the same scheduled render of a look or dashboard. For more details, see [Run As Recipient](https://docs.looker.com/r/admin/run-as-recipient).\n   *\n   * Admins can create and modify scheduled plans on behalf of other users by specifying a user id.\n   * Non-admin users may not create or modify scheduled plans by or for other users.\n   *\n   * #### Email Permissions:\n   *\n   * For details about permissions required to schedule delivery to email and the safeguards\n   * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n   *\n   *\n   * #### Scheduled Plan Destination Formats\n   *\n   * Scheduled plan destinations must specify the data format to produce and send to the destination.\n   *\n   * Formats:\n   *\n   * | format | Description\n   * | :-----------: | :--- |\n   * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n   * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n   * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n   * | csv | Comma separated values with a header\n   * | txt | Tab separated values with a header\n   * | html | Simple html\n   * | xlsx | MS Excel spreadsheet\n   * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n   * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n   * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n   * ||\n   *\n   * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n   *\n   * POST /scheduled_plans -> IScheduledPlan\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteScheduledPlan>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_scheduled_plan(\n    callback: (readable: Readable) => Promise<IScheduledPlan>,\n    body: Partial<IWriteScheduledPlan>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IScheduledPlan>(\n      callback,\n      'POST',\n      '/scheduled_plans',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Run a Scheduled Plan Immediately\n   *\n   * Create a scheduled plan that runs only once, and immediately.\n   *\n   * This can be useful for testing a Scheduled Plan before committing to a production schedule.\n   *\n   * Admins can create scheduled plans on behalf of other users by specifying a user id.\n   *\n   * This API is rate limited to prevent it from being used for relay spam or DoS attacks\n   *\n   * #### Email Permissions:\n   *\n   * For details about permissions required to schedule delivery to email and the safeguards\n   * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n   *\n   *\n   * #### Scheduled Plan Destination Formats\n   *\n   * Scheduled plan destinations must specify the data format to produce and send to the destination.\n   *\n   * Formats:\n   *\n   * | format | Description\n   * | :-----------: | :--- |\n   * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n   * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n   * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n   * | csv | Comma separated values with a header\n   * | txt | Tab separated values with a header\n   * | html | Simple html\n   * | xlsx | MS Excel spreadsheet\n   * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n   * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n   * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n   * ||\n   *\n   * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n   *\n   * POST /scheduled_plans/run_once -> IScheduledPlan\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteScheduledPlan>\n   * @param options one-time API call overrides\n   *\n   */\n  async scheduled_plan_run_once(\n    callback: (readable: Readable) => Promise<IScheduledPlan>,\n    body: Partial<IWriteScheduledPlan>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IScheduledPlan>(\n      callback,\n      'POST',\n      '/scheduled_plans/run_once',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get Scheduled Plans for a Look\n   *\n   * Returns all scheduled plans for a look which belong to the caller or given user.\n   *\n   * If no user_id is provided, this function returns the scheduled plans owned by the caller.\n   *\n   *\n   * To list all schedules for all users, pass `all_users=true`.\n   *\n   *\n   * The caller must have `see_schedules` permission to see other users' scheduled plans.\n   *\n   * GET /scheduled_plans/look/{look_id} -> IScheduledPlan[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestScheduledPlansForLook\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async scheduled_plans_for_look(\n    callback: (readable: Readable) => Promise<IScheduledPlan[]>,\n    request: IRequestScheduledPlansForLook,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.look_id = encodeParam(request.look_id)\n    return this.authStream<IScheduledPlan[]>(\n      callback,\n      'GET',\n      `/scheduled_plans/look/${request.look_id}`,\n      {\n        user_id: request.user_id,\n        fields: request.fields,\n        all_users: request.all_users,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Scheduled Plans for a Dashboard\n   *\n   * Returns all scheduled plans for a dashboard which belong to the caller or given user.\n   *\n   * If no user_id is provided, this function returns the scheduled plans owned by the caller.\n   *\n   *\n   * To list all schedules for all users, pass `all_users=true`.\n   *\n   *\n   * The caller must have `see_schedules` permission to see other users' scheduled plans.\n   *\n   * GET /scheduled_plans/dashboard/{dashboard_id} -> IScheduledPlan[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestScheduledPlansForDashboard\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async scheduled_plans_for_dashboard(\n    callback: (readable: Readable) => Promise<IScheduledPlan[]>,\n    request: IRequestScheduledPlansForDashboard,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.dashboard_id = encodeParam(request.dashboard_id)\n    return this.authStream<IScheduledPlan[]>(\n      callback,\n      'GET',\n      `/scheduled_plans/dashboard/${request.dashboard_id}`,\n      {\n        user_id: request.user_id,\n        all_users: request.all_users,\n        fields: request.fields,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get Scheduled Plans for a LookML Dashboard\n   *\n   * Returns all scheduled plans for a LookML Dashboard which belong to the caller or given user.\n   *\n   * If no user_id is provided, this function returns the scheduled plans owned by the caller.\n   *\n   *\n   * To list all schedules for all users, pass `all_users=true`.\n   *\n   *\n   * The caller must have `see_schedules` permission to see other users' scheduled plans.\n   *\n   * GET /scheduled_plans/lookml_dashboard/{lookml_dashboard_id} -> IScheduledPlan[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestScheduledPlansForLookmlDashboard\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async scheduled_plans_for_lookml_dashboard(\n    callback: (readable: Readable) => Promise<IScheduledPlan[]>,\n    request: IRequestScheduledPlansForLookmlDashboard,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.lookml_dashboard_id = encodeParam(request.lookml_dashboard_id)\n    return this.authStream<IScheduledPlan[]>(\n      callback,\n      'GET',\n      `/scheduled_plans/lookml_dashboard/${request.lookml_dashboard_id}`,\n      {\n        user_id: request.user_id,\n        fields: request.fields,\n        all_users: request.all_users,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Run a Scheduled Plan By Id Immediately\n   * This function creates a run-once schedule plan based on an existing scheduled plan,\n   * applies modifications (if any) to the new scheduled plan, and runs the new schedule plan immediately.\n   * This can be useful for testing modifications to an existing scheduled plan before committing to a production schedule.\n   *\n   * This function internally performs the following operations:\n   *\n   * 1. Copies the properties of the existing scheduled plan into a new scheduled plan\n   * 2. Copies any properties passed in the JSON body of this request into the new scheduled plan (replacing the original values)\n   * 3. Creates the new scheduled plan\n   * 4. Runs the new scheduled plan\n   *\n   * The original scheduled plan is not modified by this operation.\n   * Admins can create, modify, and run scheduled plans on behalf of other users by specifying a user id.\n   * Non-admins can only create, modify, and run their own scheduled plans.\n   *\n   * #### Email Permissions:\n   *\n   * For details about permissions required to schedule delivery to email and the safeguards\n   * Looker offers to protect against sending to unauthorized email destinations, see [Email Domain Whitelist for Scheduled Looks](https://docs.looker.com/r/api/embed-permissions).\n   *\n   *\n   * #### Scheduled Plan Destination Formats\n   *\n   * Scheduled plan destinations must specify the data format to produce and send to the destination.\n   *\n   * Formats:\n   *\n   * | format | Description\n   * | :-----------: | :--- |\n   * | json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n   * | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n   * | inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n   * | csv | Comma separated values with a header\n   * | txt | Tab separated values with a header\n   * | html | Simple html\n   * | xlsx | MS Excel spreadsheet\n   * | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n   * | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n   * | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n   * ||\n   *\n   * Valid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n   *\n   *\n   *\n   * This API is rate limited to prevent it from being used for relay spam or DoS attacks\n   *\n   * POST /scheduled_plans/{scheduled_plan_id}/run_once -> IScheduledPlan\n   *\n   * @param callback streaming output function\n   * @param scheduled_plan_id Id of schedule plan to copy and run\n   * @param body Partial<IWriteScheduledPlan>\n   * @param options one-time API call overrides\n   *\n   */\n  async scheduled_plan_run_once_by_id(\n    callback: (readable: Readable) => Promise<IScheduledPlan>,\n    scheduled_plan_id: string,\n    body?: Partial<IWriteScheduledPlan>,\n    options?: Partial<ITransportSettings>\n  ) {\n    scheduled_plan_id = encodeParam(scheduled_plan_id)\n    return this.authStream<IScheduledPlan>(\n      callback,\n      'POST',\n      `/scheduled_plans/${scheduled_plan_id}/run_once`,\n      null,\n      body,\n      options\n    )\n  }\n\n  //#endregion ScheduledPlan: Manage Scheduled Plans\n\n  //#region Session: Session Information\n\n  /**\n   * ### Get API Session\n   *\n   * Returns information about the current API session, such as which workspace is selected for the session.\n   *\n   * GET /session -> IApiSession\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async session(\n    callback: (readable: Readable) => Promise<IApiSession>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IApiSession>(\n      callback,\n      'GET',\n      '/session',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update API Session\n   *\n   * #### API Session Workspace\n   *\n   * You can use this endpoint to change the active workspace for the current API session.\n   *\n   * Only one workspace can be active in a session. The active workspace can be changed\n   * any number of times in a session.\n   *\n   * The default workspace for API sessions is the \"production\" workspace.\n   *\n   * All Looker APIs that use projects or lookml models (such as running queries) will\n   * use the version of project and model files defined by this workspace for the lifetime of the\n   * current API session or until the session workspace is changed again.\n   *\n   * An API session has the same lifetime as the access_token used to authenticate API requests. Each successful\n   * API login generates a new access_token and a new API session.\n   *\n   * If your Looker API client application needs to work in a dev workspace across multiple\n   * API sessions, be sure to select the dev workspace after each login.\n   *\n   * PATCH /session -> IApiSession\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteApiSession>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_session(\n    callback: (readable: Readable) => Promise<IApiSession>,\n    body: Partial<IWriteApiSession>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IApiSession>(\n      callback,\n      'PATCH',\n      '/session',\n      null,\n      body,\n      options\n    )\n  }\n\n  //#endregion Session: Session Information\n\n  //#region Theme: Manage Themes\n\n  /**\n   * ### Get an array of all existing themes\n   *\n   * Get a **single theme** by id with [Theme](#!/Theme/theme)\n   *\n   * This method returns an array of all existing themes. The active time for the theme is not considered.\n   *\n   * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n   *\n   * GET /themes -> ITheme[]\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_themes(\n    callback: (readable: Readable) => Promise<ITheme[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ITheme[]>(\n      callback,\n      'GET',\n      '/themes',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a theme\n   *\n   * Creates a new theme object, returning the theme details, including the created id.\n   *\n   * If `settings` are not specified, the default theme settings will be copied into the new theme.\n   *\n   * The theme `name` can only contain alphanumeric characters or underscores. Theme names should not contain any confidential information, such as customer names.\n   *\n   * **Update** an existing theme with [Update Theme](#!/Theme/update_theme)\n   *\n   * **Permanently delete** an existing theme with [Delete Theme](#!/Theme/delete_theme)\n   *\n   * For more information, see [Creating and Applying Themes](https://docs.looker.com/r/admin/themes).\n   *\n   * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n   *\n   * POST /themes -> ITheme\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteTheme>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_theme(\n    callback: (readable: Readable) => Promise<ITheme>,\n    body: Partial<IWriteTheme>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ITheme>(\n      callback,\n      'POST',\n      '/themes',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Search all themes for matching criteria.\n   *\n   * Returns an **array of theme objects** that match the specified search criteria.\n   *\n   * | Search Parameters | Description\n   * | :-------------------: | :------ |\n   * | `begin_at` only | Find themes active at or after `begin_at`\n   * | `end_at` only | Find themes active at or before `end_at`\n   * | both set | Find themes with an active inclusive period between `begin_at` and `end_at`\n   *\n   * Note: Range matching requires boolean AND logic.\n   * When using `begin_at` and `end_at` together, do not use `filter_or`=TRUE\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   *\n   * Get a **single theme** by id with [Theme](#!/Theme/theme)\n   *\n   * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n   *\n   * GET /themes/search -> ITheme[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchThemes\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_themes(\n    callback: (readable: Readable) => Promise<ITheme[]>,\n    request: IRequestSearchThemes,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ITheme[]>(\n      callback,\n      'GET',\n      '/themes/search',\n      {\n        id: request.id,\n        name: request.name,\n        begin_at: request.begin_at,\n        end_at: request.end_at,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        fields: request.fields,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the default theme\n   *\n   * Returns the active theme object set as the default.\n   *\n   * The **default** theme name can be set in the UI on the Admin|Theme UI page\n   *\n   * The optional `ts` parameter can specify a different timestamp than \"now.\" If specified, it returns the default theme at the time indicated.\n   *\n   * GET /themes/default -> ITheme\n   *\n   * @param callback streaming output function\n   * @param ts Timestamp representing the target datetime for the active period. Defaults to 'now'\n   * @param options one-time API call overrides\n   *\n   */\n  async default_theme(\n    callback: (readable: Readable) => Promise<ITheme>,\n    ts?: Date,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ITheme>(\n      callback,\n      'GET',\n      '/themes/default',\n      { ts },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Set the global default theme by theme name\n   *\n   * Only Admin users can call this function.\n   *\n   * Only an active theme with no expiration (`end_at` not set) can be assigned as the default theme. As long as a theme has an active record with no expiration, it can be set as the default.\n   *\n   * [Create Theme](#!/Theme/create) has detailed information on rules for default and active themes\n   *\n   * Returns the new specified default theme object.\n   *\n   * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n   *\n   * PUT /themes/default -> ITheme\n   *\n   * @param callback streaming output function\n   * @param name Name of theme to set as default\n   * @param options one-time API call overrides\n   *\n   */\n  async set_default_theme(\n    callback: (readable: Readable) => Promise<ITheme>,\n    name: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ITheme>(\n      callback,\n      'PUT',\n      '/themes/default',\n      { name },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get active themes\n   *\n   * Returns an array of active themes.\n   *\n   * If the `name` parameter is specified, it will return an array with one theme if it's active and found.\n   *\n   * The optional `ts` parameter can specify a different timestamp than \"now.\"\n   *\n   * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n   *\n   * GET /themes/active -> ITheme[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestActiveThemes\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async active_themes(\n    callback: (readable: Readable) => Promise<ITheme[]>,\n    request: IRequestActiveThemes,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ITheme[]>(\n      callback,\n      'GET',\n      '/themes/active',\n      { name: request.name, ts: request.ts, fields: request.fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get the named theme if it's active. Otherwise, return the default theme\n   *\n   * The optional `ts` parameter can specify a different timestamp than \"now.\"\n   * Note: API users with `show` ability can call this function\n   *\n   * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n   *\n   * GET /themes/theme_or_default -> ITheme\n   *\n   * @param callback streaming output function\n   * @param name Name of theme\n   * @param ts Timestamp representing the target datetime for the active period. Defaults to 'now'\n   * @param options one-time API call overrides\n   *\n   */\n  async theme_or_default(\n    callback: (readable: Readable) => Promise<ITheme>,\n    name: string,\n    ts?: Date,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ITheme>(\n      callback,\n      'GET',\n      '/themes/theme_or_default',\n      { name, ts },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Validate a theme with the specified information\n   *\n   * Validates all values set for the theme, returning any errors encountered, or 200 OK if valid\n   *\n   * See [Create Theme](#!/Theme/create_theme) for constraints\n   *\n   * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n   *\n   * POST /themes/validate -> IValidationError\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteTheme>\n   * @param options one-time API call overrides\n   *\n   */\n  async validate_theme(\n    callback: (readable: Readable) => Promise<IValidationError>,\n    body: Partial<IWriteTheme>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IValidationError>(\n      callback,\n      'POST',\n      '/themes/validate',\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get a theme by ID\n   *\n   * Use this to retrieve a specific theme, whether or not it's currently active.\n   *\n   * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n   *\n   * GET /themes/{theme_id} -> ITheme\n   *\n   * @param callback streaming output function\n   * @param theme_id Id of theme\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async theme(\n    callback: (readable: Readable) => Promise<ITheme>,\n    theme_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    theme_id = encodeParam(theme_id)\n    return this.authStream<ITheme>(\n      callback,\n      'GET',\n      `/themes/${theme_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update the theme by id.\n   *\n   * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n   *\n   * PATCH /themes/{theme_id} -> ITheme\n   *\n   * @param callback streaming output function\n   * @param theme_id Id of theme\n   * @param body Partial<IWriteTheme>\n   * @param options one-time API call overrides\n   *\n   */\n  async update_theme(\n    callback: (readable: Readable) => Promise<ITheme>,\n    theme_id: string,\n    body: Partial<IWriteTheme>,\n    options?: Partial<ITransportSettings>\n  ) {\n    theme_id = encodeParam(theme_id)\n    return this.authStream<ITheme>(\n      callback,\n      'PATCH',\n      `/themes/${theme_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a specific theme by id\n   *\n   * This operation permanently deletes the identified theme from the database.\n   *\n   * Because multiple themes can have the same name (with different activation time spans) themes can only be deleted by ID.\n   *\n   * All IDs associated with a theme name can be retrieved by searching for the theme name with [Theme Search](#!/Theme/search).\n   *\n   * **Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n   *\n   * DELETE /themes/{theme_id} -> string\n   *\n   * @param callback streaming output function\n   * @param theme_id Id of theme\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_theme(\n    callback: (readable: Readable) => Promise<string>,\n    theme_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    theme_id = encodeParam(theme_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/themes/${theme_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion Theme: Manage Themes\n\n  //#region User: Manage Users\n\n  /**\n   * ### Search email credentials\n   *\n   * Returns all credentials_email records that match the given search criteria.\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   * GET /credentials_email/search -> ICredentialsEmailSearch[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchCredentialsEmail\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_credentials_email(\n    callback: (readable: Readable) => Promise<ICredentialsEmailSearch[]>,\n    request: IRequestSearchCredentialsEmail,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<ICredentialsEmailSearch[]>(\n      callback,\n      'GET',\n      '/credentials_email/search',\n      {\n        fields: request.fields,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        id: request.id,\n        email: request.email,\n        emails: request.emails,\n        filter_or: request.filter_or,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the current user; i.e. the user account currently calling the API.\n   *\n   * GET /user -> IUser\n   *\n   * @param callback streaming output function\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async me(\n    callback: (readable: Readable) => Promise<IUser>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IUser>(\n      callback,\n      'GET',\n      '/user',\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about all users.\n   *\n   * GET /users -> IUser[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllUsers\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_users(\n    callback: (readable: Readable) => Promise<IUser[]>,\n    request: IRequestAllUsers,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IUser[]>(\n      callback,\n      'GET',\n      '/users',\n      {\n        fields: request.fields,\n        page: request.page,\n        per_page: request.per_page,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        ids: request.ids,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a user with the specified information.\n   *\n   * POST /users -> IUser\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteUser>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_user(\n    callback: (readable: Readable) => Promise<IUser>,\n    body?: Partial<IWriteUser>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IUser>(\n      callback,\n      'POST',\n      '/users',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Search users\n   *\n   * Returns all<sup>*</sup> user records that match the given search criteria.\n   *\n   * If multiple search params are given and `filter_or` is FALSE or not specified,\n   * search params are combined in a logical AND operation.\n   * Only rows that match *all* search param criteria will be returned.\n   *\n   * If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\n   * Results will include rows that match **any** of the search criteria.\n   *\n   * String search params use case-insensitive matching.\n   * String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\n   * example=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\n   * example=\"D_m%\" will match \"Damage\" and \"dump\"\n   *\n   * Integer search params can accept a single value or a comma separated list of values. The multiple\n   * values will be combined under a logical OR operation - results will match at least one of\n   * the given values.\n   *\n   * Most search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\n   * or exclude (respectively) rows where the column is null.\n   *\n   * Boolean search params accept only \"true\" and \"false\" as values.\n   *\n   *\n   * (<sup>*</sup>) Results are always filtered to the level of information the caller is permitted to view.\n   * Looker admins can see all user details; normal users in an open system can see\n   * names of other users but no details; normal users in a closed system can only see\n   * names of other users who are members of the same group as the user.\n   *\n   * GET /users/search -> IUser[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchUsers\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_users(\n    callback: (readable: Readable) => Promise<IUser[]>,\n    request: IRequestSearchUsers,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IUser[]>(\n      callback,\n      'GET',\n      '/users/search',\n      {\n        fields: request.fields,\n        page: request.page,\n        per_page: request.per_page,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        id: request.id,\n        first_name: request.first_name,\n        last_name: request.last_name,\n        verified_looker_employee: request.verified_looker_employee,\n        embed_user: request.embed_user,\n        email: request.email,\n        is_disabled: request.is_disabled,\n        filter_or: request.filter_or,\n        content_metadata_id: request.content_metadata_id,\n        group_id: request.group_id,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Search for user accounts by name\n   *\n   * Returns all user accounts where `first_name` OR `last_name` OR `email` field values match a pattern.\n   * The pattern can contain `%` and `_` wildcards as in SQL LIKE expressions.\n   *\n   * Any additional search params will be combined into a logical AND expression.\n   *\n   * GET /users/search/names/{pattern} -> IUser[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestSearchUsersNames\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async search_users_names(\n    callback: (readable: Readable) => Promise<IUser[]>,\n    request: IRequestSearchUsersNames,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.pattern = encodeParam(request.pattern)\n    return this.authStream<IUser[]>(\n      callback,\n      'GET',\n      `/users/search/names/${request.pattern}`,\n      {\n        fields: request.fields,\n        page: request.page,\n        per_page: request.per_page,\n        limit: request.limit,\n        offset: request.offset,\n        sorts: request.sorts,\n        id: request.id,\n        first_name: request.first_name,\n        last_name: request.last_name,\n        verified_looker_employee: request.verified_looker_employee,\n        email: request.email,\n        is_disabled: request.is_disabled,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the user with a specific id.\n   *\n   * If the caller is an admin or the caller is the user being specified, then full user information will\n   * be returned. Otherwise, a minimal 'public' variant of the user information will be returned. This contains\n   * The user name and avatar url, but no sensitive information.\n   *\n   * GET /users/{user_id} -> IUser\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user(\n    callback: (readable: Readable) => Promise<IUser>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<IUser>(\n      callback,\n      'GET',\n      `/users/${user_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update information about the user with a specific id.\n   *\n   * PATCH /users/{user_id} -> IUser\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param body Partial<IWriteUser>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_user(\n    callback: (readable: Readable) => Promise<IUser>,\n    user_id: string,\n    body: Partial<IWriteUser>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<IUser>(\n      callback,\n      'PATCH',\n      `/users/${user_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete the user with a specific id.\n   *\n   * **DANGER** this will delete the user and all looks and other information owned by the user.\n   *\n   * DELETE /users/{user_id} -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about the user with a credential of given type with specific id.\n   *\n   * This is used to do things like find users by their embed external_user_id. Or, find the user with\n   * a given api3 client_id, etc. The 'credential_type' matches the 'type' name of the various credential\n   * types. It must be one of the values listed in the table below. The 'credential_id' is your unique Id\n   * for the user and is specific to each type of credential.\n   *\n   * An example using the Ruby sdk might look like:\n   *\n   * `sdk.user_for_credential('embed', 'customer-4959425')`\n   *\n   * This table shows the supported 'Credential Type' strings. The right column is for reference; it shows\n   * which field in the given credential type is actually searched when finding a user with the supplied\n   * 'credential_id'.\n   *\n   * | Credential Types | Id Field Matched |\n   * | ---------------- | ---------------- |\n   * | email            | email            |\n   * | google           | google_user_id   |\n   * | saml             | saml_user_id     |\n   * | oidc             | oidc_user_id     |\n   * | ldap             | ldap_id          |\n   * | api              | token            |\n   * | api3             | client_id        |\n   * | embed            | external_user_id |\n   * | looker_openid    | email            |\n   *\n   * **NOTE**: The 'api' credential type was only used with the legacy Looker query API and is no longer supported. The credential type for API you are currently looking at is 'api3'.\n   *\n   * GET /users/credential/{credential_type}/{credential_id} -> IUser\n   *\n   * @param callback streaming output function\n   * @param credential_type Type name of credential\n   * @param credential_id Id of credential\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_for_credential(\n    callback: (readable: Readable) => Promise<IUser>,\n    credential_type: string,\n    credential_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    credential_type = encodeParam(credential_type)\n    credential_id = encodeParam(credential_id)\n    return this.authStream<IUser>(\n      callback,\n      'GET',\n      `/users/credential/${credential_type}/${credential_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Email/password login information for the specified user.\n   *\n   * GET /users/{user_id}/credentials_email -> ICredentialsEmail\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_credentials_email(\n    callback: (readable: Readable) => Promise<ICredentialsEmail>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsEmail>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_email`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Email/password login information for the specified user.\n   *\n   * POST /users/{user_id}/credentials_email -> ICredentialsEmail\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param body Partial<IWriteCredentialsEmail>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_user_credentials_email(\n    callback: (readable: Readable) => Promise<ICredentialsEmail>,\n    user_id: string,\n    body: Partial<IWriteCredentialsEmail>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsEmail>(\n      callback,\n      'POST',\n      `/users/${user_id}/credentials_email`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Email/password login information for the specified user.\n   *\n   * PATCH /users/{user_id}/credentials_email -> ICredentialsEmail\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param body Partial<IWriteCredentialsEmail>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_user_credentials_email(\n    callback: (readable: Readable) => Promise<ICredentialsEmail>,\n    user_id: string,\n    body: Partial<IWriteCredentialsEmail>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsEmail>(\n      callback,\n      'PATCH',\n      `/users/${user_id}/credentials_email`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Email/password login information for the specified user.\n   *\n   * DELETE /users/{user_id}/credentials_email -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_credentials_email(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/credentials_email`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Two-factor login information for the specified user.\n   *\n   * GET /users/{user_id}/credentials_totp -> ICredentialsTotp\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_credentials_totp(\n    callback: (readable: Readable) => Promise<ICredentialsTotp>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsTotp>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_totp`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Two-factor login information for the specified user.\n   *\n   * POST /users/{user_id}/credentials_totp -> ICredentialsTotp\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param body WARNING: no writeable properties found for POST, PUT, or PATCH\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_user_credentials_totp(\n    callback: (readable: Readable) => Promise<ICredentialsTotp>,\n    user_id: string,\n    body?: Partial<ICredentialsTotp>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsTotp>(\n      callback,\n      'POST',\n      `/users/${user_id}/credentials_totp`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Two-factor login information for the specified user.\n   *\n   * DELETE /users/{user_id}/credentials_totp -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_credentials_totp(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/credentials_totp`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### LDAP login information for the specified user.\n   *\n   * GET /users/{user_id}/credentials_ldap -> ICredentialsLDAP\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_credentials_ldap(\n    callback: (readable: Readable) => Promise<ICredentialsLDAP>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsLDAP>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_ldap`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### LDAP login information for the specified user.\n   *\n   * DELETE /users/{user_id}/credentials_ldap -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_credentials_ldap(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/credentials_ldap`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Google authentication login information for the specified user.\n   *\n   * GET /users/{user_id}/credentials_google -> ICredentialsGoogle\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_credentials_google(\n    callback: (readable: Readable) => Promise<ICredentialsGoogle>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsGoogle>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_google`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Google authentication login information for the specified user.\n   *\n   * DELETE /users/{user_id}/credentials_google -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_credentials_google(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/credentials_google`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Saml authentication login information for the specified user.\n   *\n   * GET /users/{user_id}/credentials_saml -> ICredentialsSaml\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_credentials_saml(\n    callback: (readable: Readable) => Promise<ICredentialsSaml>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsSaml>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_saml`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Saml authentication login information for the specified user.\n   *\n   * DELETE /users/{user_id}/credentials_saml -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_credentials_saml(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/credentials_saml`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### OpenID Connect (OIDC) authentication login information for the specified user.\n   *\n   * GET /users/{user_id}/credentials_oidc -> ICredentialsOIDC\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_credentials_oidc(\n    callback: (readable: Readable) => Promise<ICredentialsOIDC>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsOIDC>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_oidc`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### OpenID Connect (OIDC) authentication login information for the specified user.\n   *\n   * DELETE /users/{user_id}/credentials_oidc -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_credentials_oidc(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/credentials_oidc`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.\n   *\n   * GET /users/{user_id}/credentials_api3/{credentials_api3_id} -> ICredentialsApi3\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param credentials_api3_id Id of API 3 Credential\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_credentials_api3(\n    callback: (readable: Readable) => Promise<ICredentialsApi3>,\n    user_id: string,\n    credentials_api3_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    credentials_api3_id = encodeParam(credentials_api3_id)\n    return this.authStream<ICredentialsApi3>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_api3/${credentials_api3_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.\n   *\n   * DELETE /users/{user_id}/credentials_api3/{credentials_api3_id} -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param credentials_api3_id Id of API 3 Credential\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_credentials_api3(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    credentials_api3_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    credentials_api3_id = encodeParam(credentials_api3_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/credentials_api3/${credentials_api3_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.\n   *\n   * GET /users/{user_id}/credentials_api3 -> ICredentialsApi3[]\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_user_credentials_api3s(\n    callback: (readable: Readable) => Promise<ICredentialsApi3[]>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsApi3[]>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_api3`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.\n   *\n   * POST /users/{user_id}/credentials_api3 -> ICreateCredentialsApi3\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_user_credentials_api3(\n    callback: (readable: Readable) => Promise<ICreateCredentialsApi3>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICreateCredentialsApi3>(\n      callback,\n      'POST',\n      `/users/${user_id}/credentials_api3`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Embed login information for the specified user.\n   *\n   * GET /users/{user_id}/credentials_embed/{credentials_embed_id} -> ICredentialsEmbed\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param credentials_embed_id Id of Embedding Credential\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_credentials_embed(\n    callback: (readable: Readable) => Promise<ICredentialsEmbed>,\n    user_id: string,\n    credentials_embed_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    credentials_embed_id = encodeParam(credentials_embed_id)\n    return this.authStream<ICredentialsEmbed>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_embed/${credentials_embed_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Embed login information for the specified user.\n   *\n   * DELETE /users/{user_id}/credentials_embed/{credentials_embed_id} -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param credentials_embed_id Id of Embedding Credential\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_credentials_embed(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    credentials_embed_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    credentials_embed_id = encodeParam(credentials_embed_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/credentials_embed/${credentials_embed_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Embed login information for the specified user.\n   *\n   * GET /users/{user_id}/credentials_embed -> ICredentialsEmbed[]\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_user_credentials_embeds(\n    callback: (readable: Readable) => Promise<ICredentialsEmbed[]>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsEmbed[]>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_embed`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Looker Openid login information for the specified user. Used by Looker Analysts.\n   *\n   * GET /users/{user_id}/credentials_looker_openid -> ICredentialsLookerOpenid\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_credentials_looker_openid(\n    callback: (readable: Readable) => Promise<ICredentialsLookerOpenid>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsLookerOpenid>(\n      callback,\n      'GET',\n      `/users/${user_id}/credentials_looker_openid`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Looker Openid login information for the specified user. Used by Looker Analysts.\n   *\n   * DELETE /users/{user_id}/credentials_looker_openid -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_credentials_looker_openid(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/credentials_looker_openid`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Web login session for the specified user.\n   *\n   * GET /users/{user_id}/sessions/{session_id} -> ISession\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param session_id Id of Web Login Session\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_session(\n    callback: (readable: Readable) => Promise<ISession>,\n    user_id: string,\n    session_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    session_id = encodeParam(session_id)\n    return this.authStream<ISession>(\n      callback,\n      'GET',\n      `/users/${user_id}/sessions/${session_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Web login session for the specified user.\n   *\n   * DELETE /users/{user_id}/sessions/{session_id} -> string\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param session_id Id of Web Login Session\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_session(\n    callback: (readable: Readable) => Promise<string>,\n    user_id: string,\n    session_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    session_id = encodeParam(session_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/sessions/${session_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Web login session for the specified user.\n   *\n   * GET /users/{user_id}/sessions -> ISession[]\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_user_sessions(\n    callback: (readable: Readable) => Promise<ISession[]>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ISession[]>(\n      callback,\n      'GET',\n      `/users/${user_id}/sessions`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a password reset token.\n   * This will create a cryptographically secure random password reset token for the user.\n   * If the user already has a password reset token then this invalidates the old token and creates a new one.\n   * The token is expressed as the 'password_reset_url' of the user's email/password credential object.\n   * This takes an optional 'expires' param to indicate if the new token should be an expiring token.\n   * Tokens that expire are typically used for self-service password resets for existing users.\n   * Invitation emails for new users typically are not set to expire.\n   * The expire period is always 60 minutes when expires is enabled.\n   * This method can be called with an empty body.\n   *\n   * POST /users/{user_id}/credentials_email/password_reset -> ICredentialsEmail\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestCreateUserCredentialsEmailPasswordReset\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async create_user_credentials_email_password_reset(\n    callback: (readable: Readable) => Promise<ICredentialsEmail>,\n    request: IRequestCreateUserCredentialsEmailPasswordReset,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.user_id = encodeParam(request.user_id)\n    return this.authStream<ICredentialsEmail>(\n      callback,\n      'POST',\n      `/users/${request.user_id}/credentials_email/password_reset`,\n      { expires: request.expires, fields: request.fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about roles of a given user\n   *\n   * GET /users/{user_id}/roles -> IRole[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestUserRoles\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async user_roles(\n    callback: (readable: Readable) => Promise<IRole[]>,\n    request: IRequestUserRoles,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.user_id = encodeParam(request.user_id)\n    return this.authStream<IRole[]>(\n      callback,\n      'GET',\n      `/users/${request.user_id}/roles`,\n      {\n        fields: request.fields,\n        direct_association_only: request.direct_association_only,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Set roles of the user with a specific id.\n   *\n   * PUT /users/{user_id}/roles -> IRole[]\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param body Partial<string[]>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async set_user_roles(\n    callback: (readable: Readable) => Promise<IRole[]>,\n    user_id: string,\n    body: Partial<string[]>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<IRole[]>(\n      callback,\n      'PUT',\n      `/users/${user_id}/roles`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get user attribute values for a given user.\n   *\n   * Returns the values of specified user attributes (or all user attributes) for a certain user.\n   *\n   * A value for each user attribute is searched for in the following locations, in this order:\n   *\n   * 1. in the user's account information\n   * 1. in groups that the user is a member of\n   * 1. the default value of the user attribute\n   *\n   * If more than one group has a value defined for a user attribute, the group with the lowest rank wins.\n   *\n   * The response will only include user attributes for which values were found. Use `include_unset=true` to include\n   * empty records for user attributes with no value.\n   *\n   * The value of all hidden user attributes will be blank.\n   *\n   * GET /users/{user_id}/attribute_values -> IUserAttributeWithValue[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestUserAttributeUserValues\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async user_attribute_user_values(\n    callback: (readable: Readable) => Promise<IUserAttributeWithValue[]>,\n    request: IRequestUserAttributeUserValues,\n    options?: Partial<ITransportSettings>\n  ) {\n    request.user_id = encodeParam(request.user_id)\n    return this.authStream<IUserAttributeWithValue[]>(\n      callback,\n      'GET',\n      `/users/${request.user_id}/attribute_values`,\n      {\n        fields: request.fields,\n        user_attribute_ids: request.user_attribute_ids,\n        all_values: request.all_values,\n        include_unset: request.include_unset,\n      },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Store a custom value for a user attribute in a user's account settings.\n   *\n   * Per-user user attribute values take precedence over group or default values.\n   *\n   * PATCH /users/{user_id}/attribute_values/{user_attribute_id} -> IUserAttributeWithValue\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param user_attribute_id Id of user attribute\n   * @param body Partial<IWriteUserAttributeWithValue>\n   * @param options one-time API call overrides\n   *\n   */\n  async set_user_attribute_user_value(\n    callback: (readable: Readable) => Promise<IUserAttributeWithValue>,\n    user_id: string,\n    user_attribute_id: string,\n    body: Partial<IWriteUserAttributeWithValue>,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    user_attribute_id = encodeParam(user_attribute_id)\n    return this.authStream<IUserAttributeWithValue>(\n      callback,\n      'PATCH',\n      `/users/${user_id}/attribute_values/${user_attribute_id}`,\n      null,\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a user attribute value from a user's account settings.\n   *\n   * After the user attribute value is deleted from the user's account settings, subsequent requests\n   * for the user attribute value for this user will draw from the user's groups or the default\n   * value of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more\n   * information about how user attribute values are resolved.\n   *\n   * DELETE /users/{user_id}/attribute_values/{user_attribute_id} -> void\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param user_attribute_id Id of user attribute\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_attribute_user_value(\n    callback: (readable: Readable) => Promise<void>,\n    user_id: string,\n    user_attribute_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    user_attribute_id = encodeParam(user_attribute_id)\n    return this.authStream<void>(\n      callback,\n      'DELETE',\n      `/users/${user_id}/attribute_values/${user_attribute_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Send a password reset token.\n   * This will send a password reset email to the user. If a password reset token does not already exist\n   * for this user, it will create one and then send it.\n   * If the user has not yet set up their account, it will send a setup email to the user.\n   * The URL sent in the email is expressed as the 'password_reset_url' of the user's email/password credential object.\n   * Password reset URLs will expire in 60 minutes.\n   * This method can be called with an empty body.\n   *\n   * POST /users/{user_id}/credentials_email/send_password_reset -> ICredentialsEmail\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async send_user_credentials_email_password_reset(\n    callback: (readable: Readable) => Promise<ICredentialsEmail>,\n    user_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<ICredentialsEmail>(\n      callback,\n      'POST',\n      `/users/${user_id}/credentials_email/send_password_reset`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Change a disabled user's email addresses\n   *\n   * Allows the admin to change the email addresses for all the user's\n   * associated credentials.  Will overwrite all associated email addresses with\n   * the value supplied in the 'email' body param.\n   * The user's 'is_disabled' status must be true.\n   *\n   * POST /users/{user_id}/update_emails -> IUser\n   *\n   * @param callback streaming output function\n   * @param user_id Id of user\n   * @param body Partial<IUserEmailOnly>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async wipeout_user_emails(\n    callback: (readable: Readable) => Promise<IUser>,\n    user_id: string,\n    body: Partial<IUserEmailOnly>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_id = encodeParam(user_id)\n    return this.authStream<IUser>(\n      callback,\n      'POST',\n      `/users/${user_id}/update_emails`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * Create an embed user from an external user ID\n   *\n   * POST /users/embed_user -> IUserPublic\n   *\n   * @param callback streaming output function\n   * @param body Partial<ICreateEmbedUserRequest>\n   * @param options one-time API call overrides\n   *\n   */\n  async create_embed_user(\n    callback: (readable: Readable) => Promise<IUserPublic>,\n    body: Partial<ICreateEmbedUserRequest>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IUserPublic>(\n      callback,\n      'POST',\n      '/users/embed_user',\n      null,\n      body,\n      options\n    )\n  }\n\n  //#endregion User: Manage Users\n\n  //#region UserAttribute: Manage User Attributes\n\n  /**\n   * ### Get information about all user attributes.\n   *\n   * GET /user_attributes -> IUserAttribute[]\n   *\n   * @param callback streaming output function\n   * @param request composed interface \"IRequestAllUserAttributes\" for complex method parameters\n   * @param options one-time API call overrides\n   *\n   */\n  async all_user_attributes(\n    callback: (readable: Readable) => Promise<IUserAttribute[]>,\n    request: IRequestAllUserAttributes,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IUserAttribute[]>(\n      callback,\n      'GET',\n      '/user_attributes',\n      { fields: request.fields, sorts: request.sorts },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Create a new user attribute\n   *\n   * Permission information for a user attribute is conveyed through the `can` and `user_can_edit` fields.\n   * The `user_can_edit` field indicates whether an attribute is user-editable _anywhere_ in the application.\n   * The `can` field gives more granular access information, with the `set_value` child field indicating whether\n   * an attribute's value can be set by [Setting the User Attribute User Value](#!/User/set_user_attribute_user_value).\n   *\n   * Note: `name` and `label` fields must be unique across all user attributes in the Looker instance.\n   * Attempting to create a new user attribute with a name or label that duplicates an existing\n   * user attribute will fail with a 422 error.\n   *\n   * POST /user_attributes -> IUserAttribute\n   *\n   * @param callback streaming output function\n   * @param body Partial<IWriteUserAttribute>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async create_user_attribute(\n    callback: (readable: Readable) => Promise<IUserAttribute>,\n    body: Partial<IWriteUserAttribute>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IUserAttribute>(\n      callback,\n      'POST',\n      '/user_attributes',\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Get information about a user attribute.\n   *\n   * GET /user_attributes/{user_attribute_id} -> IUserAttribute\n   *\n   * @param callback streaming output function\n   * @param user_attribute_id Id of user attribute\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async user_attribute(\n    callback: (readable: Readable) => Promise<IUserAttribute>,\n    user_attribute_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_attribute_id = encodeParam(user_attribute_id)\n    return this.authStream<IUserAttribute>(\n      callback,\n      'GET',\n      `/user_attributes/${user_attribute_id}`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Update a user attribute definition.\n   *\n   * PATCH /user_attributes/{user_attribute_id} -> IUserAttribute\n   *\n   * @param callback streaming output function\n   * @param user_attribute_id Id of user attribute\n   * @param body Partial<IWriteUserAttribute>\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async update_user_attribute(\n    callback: (readable: Readable) => Promise<IUserAttribute>,\n    user_attribute_id: string,\n    body: Partial<IWriteUserAttribute>,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_attribute_id = encodeParam(user_attribute_id)\n    return this.authStream<IUserAttribute>(\n      callback,\n      'PATCH',\n      `/user_attributes/${user_attribute_id}`,\n      { fields },\n      body,\n      options\n    )\n  }\n\n  /**\n   * ### Delete a user attribute (admin only).\n   *\n   * DELETE /user_attributes/{user_attribute_id} -> string\n   *\n   * @param callback streaming output function\n   * @param user_attribute_id Id of user attribute\n   * @param options one-time API call overrides\n   *\n   */\n  async delete_user_attribute(\n    callback: (readable: Readable) => Promise<string>,\n    user_attribute_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_attribute_id = encodeParam(user_attribute_id)\n    return this.authStream<string>(\n      callback,\n      'DELETE',\n      `/user_attributes/${user_attribute_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Returns all values of a user attribute defined by user groups, in precedence order.\n   *\n   * A user may be a member of multiple groups which define different values for a given user attribute.\n   * The order of group-values in the response determines precedence for selecting which group-value applies\n   * to a given user.  For more information, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\n   *\n   * Results will only include groups that the caller's user account has permission to see.\n   *\n   * GET /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]\n   *\n   * @param callback streaming output function\n   * @param user_attribute_id Id of user attribute\n   * @param fields Requested fields.\n   * @param options one-time API call overrides\n   *\n   */\n  async all_user_attribute_group_values(\n    callback: (readable: Readable) => Promise<IUserAttributeGroupValue[]>,\n    user_attribute_id: string,\n    fields?: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_attribute_id = encodeParam(user_attribute_id)\n    return this.authStream<IUserAttributeGroupValue[]>(\n      callback,\n      'GET',\n      `/user_attributes/${user_attribute_id}/group_values`,\n      { fields },\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Define values for a user attribute across a set of groups, in priority order.\n   *\n   * This function defines all values for a user attribute defined by user groups. This is a global setting, potentially affecting\n   * all users in the system. This function replaces any existing group value definitions for the indicated user attribute.\n   *\n   * The value of a user attribute for a given user is determined by searching the following locations, in this order:\n   *\n   * 1. the user's account settings\n   * 2. the groups that the user is a member of\n   * 3. the default value of the user attribute, if any\n   *\n   * The user may be a member of multiple groups which define different values for that user attribute. The order of items in the group_values parameter\n   * determines which group takes priority for that user. Lowest array index wins.\n   *\n   * An alternate method to indicate the selection precedence of group-values is to assign numbers to the 'rank' property of each\n   * group-value object in the array. Lowest 'rank' value wins. If you use this technique, you must assign a\n   * rank value to every group-value object in the array.\n   *\n   *   To set a user attribute value for a single user, see [Set User Attribute User Value](#!/User/set_user_attribute_user_value).\n   * To set a user attribute value for all members of a group, see [Set User Attribute Group Value](#!/Group/update_user_attribute_group_value).\n   *\n   * POST /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]\n   *\n   * @param callback streaming output function\n   * @param user_attribute_id Id of user attribute\n   * @param body Partial<IUserAttributeGroupValue[]>\n   * @param options one-time API call overrides\n   *\n   */\n  async set_user_attribute_group_values(\n    callback: (readable: Readable) => Promise<IUserAttributeGroupValue[]>,\n    user_attribute_id: string,\n    body: Partial<IUserAttributeGroupValue[]>,\n    options?: Partial<ITransportSettings>\n  ) {\n    user_attribute_id = encodeParam(user_attribute_id)\n    return this.authStream<IUserAttributeGroupValue[]>(\n      callback,\n      'POST',\n      `/user_attributes/${user_attribute_id}/group_values`,\n      null,\n      body,\n      options\n    )\n  }\n\n  //#endregion UserAttribute: Manage User Attributes\n\n  //#region Workspace: Manage Workspaces\n\n  /**\n   * ### Get All Workspaces\n   *\n   * Returns all workspaces available to the calling user.\n   *\n   * GET /workspaces -> IWorkspace[]\n   *\n   * @param callback streaming output function\n   * @param options one-time API call overrides\n   *\n   */\n  async all_workspaces(\n    callback: (readable: Readable) => Promise<IWorkspace[]>,\n    options?: Partial<ITransportSettings>\n  ) {\n    return this.authStream<IWorkspace[]>(\n      callback,\n      'GET',\n      '/workspaces',\n      null,\n      null,\n      options\n    )\n  }\n\n  /**\n   * ### Get A Workspace\n   *\n   * Returns information about a workspace such as the git status and selected branches\n   * of all projects available to the caller's user account.\n   *\n   * A workspace defines which versions of project files will be used to evaluate expressions\n   * and operations that use model definitions - operations such as running queries or rendering dashboards.\n   * Each project has its own git repository, and each project in a workspace may be configured to reference\n   * particular branch or revision within their respective repositories.\n   *\n   * There are two predefined workspaces available: \"production\" and \"dev\".\n   *\n   * The production workspace is shared across all Looker users. Models in the production workspace are read-only.\n   * Changing files in production is accomplished by modifying files in a git branch and using Pull Requests\n   * to merge the changes from the dev branch into the production branch, and then telling\n   * Looker to sync with production.\n   *\n   * The dev workspace is local to each Looker user. Changes made to project/model files in the dev workspace only affect\n   * that user, and only when the dev workspace is selected as the active workspace for the API session.\n   * (See set_session_workspace()).\n   *\n   * The dev workspace is NOT unique to an API session. Two applications accessing the Looker API using\n   * the same user account will see the same files in the dev workspace. To avoid collisions between\n   * API clients it's best to have each client login with API3 credentials for a different user account.\n   *\n   * Changes made to files in a dev workspace are persistent across API sessions. It's a good\n   * idea to commit any changes you've made to the git repository, but not strictly required. Your modified files\n   * reside in a special user-specific directory on the Looker server and will still be there when you login in again\n   * later and use update_session(workspace_id: \"dev\") to select the dev workspace for the new API session.\n   *\n   * GET /workspaces/{workspace_id} -> IWorkspace\n   *\n   * @param callback streaming output function\n   * @param workspace_id Id of the workspace\n   * @param options one-time API call overrides\n   *\n   */\n  async workspace(\n    callback: (readable: Readable) => Promise<IWorkspace>,\n    workspace_id: string,\n    options?: Partial<ITransportSettings>\n  ) {\n    workspace_id = encodeParam(workspace_id)\n    return this.authStream<IWorkspace>(\n      callback,\n      'GET',\n      `/workspaces/${workspace_id}`,\n      null,\n      null,\n      options\n    )\n  }\n\n  //#endregion Workspace: Manage Workspaces\n}\n"],"file":"streams.js"}