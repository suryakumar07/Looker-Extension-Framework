{"version":3,"file":"types.js","names":[],"sources":["../../../src/TrapStack/types.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { MutableRefObject } from 'react'\n\nexport interface Trap<O = unknown> {\n  element: HTMLElement\n  options?: O\n}\n\nexport interface TrapStackContextProps<O = unknown> {\n  /**\n   * Stores the element for the active trap (undefined if none are active)\n   */\n  activeTrapRef?: MutableRefObject<HTMLElement | undefined>\n  /**\n   * @private\n   */\n  addTrap?: (id: string, trap: Trap<O>) => void\n  /**\n   * Disables the current trap (no trap will be enabled as a result)\n   */\n  disableCurrentTrap?: () => void\n  /**\n   * Enables the trap stacked on top\n   */\n  enableCurrentTrap?: () => void\n  /**\n   * @private\n   */\n  getTrap?: (id: string) => Trap<O> | undefined\n  /**\n   * @private\n   */\n  removeTrap?: (id: string) => void\n}\n\nexport interface TrapMap<O = unknown> {\n  [key: string]: Trap<O>\n}\n"],"mappings":""}