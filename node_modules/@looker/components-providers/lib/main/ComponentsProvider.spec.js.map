{"version":3,"file":"ComponentsProvider.spec.js","names":["FauxParagraph","styled","p","theme","colors","background","key","fonts","body","describe","test","Test","renderWithTheme","expect","screen","getByText","toHaveStyle"],"sources":["../../src/ComponentsProvider.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { screen } from '@testing-library/react'\nimport styled from 'styled-components'\n/**\n * This import path is ill-advised but acceptable since this\n * is a test-only import and prevents a package-dependency loop\n */\nimport { renderWithTheme } from '../../components-test-utils/src'\nimport { ComponentsProvider } from './ComponentsProvider'\n\nconst FauxParagraph = styled.p`\n  background: ${({ theme }) => theme.colors.background};\n  color: ${({ theme }) => theme.colors.key};\n  font-family: ${({ theme }) => theme.fonts.body};\n`\n\ndescribe('ComponentsProvider', () => {\n  test('Nesting ignores parent values (not a desireable choice)', () => {\n    const Test = () => {\n      return (\n        <ComponentsProvider\n          themeCustomizations={{\n            colors: { background: 'black' },\n          }}\n        >\n          <FauxParagraph>1 layer</FauxParagraph>\n          <ComponentsProvider\n            themeCustomizations={{\n              colors: { key: 'purple' },\n            }}\n          >\n            <FauxParagraph>2 layer</FauxParagraph>\n          </ComponentsProvider>\n        </ComponentsProvider>\n      )\n    }\n\n    renderWithTheme(<Test />)\n\n    expect(screen.getByText('1 layer')).toHaveStyle('color:rgb(108, 67, 224)')\n    expect(screen.getByText('1 layer')).toHaveStyle('background: black')\n    expect(screen.getByText('2 layer')).toHaveStyle('color: purple')\n    expect(screen.getByText('2 layer')).toHaveStyle(\n      'background:rgb(255, 255, 255);'\n    )\n  })\n\n  test('loadGoogleFonts', () => {\n    const Test = () => {\n      return (\n        <ComponentsProvider loadGoogleFonts>\n          <FauxParagraph>Some Text</FauxParagraph>\n        </ComponentsProvider>\n      )\n    }\n\n    renderWithTheme(<Test />)\n\n    expect(screen.getByText('Some Text')).toHaveStyle(\n      \"font-family: Roboto,'Noto Sans','Noto Sans JP','Noto Sans CJK KR','Noto Sans Arabic UI','Noto Sans Devanagari UI','Noto Sans Hebrew','Noto Sans Thai UI',Helvetica,Arial,sans-serif;\"\n    )\n  })\n})\n"],"mappings":";;;;AAKA;AACA;AACA;AAKA;AACA;AAAyD;AAEzD,IAAMA,aAAa,GAAGC,4BAAM,CAACC,CAAC;EAAA;EAAA;AAAA,sJACd;EAAA,IAAGC,KAAK,QAALA,KAAK;EAAA,OAAOA,KAAK,CAACC,MAAM,CAACC,UAAU;AAAA,GAC3C;EAAA,IAAGF,KAAK,SAALA,KAAK;EAAA,OAAOA,KAAK,CAACC,MAAM,CAACE,GAAG;AAAA,GACzB;EAAA,IAAGH,KAAK,SAALA,KAAK;EAAA,OAAOA,KAAK,CAACI,KAAK,CAACC,IAAI;AAAA,EAC/C;AAEDC,QAAQ,CAAC,oBAAoB,EAAE,YAAM;EACnCC,IAAI,CAAC,yDAAyD,EAAE,YAAM;IACpE,IAAMC,IAAI,GAAG,SAAPA,IAAI,GAAS;MACjB,OACE,gCAAC,sCAAkB;QACjB,mBAAmB,EAAE;UACnBP,MAAM,EAAE;YAAEC,UAAU,EAAE;UAAQ;QAChC;MAAE,GAEF,gCAAC,aAAa,kBAAwB,EACtC,gCAAC,sCAAkB;QACjB,mBAAmB,EAAE;UACnBD,MAAM,EAAE;YAAEE,GAAG,EAAE;UAAS;QAC1B;MAAE,GAEF,gCAAC,aAAa,kBAAwB,CACnB,CACF;IAEzB,CAAC;IAED,IAAAM,oBAAe,EAAC,gCAAC,IAAI,OAAG,CAAC;IAEzBC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,SAAS,CAAC,CAAC,CAACC,WAAW,CAAC,yBAAyB,CAAC;IAC1EH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,SAAS,CAAC,CAAC,CAACC,WAAW,CAAC,mBAAmB,CAAC;IACpEH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,SAAS,CAAC,CAAC,CAACC,WAAW,CAAC,eAAe,CAAC;IAChEH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,SAAS,CAAC,CAAC,CAACC,WAAW,CAC7C,gCAAgC,CACjC;EACH,CAAC,CAAC;EAEFN,IAAI,CAAC,iBAAiB,EAAE,YAAM;IAC5B,IAAMC,IAAI,GAAG,SAAPA,IAAI,GAAS;MACjB,OACE,gCAAC,sCAAkB;QAAC,eAAe;MAAA,GACjC,gCAAC,aAAa,oBAA0B,CACrB;IAEzB,CAAC;IAED,IAAAC,oBAAe,EAAC,gCAAC,IAAI,OAAG,CAAC;IAEzBC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,WAAW,CAAC,CAAC,CAACC,WAAW,CAC/C,sLAAsL,CACvL;EACH,CAAC,CAAC;AACJ,CAAC,CAAC"}