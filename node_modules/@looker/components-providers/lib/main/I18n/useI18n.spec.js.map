{"version":3,"file":"useI18n.spec.js","names":["i18nMockResources","en","AComponent","Something","BComponent","Hello","World","TestComponent","children","props","useI18n","describe","test","spy","jest","spyOn","i18next","render","expect","init","toHaveBeenCalledTimes","mockRestore","isInitialized","Object","keys","length","mock","calls","toMatchInlineSnapshot"],"sources":["../../../src/I18n/useI18n.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { render } from '@testing-library/react'\nimport i18next from 'i18next'\nimport React from 'react'\nimport type { ReactNode } from 'react'\nimport type { UseI18nProps } from './useI18n'\nimport { useI18n } from './useI18n'\n\nconst i18nMockResources = {\n  en: {\n    AComponent: {\n      Something: 'Something',\n      'Something else': 'Something else',\n    },\n    BComponent: {\n      Hello: 'Hello',\n      World: 'World',\n    },\n  },\n}\ntype TestComponentProps = UseI18nProps & {\n  children?: ReactNode\n}\n\nconst TestComponent = ({ children, ...props }: TestComponentProps) => {\n  useI18n(props)\n  return <>{children}</>\n}\n\ndescribe('useI18n', () => {\n  test('initializes i18next', () => {\n    const spy = jest.spyOn(i18next, 'init')\n    render(<TestComponent />)\n\n    expect(i18next.init).toHaveBeenCalledTimes(1)\n    spy.mockRestore()\n    i18next.isInitialized = false\n  })\n\n  test('updates with new props', () => {\n    const spy = jest.spyOn(i18next, 'addResourceBundle')\n    i18next.isInitialized = true\n    render(<TestComponent resources={i18nMockResources} />)\n    expect(spy).toHaveBeenCalledTimes(Object.keys(i18nMockResources.en).length)\n    spy.mockRestore()\n  })\n\n  test('updates with new locale', () => {\n    const spy = jest.spyOn(i18next, 'changeLanguage')\n    i18next.isInitialized = true\n    render(<TestComponent locale=\"de-DE\" />)\n    expect(spy.mock.calls).toMatchInlineSnapshot(`\n      Array [\n        Array [\n          \"de-DE\",\n        ],\n      ]\n    `)\n    spy.mockRestore()\n  })\n})\n"],"mappings":";;;;AAKA;AACA;AACA;AAGA;AAAmC;AAEnC,IAAMA,iBAAiB,GAAG;EACxBC,EAAE,EAAE;IACFC,UAAU,EAAE;MACVC,SAAS,EAAE,WAAW;MACtB,gBAAgB,EAAE;IACpB,CAAC;IACDC,UAAU,EAAE;MACVC,KAAK,EAAE,OAAO;MACdC,KAAK,EAAE;IACT;EACF;AACF,CAAC;AAKD,IAAMC,aAAa,GAAG,SAAhBA,aAAa,OAAmD;EAAA,IAA7CC,QAAQ,QAARA,QAAQ;IAAKC,KAAK;EACzC,IAAAC,gBAAO,EAACD,KAAK,CAAC;EACd,OAAO,oEAAGD,QAAQ,CAAI;AACxB,CAAC;AAEDG,QAAQ,CAAC,SAAS,EAAE,YAAM;EACxBC,IAAI,CAAC,qBAAqB,EAAE,YAAM;IAChC,IAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,mBAAO,EAAE,MAAM,CAAC;IACvC,IAAAC,aAAM,EAAC,iCAAC,aAAa,OAAG,CAAC;IAEzBC,MAAM,CAACF,mBAAO,CAACG,IAAI,CAAC,CAACC,qBAAqB,CAAC,CAAC,CAAC;IAC7CP,GAAG,CAACQ,WAAW,EAAE;IACjBL,mBAAO,CAACM,aAAa,GAAG,KAAK;EAC/B,CAAC,CAAC;EAEFV,IAAI,CAAC,wBAAwB,EAAE,YAAM;IACnC,IAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,mBAAO,EAAE,mBAAmB,CAAC;IACpDA,mBAAO,CAACM,aAAa,GAAG,IAAI;IAC5B,IAAAL,aAAM,EAAC,iCAAC,aAAa;MAAC,SAAS,EAAEjB;IAAkB,EAAG,CAAC;IACvDkB,MAAM,CAACL,GAAG,CAAC,CAACO,qBAAqB,CAACG,MAAM,CAACC,IAAI,CAACxB,iBAAiB,CAACC,EAAE,CAAC,CAACwB,MAAM,CAAC;IAC3EZ,GAAG,CAACQ,WAAW,EAAE;EACnB,CAAC,CAAC;EAEFT,IAAI,CAAC,yBAAyB,EAAE,YAAM;IACpC,IAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,mBAAO,EAAE,gBAAgB,CAAC;IACjDA,mBAAO,CAACM,aAAa,GAAG,IAAI;IAC5B,IAAAL,aAAM,EAAC,iCAAC,aAAa;MAAC,MAAM,EAAC;IAAO,EAAG,CAAC;IACxCC,MAAM,CAACL,GAAG,CAACa,IAAI,CAACC,KAAK,CAAC,CAACC,qBAAqB,qFAM1C;IACFf,GAAG,CAACQ,WAAW,EAAE;EACnB,CAAC,CAAC;AACJ,CAAC,CAAC"}