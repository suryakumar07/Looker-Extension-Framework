function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState } from 'react';
import { LookerExtensionSDK } from '@looker/extension-sdk';
import { ExtensionConnector } from '../ExtensionConnector';
import { registerCore31SDK, unregisterCore31SDK } from '../../sdk/core_sdk_31';
import { registerCore40SDK, unregisterCore40SDK } from '../../sdk/core_sdk_40';
export var ExtensionContext = React.createContext(undefined);
export var ExtensionProvider = _ref => {
  var {
    children
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children"]);

  var [extensionData, setExtensionData] = useState({});

  var connectedCallback = extensionHost => {
    var core31SDK = LookerExtensionSDK.create31Client(extensionHost);
    var core40SDK = LookerExtensionSDK.create40Client(extensionHost);
    registerCore31SDK(core31SDK);
    registerCore40SDK(core40SDK);
    setExtensionData(previousState => {
      return _objectSpread(_objectSpread({}, previousState), {}, {
        extensionSDK: extensionHost,
        coreSDK: core31SDK,
        core31SDK,
        core40SDK
      });
    });
  };

  var unloadedCallback = () => {
    unregisterCore31SDK();
    unregisterCore40SDK();
  };

  var updateContextData = updatedContextData => {
    setExtensionData(previousState => {
      return _objectSpread(_objectSpread({}, previousState), updatedContextData);
    });
  };

  return React.createElement(ExtensionContext.Provider, {
    value: extensionData
  }, React.createElement(ExtensionConnector, _extends({}, props, {
    contextData: extensionData,
    connectedCallback: connectedCallback,
    updateContextData: updateContextData,
    unloadedCallback: unloadedCallback
  }), children));
};
//# sourceMappingURL=ExtensionProvider.js.map