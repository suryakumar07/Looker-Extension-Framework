"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExtensionProvider2 = ExtensionProvider2;
exports.ExtensionContext2 = void 0;

var _react = _interopRequireWildcard(require("react"));

var _extensionSdk = require("@looker/extension-sdk");

var _sdk = require("@looker/sdk");

var _ExtensionConnector = require("../ExtensionConnector");

var _core_sdk = require("../../sdk/core_sdk2");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ExtensionContext2 = _react.default.createContext(undefined);

exports.ExtensionContext2 = ExtensionContext2;

function ExtensionProvider2(props) {
  var {
    children,
    type
  } = props,
      rest = _objectWithoutProperties(props, ["children", "type"]);

  var [extensionData, setExtensionData] = (0, _react.useState)({});
  var apiVersion = type.ApiVersion;

  var connectedCallback = extensionHost => {
    var coreSDK;

    if (apiVersion) {
      coreSDK = _sdk.LookerExtensionSDK.createClient(new _extensionSdk.SdkConnection(extensionHost, apiVersion), type);
    }

    (0, _core_sdk.registerCoreSDK2)(coreSDK);
    setExtensionData(previousState => {
      return _objectSpread(_objectSpread({}, previousState), {}, {
        extensionSDK: extensionHost,
        coreSDK
      });
    });
  };

  var unloadedCallback = () => {
    (0, _core_sdk.unregisterCoreSDK2)();
  };

  var updateContextData = updatedContextData => {
    setExtensionData(previousState => {
      return _objectSpread(_objectSpread({}, previousState), updatedContextData);
    });
  };

  return _react.default.createElement(ExtensionContext2.Provider, {
    value: extensionData
  }, _react.default.createElement(_ExtensionConnector.ExtensionConnector, _extends({}, rest, {
    contextData: extensionData,
    connectedCallback: connectedCallback,
    updateContextData: updateContextData,
    unloadedCallback: unloadedCallback
  }), children));
}
//# sourceMappingURL=ExtensionProvider2.js.map