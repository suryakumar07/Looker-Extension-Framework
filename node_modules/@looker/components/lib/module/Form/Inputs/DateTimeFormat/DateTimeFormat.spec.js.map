{"version":3,"file":"DateTimeFormat.spec.js","names":["render","React","ar","DateTimeFormat","date","Date","describe","test","container","expect","toMatchInlineSnapshot"],"sources":["../../../../../src/Form/Inputs/DateTimeFormat/DateTimeFormat.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { render } from '@testing-library/react'\nimport React from 'react'\nimport ar from 'date-fns/locale/ar-SA'\nimport { DateTimeFormat } from './DateTimeFormat'\nconst date = new Date('January 25, 1988 11:58:03')\n\ndescribe('DateTimeFormat', () => {\n  test('renders', () => {\n    const { container } = render(<DateTimeFormat>{date}</DateTimeFormat>)\n    expect(container).toMatchInlineSnapshot(`\n      <div>\n        Jan 25, 1988, 11:58:03 AM\n      </div>\n    `)\n  })\n\n  test('specific locale', () => {\n    const { container } = render(\n      <DateTimeFormat locale={ar}>{date}</DateTimeFormat>\n    )\n    expect(container).toMatchInlineSnapshot(`\n      <div>\n        ينا 25, 1988, 11:58:03 ص\n      </div>\n    `)\n  })\n\n  test('displays timeZone prop if one is passed', () => {\n    const { container } = render(\n      <DateTimeFormat timeZone=\"Asia/Kolkata\">{date}</DateTimeFormat>\n    )\n    expect(container).toMatchInlineSnapshot(`\n      <div>\n        Jan 26, 1988, 1:28:03 AM GMT+5:30\n      </div>\n    `)\n  })\n\n  test('format prop short if one is passed', () => {\n    const { container } = render(\n      <DateTimeFormat format=\"short\">{date}</DateTimeFormat>\n    )\n    expect(container).toMatchInlineSnapshot(`\n      <div>\n        01/25/1988, 11:58 AM\n      </div>\n    `)\n  })\n\n  test('format prop long if one is passed', () => {\n    const { container } = render(\n      <DateTimeFormat format=\"long\">{date}</DateTimeFormat>\n    )\n    expect(container).toMatchInlineSnapshot(`\n      <div>\n        January 25th, 1988 at 11:58:03 AM GMT-8\n      </div>\n    `)\n  })\n\n  test('format prop full if one is passed', () => {\n    const { container } = render(\n      <DateTimeFormat format=\"full\">{date}</DateTimeFormat>\n    )\n    expect(container).toMatchInlineSnapshot(`\n      <div>\n        Monday, January 25th, 1988 at 11:58:03 AM GMT-08:00\n      </div>\n    `)\n  })\n})\n"],"mappings":";;AAKA,SAASA,MAAM,QAAQ,wBAAwB;AAC/C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,uBAAuB;AACtC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,2BAA2B,CAAC;AAElDC,QAAQ,CAAC,gBAAgB,EAAE,MAAM;EAC/BC,IAAI,CAAC,SAAS,EAAE,MAAM;IACpB,MAAM;MAAEC;IAAU,CAAC,GAAGR,MAAM,CAAC,oBAAC,cAAc,QAAEI,IAAI,CAAkB,CAAC;IACrEK,MAAM,CAACD,SAAS,CAAC,CAACE,qBAAqB,CAAE;AAC7C;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;EAEFH,IAAI,CAAC,iBAAiB,EAAE,MAAM;IAC5B,MAAM;MAAEC;IAAU,CAAC,GAAGR,MAAM,CAC1B,oBAAC,cAAc;MAAC,MAAM,EAAEE;IAAG,GAAEE,IAAI,CAAkB,CACpD;IACDK,MAAM,CAACD,SAAS,CAAC,CAACE,qBAAqB,CAAE;AAC7C;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;EAEFH,IAAI,CAAC,yCAAyC,EAAE,MAAM;IACpD,MAAM;MAAEC;IAAU,CAAC,GAAGR,MAAM,CAC1B,oBAAC,cAAc;MAAC,QAAQ,EAAC;IAAc,GAAEI,IAAI,CAAkB,CAChE;IACDK,MAAM,CAACD,SAAS,CAAC,CAACE,qBAAqB,CAAE;AAC7C;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;EAEFH,IAAI,CAAC,oCAAoC,EAAE,MAAM;IAC/C,MAAM;MAAEC;IAAU,CAAC,GAAGR,MAAM,CAC1B,oBAAC,cAAc;MAAC,MAAM,EAAC;IAAO,GAAEI,IAAI,CAAkB,CACvD;IACDK,MAAM,CAACD,SAAS,CAAC,CAACE,qBAAqB,CAAE;AAC7C;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;EAEFH,IAAI,CAAC,mCAAmC,EAAE,MAAM;IAC9C,MAAM;MAAEC;IAAU,CAAC,GAAGR,MAAM,CAC1B,oBAAC,cAAc;MAAC,MAAM,EAAC;IAAM,GAAEI,IAAI,CAAkB,CACtD;IACDK,MAAM,CAACD,SAAS,CAAC,CAACE,qBAAqB,CAAE;AAC7C;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;EAEFH,IAAI,CAAC,mCAAmC,EAAE,MAAM;IAC9C,MAAM;MAAEC;IAAU,CAAC,GAAGR,MAAM,CAC1B,oBAAC,cAAc;MAAC,MAAM,EAAC;IAAM,GAAEI,IAAI,CAAkB,CACtD;IACDK,MAAM,CAACD,SAAS,CAAC,CAACE,qBAAqB,CAAE;AAC7C;AACA;AACA;AACA,KAAK,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}