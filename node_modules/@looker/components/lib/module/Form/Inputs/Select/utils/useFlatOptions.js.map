{"version":3,"file":"useFlatOptions.js","names":["useMemo","getFlatOptions","options","reduce","acc","option","optionAsGroup","groupPseudoOptions","label","push","flatOptions","navigationOptions","useFlatOptions","undefined"],"sources":["../../../../../../src/Form/Inputs/Select/utils/useFlatOptions.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useMemo } from 'react'\nimport type {\n  FlatOption,\n  SelectOptionGroupProps,\n  SelectOptionObject,\n  SelectOptionProps,\n} from '../types'\n\nexport const getFlatOptions = (options: SelectOptionProps[]) =>\n  options.reduce(\n    (\n      acc: {\n        flatOptions: FlatOption[]\n        navigationOptions: SelectOptionObject[]\n      },\n      option: SelectOptionProps\n    ) => {\n      const optionAsGroup = option as SelectOptionGroupProps\n      if (optionAsGroup.options) {\n        // Include the divider\n        const groupPseudoOptions = [{}]\n        if (optionAsGroup.label) {\n          // ...and header as pseudo options for windowing purposes\n          groupPseudoOptions.push({ label: optionAsGroup.label })\n        }\n        return {\n          flatOptions: [\n            ...acc.flatOptions,\n            ...groupPseudoOptions,\n            ...optionAsGroup.options,\n          ],\n          navigationOptions: [\n            ...acc.navigationOptions,\n            ...optionAsGroup.options,\n          ],\n        }\n      }\n      return {\n        flatOptions: [...acc.flatOptions, option],\n        navigationOptions: [\n          ...acc.navigationOptions,\n          option as SelectOptionObject,\n        ],\n      }\n    },\n    { flatOptions: [], navigationOptions: [] }\n  )\n\n/**\n * Takes potentially grouped options and returns 2 arrays of flattened options:\n * 1) flatOptions that includes dividers & headers (used for windowing), and\n * 2) navigationOptions that only includes options with values\n * @param options\n */\nexport const useFlatOptions = (options?: SelectOptionProps[]) => {\n  return useMemo(() => {\n    if (!options)\n      return { flatOptions: undefined, navigationOptions: undefined }\n\n    return getFlatOptions(options)\n  }, [options])\n}\n"],"mappings":";;AAKA,SAASA,OAAO,QAAQ,OAAO;AAQ/B,OAAO,MAAMC,cAAc,GAAIC,OAA4B,IACzDA,OAAO,CAACC,MAAM,CACZ,CACEC,GAGC,EACDC,MAAyB,KACtB;EACH,MAAMC,aAAa,GAAGD,MAAgC;EACtD,IAAIC,aAAa,CAACJ,OAAO,EAAE;IAEzB,MAAMK,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAID,aAAa,CAACE,KAAK,EAAE;MAEvBD,kBAAkB,CAACE,IAAI,CAAC;QAAED,KAAK,EAAEF,aAAa,CAACE;MAAM,CAAC,CAAC;IACzD;IACA,OAAO;MACLE,WAAW,EAAE,CACX,GAAGN,GAAG,CAACM,WAAW,EAClB,GAAGH,kBAAkB,EACrB,GAAGD,aAAa,CAACJ,OAAO,CACzB;MACDS,iBAAiB,EAAE,CACjB,GAAGP,GAAG,CAACO,iBAAiB,EACxB,GAAGL,aAAa,CAACJ,OAAO;IAE5B,CAAC;EACH;EACA,OAAO;IACLQ,WAAW,EAAE,CAAC,GAAGN,GAAG,CAACM,WAAW,EAAEL,MAAM,CAAC;IACzCM,iBAAiB,EAAE,CACjB,GAAGP,GAAG,CAACO,iBAAiB,EACxBN,MAAM;EAEV,CAAC;AACH,CAAC,EACD;EAAEK,WAAW,EAAE,EAAE;EAAEC,iBAAiB,EAAE;AAAG,CAAC,CAC3C;;AAQH,OAAO,MAAMC,cAAc,GAAIV,OAA6B,IAAK;EAC/D,OAAOF,OAAO,CAAC,MAAM;IACnB,IAAI,CAACE,OAAO,EACV,OAAO;MAAEQ,WAAW,EAAEG,SAAS;MAAEF,iBAAiB,EAAEE;IAAU,CAAC;IAEjE,OAAOZ,cAAc,CAACC,OAAO,CAAC;EAChC,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;AACf,CAAC"}