{"version":3,"file":"InputTime.spec.js","names":["React","fireEvent","screen","renderWithTheme","InputTime","globalConsole","global","console","beforeEach","error","jest","fn","warn","afterEach","resetAllMocks","selectSubInputs","mockProps","inputHour","getByTestId","inputMinute","inputPeriod","test","onChange","keyDown","key","keyCode","expect","not","toHaveBeenCalled","toHaveBeenCalledWith","value","toEqual","undefined","defaultValue","format","queryByTestId","toBeInTheDocument","onValidationFail","toHaveBeenCalledTimes"],"sources":["../../../../../src/Form/Inputs/InputTime/InputTime.spec.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { fireEvent, screen } from '@testing-library/react'\nimport { renderWithTheme } from '@looker/components-test-utils'\nimport type { InputTimeProps } from './InputTime'\nimport { InputTime } from './InputTime'\n\nconst globalConsole = global.console\n\nbeforeEach(() => {\n  global.console = {\n    error: jest.fn(),\n    warn: jest.fn(),\n  } as unknown as Console\n})\n\nafterEach(() => {\n  jest.resetAllMocks()\n  global.console = globalConsole\n})\n\nconst selectSubInputs = (mockProps: any) => {\n  renderWithTheme(<InputTime {...mockProps} />)\n  const inputHour = screen.getByTestId('input-hour')\n  const inputMinute = screen.getByTestId('input-minute')\n  const inputPeriod = screen.getByTestId('input-period')\n\n  return {\n    inputHour,\n    inputMinute,\n    inputPeriod,\n  }\n}\n\ntest('fires onChange ONLY when all fields are filled in', () => {\n  const mockProps: InputTimeProps = {\n    onChange: jest.fn(),\n  }\n\n  const { inputHour, inputMinute, inputPeriod } = selectSubInputs(mockProps)\n\n  fireEvent.keyDown(inputHour, {\n    key: '1',\n    keyCode: 49,\n  })\n\n  expect(mockProps.onChange).not.toHaveBeenCalled()\n\n  fireEvent.keyDown(inputMinute, {\n    key: '1',\n    keyCode: 49,\n  })\n\n  expect(mockProps.onChange).not.toHaveBeenCalled()\n\n  fireEvent.keyDown(inputPeriod, {\n    key: 'p',\n  })\n\n  // convert '01:01 PM' to 24-hour time ('13:01') and call onChange\n  expect(mockProps.onChange).toHaveBeenCalledWith('13:01')\n})\n\ntest('fires onChange when any sub-input is cleared', () => {\n  const mockProps: InputTimeProps = {\n    onChange: jest.fn(),\n    value: '14:52',\n  }\n\n  const { inputHour } = selectSubInputs(mockProps)\n\n  expect(mockProps.onChange).not.toHaveBeenCalled()\n  expect((inputHour as HTMLInputElement).value).toEqual('02')\n\n  // reset sub-input value\n  fireEvent.keyDown(inputHour, {\n    key: 'Backspace',\n  })\n\n  expect((inputHour as HTMLInputElement).value).toEqual('')\n  expect(mockProps.onChange).toHaveBeenCalledWith(undefined)\n})\n\ntest('accepts a 24-hour time value', () => {\n  const mockProps: InputTimeProps = {\n    value: '14:52',\n  }\n\n  const { inputHour, inputMinute, inputPeriod } = selectSubInputs(mockProps)\n\n  expect((inputHour as HTMLInputElement).value).toEqual('02')\n  expect((inputMinute as HTMLInputElement).value).toEqual('52')\n  expect((inputPeriod as HTMLInputElement).value).toEqual('PM')\n})\n\ntest('accepts a 24-hour time defautValue', () => {\n  const mockProps: InputTimeProps = {\n    defaultValue: '14:52',\n  }\n\n  const { inputHour, inputMinute, inputPeriod } = selectSubInputs(mockProps)\n\n  expect((inputHour as HTMLInputElement).value).toEqual('02')\n  expect((inputMinute as HTMLInputElement).value).toEqual('52')\n  expect((inputPeriod as HTMLInputElement).value).toEqual('PM')\n})\n\ntest('ignores invalid time value string', () => {\n  const mockProps: InputTimeProps = {\n    value: 'cheesecake',\n  }\n\n  const { inputHour, inputMinute, inputPeriod } = selectSubInputs(mockProps)\n\n  expect((inputHour as HTMLInputElement).value).toEqual('')\n  expect((inputMinute as HTMLInputElement).value).toEqual('')\n  expect((inputPeriod as HTMLInputElement).value).toEqual('')\n\n  // eslint-disable-next-line no-console\n  expect(console.error).toHaveBeenCalledWith(\n    'Invalid time (\"cheesecake\") passed to <InputTime />. Value should be formatted as a 24-hour string (e.g. value=\"02:00\" or value=\"23:15\").'\n  )\n})\n\ntest('clears child input if an invalid number is entered', () => {\n  const mockProps: InputTimeProps = {\n    onChange: jest.fn(),\n  }\n\n  const { inputMinute } = selectSubInputs(mockProps)\n\n  fireEvent.keyDown(inputMinute, {\n    key: '7',\n    keyCode: 55,\n  })\n\n  expect((inputMinute as HTMLInputElement).value).toEqual('07')\n\n  // pressing 7 a second time would be an attempt to enter \"77\" into the minute field\n  fireEvent.keyDown(inputMinute, {\n    key: '7',\n    keyCode: 55,\n  })\n\n  // invalid input causes field to clear\n  expect((inputMinute as HTMLInputElement).value).toEqual('')\n})\n\ntest('renders 24 hour formatted time', () => {\n  const mockProps: any = {\n    format: '24h',\n    value: '23:32',\n  }\n\n  renderWithTheme(<InputTime {...mockProps} />)\n  const inputHour = screen.getByTestId('input-hour')\n  const inputMinute = screen.getByTestId('input-minute')\n  const inputPeriod = screen.queryByTestId('input-period')\n\n  expect((inputHour as HTMLInputElement).value).toEqual('23')\n  expect((inputMinute as HTMLInputElement).value).toEqual('32')\n  expect(inputPeriod).not.toBeInTheDocument()\n})\n\ntest('up/down arrow keys cycle through possible values', () => {\n  const mockProps: InputTimeProps = {}\n\n  const { inputHour, inputMinute, inputPeriod } = selectSubInputs(mockProps)\n\n  // HOUR\n  // --------------------------------------\n  fireEvent.keyDown(inputHour, {\n    key: 'ArrowUp',\n    keyCode: 38,\n  })\n  expect((inputHour as HTMLInputElement).value).toEqual('01')\n\n  fireEvent.keyDown(inputHour, {\n    key: 'ArrowDown',\n    keyCode: 40,\n  })\n  expect((inputHour as HTMLInputElement).value).toEqual('12')\n\n  // MINUTE\n  // --------------------------------------\n  fireEvent.keyDown(inputMinute, {\n    key: 'ArrowUp',\n    keyCode: 38,\n  })\n  expect((inputMinute as HTMLInputElement).value).toEqual('01')\n\n  fireEvent.keyDown(inputMinute, {\n    key: 'ArrowDown',\n    keyCode: 40,\n  })\n  fireEvent.keyDown(inputMinute, {\n    key: 'ArrowDown',\n    keyCode: 40,\n  })\n  expect((inputMinute as HTMLInputElement).value).toEqual('59')\n\n  // PERIOD\n  // --------------------------------------\n  fireEvent.keyDown(inputPeriod, {\n    key: 'ArrowUp',\n    keyCode: 38,\n  })\n  expect((inputPeriod as HTMLInputElement).value).toEqual('PM')\n\n  fireEvent.keyDown(inputPeriod, {\n    key: 'ArrowDown',\n    keyCode: 40,\n  })\n  expect((inputPeriod as HTMLInputElement).value).toEqual('AM')\n})\n\ntest('fires onValidationFail callback when an invalid time value prop is passed in', () => {\n  const mockProps: InputTimeProps = {\n    onValidationFail: jest.fn(),\n    value: 'Stardate 2004.14',\n  }\n\n  expect(mockProps.onValidationFail).not.toHaveBeenCalled()\n\n  const { inputHour, inputMinute, inputPeriod } = selectSubInputs(mockProps)\n\n  expect(mockProps.onValidationFail).toHaveBeenCalledTimes(1)\n  expect((inputHour as HTMLInputElement).value).toEqual('')\n  expect((inputMinute as HTMLInputElement).value).toEqual('')\n  expect((inputPeriod as HTMLInputElement).value).toEqual('')\n})\n"],"mappings":"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"}