{"version":3,"file":"useKeyDown.js","names":["findIndex","throttle","xorWith","useContext","ComboboxContext","ComboboxMultiContext","ComboboxActionType","ComboboxState","useKeyDown","context","contextMulti","contextToUse","transition","data","onChange","optionsRef","state","autoCompletePropRef","persistSelectionPropRef","inputReadOnlyPropRef","closeOnSelectPropRef","navigationOption","checkOnChange","newOptions","options","o1","o2","value","selectOption","SELECT_WITH_KEYBOARD","persistSelection","current","ESCAPE","handleKeyDown","event","persist","key","preventDefault","IDLE","NAVIGATE","index","atBottom","length","option","undefined","firstOption","nextOption","lastOption","NAVIGATING"],"sources":["../../../../../../src/Form/Inputs/Combobox/utils/useKeyDown.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\n// Much of the following is pulled from https://github.com/reach/reach-ui\n// because their work is fantastic (but is not in TypeScript)\nimport findIndex from 'lodash/findIndex'\nimport throttle from 'lodash/throttle'\nimport xorWith from 'lodash/xorWith'\nimport type { KeyboardEvent } from 'react'\nimport { useContext } from 'react'\nimport { ComboboxContext, ComboboxMultiContext } from '../ComboboxContext'\nimport type { ComboboxMultiCallback, ComboboxCallback } from '../types'\nimport type { ComboboxMultiData } from './state'\nimport { ComboboxActionType, ComboboxState } from './state'\n\n// We want the same events when the input or the popup have focus (HOW COOL ARE\n// HOOKS BTW?) This is probably the hairiest piece but it's not bad.\nexport function useKeyDown() {\n  const context = useContext(ComboboxContext)\n  const contextMulti = useContext(ComboboxMultiContext)\n  const contextToUse = context.transition ? context : contextMulti\n  const {\n    data,\n    onChange,\n    optionsRef,\n    state,\n    transition,\n    autoCompletePropRef,\n    persistSelectionPropRef,\n    inputReadOnlyPropRef,\n    closeOnSelectPropRef,\n  } = contextToUse\n  const { navigationOption } = data\n\n  function checkOnChange() {\n    if (onChange) {\n      if (context.transition) {\n        // not Multi\n        ;(onChange as ComboboxCallback)(navigationOption)\n      } else {\n        const newOptions = xorWith(\n          (data as ComboboxMultiData).options,\n          navigationOption ? [navigationOption] : [],\n          (o1, o2) => o1.value === o2.value\n        )\n        ;(onChange as ComboboxMultiCallback)(newOptions)\n      }\n    }\n  }\n\n  function selectOption() {\n    checkOnChange()\n    transition &&\n      transition(ComboboxActionType.SELECT_WITH_KEYBOARD, {\n        persistSelection:\n          persistSelectionPropRef && persistSelectionPropRef.current,\n      })\n    if (closeOnSelectPropRef && closeOnSelectPropRef.current) {\n      // Closing an opened list\n      transition && transition(ComboboxActionType.ESCAPE)\n    }\n  }\n\n  return throttle(function handleKeyDown(\n    event: KeyboardEvent<HTMLUListElement | HTMLInputElement>\n  ) {\n    // Necessary b/c of throttle, to avoid https://reactjs.org/docs/events.html#event-pooling warning\n    event.persist()\n    const options = optionsRef ? optionsRef.current : []\n    switch (event.key) {\n      case 'ArrowDown': {\n        // Don't scroll the page\n        event.preventDefault()\n\n        if (state === ComboboxState.IDLE) {\n          // Opening a closed list\n          transition &&\n            transition(ComboboxActionType.NAVIGATE, {\n              persistSelection:\n                persistSelectionPropRef && persistSelectionPropRef.current,\n            })\n        } else {\n          const index = navigationOption\n            ? findIndex(options, ['value', navigationOption.value])\n            : -1\n          const atBottom = index === options.length - 1\n          if (atBottom) {\n            if (autoCompletePropRef && autoCompletePropRef.current) {\n              // Go back to the value the user has typed because we are\n              // auto-completing and they need to be able to get back to what\n              // they had typed w/o having to backspace out.\n              transition &&\n                transition(ComboboxActionType.NAVIGATE, { option: undefined })\n            } else {\n              // cycle through\n              const firstOption = options[0]\n              transition &&\n                transition(ComboboxActionType.NAVIGATE, { option: firstOption })\n            }\n          } else {\n            // Go to the next item in the list\n            const nextOption = options[(index + 1) % options.length]\n            transition &&\n              transition(ComboboxActionType.NAVIGATE, { option: nextOption })\n          }\n        }\n        break\n      }\n      // A lot of duplicate code with ArrowDown up next, I'm already over it.\n      case 'ArrowUp': {\n        // Don't scroll the page\n        event.preventDefault()\n\n        if (state === ComboboxState.IDLE) {\n          // Opening a closed list\n          transition &&\n            transition(ComboboxActionType.NAVIGATE, {\n              persistSelection:\n                persistSelectionPropRef && persistSelectionPropRef.current,\n            })\n        } else {\n          const index = navigationOption\n            ? findIndex(options, ['value', navigationOption.value])\n            : -1\n          if (index === 0) {\n            if (autoCompletePropRef && autoCompletePropRef.current) {\n              // Go back to the value the user has typed because we are\n              // auto-completing and they need to be able to get back to what\n              // they had typed w/o having to backspace out.\n              transition &&\n                transition(ComboboxActionType.NAVIGATE, { option: undefined })\n            } else {\n              // cycle through\n              const lastOption = options[options.length - 1]\n              transition &&\n                transition(ComboboxActionType.NAVIGATE, { option: lastOption })\n            }\n          } else if (index === -1) {\n            // displaying the user's value, so go select the last one\n            const option = options[options.length - 1]\n            transition && transition(ComboboxActionType.NAVIGATE, { option })\n          } else {\n            // normal case, select previous\n            const nextOption =\n              options[(index - 1 + options.length) % options.length]\n            transition &&\n              transition &&\n              transition(ComboboxActionType.NAVIGATE, { option: nextOption })\n          }\n        }\n        break\n      }\n      case ' ':\n      case 'Spacebar': {\n        if (\n          // inputReadOnly makes this more like a native select, which opens on spacebar\n          // (otherwise the user is actually typing a space)\n          inputReadOnlyPropRef &&\n          inputReadOnlyPropRef.current &&\n          state === ComboboxState.NAVIGATING &&\n          navigationOption !== undefined\n        ) {\n          selectOption()\n        }\n        break\n      }\n      case 'Enter': {\n        if (\n          state === ComboboxState.NAVIGATING &&\n          navigationOption !== undefined\n        ) {\n          // don't want to submit forms\n          event.preventDefault()\n          selectOption()\n        }\n        break\n      }\n    }\n  },\n  50)\n}\n"],"mappings":"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"}