{"version":3,"file":"types.js","names":[],"sources":["../../../../../src/Form/Inputs/Combobox/types.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type {\n  ColorProps,\n  CompatibleHTMLProps,\n  FlexboxProps,\n  LayoutProps,\n  SpaceProps,\n  TypographyProps,\n} from '@looker/design-tokens'\nimport type { ReactNode } from 'react'\nimport type {\n  InputChipsCommonProps,\n  InputChipsInputControlProps,\n  InputChipsValidationProps,\n} from '../InputChips'\nimport type { InputTextProps } from '../InputText'\n\nexport type OptionIndicatorProps = Partial<ComboboxOptionStatuses> &\n  ComboboxOptionObject\n\nexport type ComboboxOptionIndicatorFunction = (\n  indicatorProps: OptionIndicatorProps\n) => ReactNode\n\nexport interface ComboboxOptionIndicatorProps\n  extends Partial<ComboboxOptionStatuses>,\n    CompatibleHTMLProps<HTMLDivElement> {\n  /**\n   * Customize the area to the left of the label, which by default\n   * renders a check mark for the selected option or a spacer\n   * Use a ReactNode, function component or render-prop-style function, or false to remove\n   */\n  indicator?: ReactNode | ComboboxOptionIndicatorFunction\n  isMulti?: boolean\n}\n\nexport interface ComboboxOptionObject {\n  /**\n   * Additional data associated with the option, will be passed to onChange.\n   */\n  label?: string\n  /**\n   * The value to match against when suggesting.\n   */\n  value: string\n  /**\n   * Highlight and Scroll to this option if it appears in a long list.\n   */\n  scrollIntoView?: boolean\n}\n\nexport interface HighlightTextProps {\n  /**\n   * Highlight the matching option text as the user types into the input\n   * @default true\n   */\n  highlightText?: boolean\n}\n\nexport interface ComboboxOptionProps\n  extends ComboboxOptionObject,\n    Pick<ComboboxOptionIndicatorProps, 'indicator'>,\n    HighlightTextProps,\n    ColorProps,\n    FlexboxProps,\n    LayoutProps,\n    SpaceProps,\n    TypographyProps,\n    Omit<CompatibleHTMLProps<HTMLLIElement>, 'data' | 'value'> {\n  /**\n   * Optional. If omitted, the `value` will be used as the children like:\n   * `<ComboboxOption value=\"Seattle, Tacoma, Washington\" />`. But if you need\n   * to control a bit more, you can put whatever children you want, but make\n   * sure to render a `ComboboxOptionText` as well, so the value is still\n   * displayed with the text highlighting on the matched portions.\n   *\n   * @example\n   *   <ComboboxOption value=\"Apple\" />\n   *     üçé <ComboboxOptionText />\n   *   </ComboboxOption>\n   */\n  children?: ReactNode\n}\n\nexport type MaybeComboboxOptionObject = ComboboxOptionObject | undefined\nexport type ComboboxOptionType =\n  | MaybeComboboxOptionObject\n  | ComboboxOptionObject[]\n\nexport type ComboboxCallback<\n  TOption extends ComboboxOptionType = MaybeComboboxOptionObject\n> = (option: TOption) => void\n\nexport type ComboboxMultiCallback = ComboboxCallback<ComboboxOptionObject[]>\n\nexport interface ComboboxOptionStatuses {\n  isActive: boolean\n  isSelected: boolean\n}\n\nexport interface ComboboxInputCommonProps {\n  /**\n   * If true, when the user clicks inside the text box the current value will\n   * be selected. Use this if the user is likely to delete all the text anyway\n   * (like the URL bar in browsers).\n   *\n   * However, if the user is likely to want to tweak the value, leave this\n   * false, like a google search--the user is likely wanting to edit their\n   * search, not replace it completely.\n   */\n  selectOnClick?: boolean\n  /**\n   * Determines if the value in the input changes or not as the user navigates\n   * with the keyboard. If true, the value changes, if false the value doesn't\n   * change.\n   *\n   * Set this to false when you don't really need the value from the input but\n   * want to populate some other state (like the recipient selector in an email client).\n   * But if your input is more like a normal `<input type=\"text\"/>`, then leave\n   * the `true` default.\n   */\n  autoComplete?: boolean\n  /**\n   * customize the tooltip on the clear icon\n   */\n  clearIconLabel?: string\n  isClearable?: boolean\n  /**\n   * Makes the inputted value the source of truth, whether it matches an option or not\n   * @default false\n   */\n  freeInput?: boolean\n  inputReadOnly?: boolean\n}\n\nexport interface ComboboxInputProps\n  extends Omit<InputTextProps, 'autoComplete' | 'value' | 'defaultValue'>,\n    ComboboxInputCommonProps {\n  defaultValue?: string\n  summary?: string\n  value?: string\n}\n\nexport interface ComboboxMultiInputProps\n  extends Omit<InputChipsCommonProps, 'autoComplete'>,\n    InputChipsValidationProps,\n    ComboboxInputCommonProps,\n    Partial<InputChipsInputControlProps> {\n  onClear?: () => void\n  /**\n   * Allows inputting of values (whether found in options or not) via typing or pasting\n   * Use validate, onValidationFail, and onDuplicate for validation on typed or pasted values\n   * @default false\n   */\n  freeInput?: boolean\n}\n"],"mappings":""}