{"version":3,"file":"useOptionEvents.js","names":["xorWith","useContext","useWrapEvent","ComboboxActionType","useOptionEvents","props","context","label","value","onClick","onMouseEnter","data","onChange","transition","closeOnSelectPropRef","isScrollingRef","options","handleClick","option","o1","o2","SELECT_WITH_CLICK","current","ESCAPE","handleMouseEnter","requestAnimationFrame","NAVIGATE"],"sources":["../../../../../../src/Form/Inputs/Combobox/utils/useOptionEvents.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport xorWith from 'lodash/xorWith'\nimport type { Context } from 'react'\nimport { useContext } from 'react'\nimport { useWrapEvent } from '../../../../utils'\nimport type {\n  ComboboxContextProps,\n  ComboboxMultiContextProps,\n} from '../ComboboxContext'\nimport type {\n  ComboboxCallback,\n  ComboboxMultiCallback,\n  ComboboxOptionProps,\n} from '../types'\nimport type { ComboboxMultiData } from './state'\nimport { ComboboxActionType } from './state'\n\nexport function useOptionEvents<\n  CProps extends ComboboxContextProps | ComboboxMultiContextProps\n>(props: ComboboxOptionProps, context: Context<CProps>) {\n  const { label, value, onClick, onMouseEnter } = props\n  const { data, onChange, transition, closeOnSelectPropRef, isScrollingRef } =\n    useContext(context)\n  const { options } = data as ComboboxMultiData\n\n  function handleClick() {\n    const option = { label, value }\n    if (onChange) {\n      if (options) {\n        ;(onChange as ComboboxMultiCallback)(\n          xorWith(options, [option], (o1, o2) => o1.value === o2.value)\n        )\n      } else {\n        ;(onChange as ComboboxCallback)(option)\n      }\n    }\n    transition && transition(ComboboxActionType.SELECT_WITH_CLICK, { option })\n    if (closeOnSelectPropRef && closeOnSelectPropRef.current) {\n      // Closing an opened list\n      transition && transition(ComboboxActionType.ESCAPE)\n    }\n  }\n\n  const handleMouseEnter = () => {\n    // Wait for isScrollingRef.current to be updated in ComboboxList scrollHandler\n    // (mouseenter event is fired before the scroll event)\n    requestAnimationFrame(() => {\n      if (isScrollingRef?.current) return\n      const option = { label, value }\n      transition && transition(ComboboxActionType.NAVIGATE, { option })\n    })\n  }\n\n  return {\n    onClick: useWrapEvent(handleClick, onClick),\n    onMouseEnter: useWrapEvent(handleMouseEnter, onMouseEnter),\n  }\n}\n"],"mappings":";;AAKA,OAAOA,OAAO,MAAM,gBAAgB;AAEpC,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,YAAY,QAAQ,mBAAmB;AAWhD,SAASC,kBAAkB,QAAQ,SAAS;AAE5C,OAAO,SAASC,eAAe,CAE7BC,KAA0B,EAAEC,OAAwB,EAAE;EACtD,MAAM;IAAEC,KAAK;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAa,CAAC,GAAGL,KAAK;EACrD,MAAM;IAAEM,IAAI;IAAEC,QAAQ;IAAEC,UAAU;IAAEC,oBAAoB;IAAEC;EAAe,CAAC,GACxEd,UAAU,CAACK,OAAO,CAAC;EACrB,MAAM;IAAEU;EAAQ,CAAC,GAAGL,IAAyB;EAE7C,SAASM,WAAW,GAAG;IACrB,MAAMC,MAAM,GAAG;MAAEX,KAAK;MAAEC;IAAM,CAAC;IAC/B,IAAII,QAAQ,EAAE;MACZ,IAAII,OAAO,EAAE;QACX;QAAEJ,QAAQ,CACRZ,OAAO,CAACgB,OAAO,EAAE,CAACE,MAAM,CAAC,EAAE,CAACC,EAAE,EAAEC,EAAE,KAAKD,EAAE,CAACX,KAAK,KAAKY,EAAE,CAACZ,KAAK,CAAC,CAC9D;MACH,CAAC,MAAM;QACL;QAAEI,QAAQ,CAAsBM,MAAM,CAAC;MACzC;IACF;IACAL,UAAU,IAAIA,UAAU,CAACV,kBAAkB,CAACkB,iBAAiB,EAAE;MAAEH;IAAO,CAAC,CAAC;IAC1E,IAAIJ,oBAAoB,IAAIA,oBAAoB,CAACQ,OAAO,EAAE;MAExDT,UAAU,IAAIA,UAAU,CAACV,kBAAkB,CAACoB,MAAM,CAAC;IACrD;EACF;EAEA,MAAMC,gBAAgB,GAAG,MAAM;IAG7BC,qBAAqB,CAAC,MAAM;MAC1B,IAAIV,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEO,OAAO,EAAE;MAC7B,MAAMJ,MAAM,GAAG;QAAEX,KAAK;QAAEC;MAAM,CAAC;MAC/BK,UAAU,IAAIA,UAAU,CAACV,kBAAkB,CAACuB,QAAQ,EAAE;QAAER;MAAO,CAAC,CAAC;IACnE,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IACLT,OAAO,EAAEP,YAAY,CAACe,WAAW,EAAER,OAAO,CAAC;IAC3CC,YAAY,EAAER,YAAY,CAACsB,gBAAgB,EAAEd,YAAY;EAC3D,CAAC;AACH"}