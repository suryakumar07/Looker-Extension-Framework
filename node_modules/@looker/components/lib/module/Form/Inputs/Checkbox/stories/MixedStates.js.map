{"version":3,"file":"MixedStates.js","names":["React","useState","UnorderedList","FieldCheckbox","useMixedStateCheckbox","MixedStates","parentState","setParentState","appleState","setAppleState","bananaState","setBananaState","handleAppleChange","handleBananaChange","fruitTree","children","setState","state","parent","handleParentChange"],"sources":["../../../../../../src/Form/Inputs/Checkbox/stories/MixedStates.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useState } from 'react'\nimport { UnorderedList } from '../../../../UnorderedList'\nimport { FieldCheckbox } from '../../../Fields'\nimport { useMixedStateCheckbox } from '../useMixedStateCheckbox'\nimport type { MixedBoolean } from '../Checkbox'\n\nexport default function MixedStates() {\n  // Set up local state and child change handlers\n  const [parentState, setParentState] = useState(false as MixedBoolean)\n  const [appleState, setAppleState] = useState(false as MixedBoolean)\n  const [bananaState, setBananaState] = useState(true as MixedBoolean)\n  const handleAppleChange = () => setAppleState(!appleState)\n  const handleBananaChange = () => setBananaState(!bananaState)\n\n  // Establish checkbox hierarchy for use in custom hook\n  const fruitTree = {\n    children: [\n      { setState: setAppleState, state: appleState },\n      { setState: setBananaState, state: bananaState },\n    ],\n    parent: {\n      setState: setParentState,\n      state: parentState,\n    },\n  }\n\n  // Sync parent/child states and get provided parent change handler\n  const handleParentChange = useMixedStateCheckbox(fruitTree)\n\n  return (\n    <UnorderedList>\n      <li>\n        <FieldCheckbox\n          label=\"All Fruit\"\n          value=\"all-fruit\"\n          onChange={handleParentChange}\n          checked={parentState}\n        />\n      </li>\n      <li>\n        <UnorderedList pl=\"u5\">\n          <li>\n            <FieldCheckbox\n              label=\"🍏\"\n              value=\"apple\"\n              onChange={handleAppleChange}\n              checked={appleState}\n            />\n          </li>\n          <li>\n            <FieldCheckbox\n              value=\"apple\"\n              onChange={handleBananaChange}\n              checked={bananaState}\n              label=\"🍌\"\n            />\n          </li>\n        </UnorderedList>\n      </li>\n    </UnorderedList>\n  )\n}\n"],"mappings":";;AAKA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,qBAAqB,QAAQ,0BAA0B;AAGhE,eAAe,SAASC,WAAW,GAAG;EAEpC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAiB;EACrE,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAiB;EACnE,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAiB;EACpE,MAAMW,iBAAiB,GAAG,MAAMH,aAAa,CAAC,CAACD,UAAU,CAAC;EAC1D,MAAMK,kBAAkB,GAAG,MAAMF,cAAc,CAAC,CAACD,WAAW,CAAC;;EAG7D,MAAMI,SAAS,GAAG;IAChBC,QAAQ,EAAE,CACR;MAAEC,QAAQ,EAAEP,aAAa;MAAEQ,KAAK,EAAET;IAAW,CAAC,EAC9C;MAAEQ,QAAQ,EAAEL,cAAc;MAAEM,KAAK,EAAEP;IAAY,CAAC,CACjD;IACDQ,MAAM,EAAE;MACNF,QAAQ,EAAET,cAAc;MACxBU,KAAK,EAAEX;IACT;EACF,CAAC;;EAGD,MAAMa,kBAAkB,GAAGf,qBAAqB,CAACU,SAAS,CAAC;EAE3D,OACE,oBAAC,aAAa,QACZ,gCACE,oBAAC,aAAa;IACZ,KAAK,EAAC,WAAW;IACjB,KAAK,EAAC,WAAW;IACjB,QAAQ,EAAEK,kBAAmB;IAC7B,OAAO,EAAEb;EAAY,EACrB,CACC,EACL,gCACE,oBAAC,aAAa;IAAC,EAAE,EAAC;EAAI,GACpB,gCACE,oBAAC,aAAa;IACZ,KAAK,EAAC,cAAI;IACV,KAAK,EAAC,OAAO;IACb,QAAQ,EAAEM,iBAAkB;IAC5B,OAAO,EAAEJ;EAAW,EACpB,CACC,EACL,gCACE,oBAAC,aAAa;IACZ,KAAK,EAAC,OAAO;IACb,QAAQ,EAAEK,kBAAmB;IAC7B,OAAO,EAAEH,WAAY;IACrB,KAAK,EAAC;EAAI,EACV,CACC,CACS,CACb,CACS;AAEpB"}