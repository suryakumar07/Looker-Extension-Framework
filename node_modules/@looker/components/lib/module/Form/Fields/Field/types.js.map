{"version":3,"file":"types.js","names":[],"sources":["../../../../../src/Form/Fields/Field/types.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { WidthProps } from '@looker/design-tokens'\nimport type { FocusEvent, ReactNode } from 'react'\nimport type { ValidationMessageProps } from '../../ValidationMessage/ValidationMessage'\nimport type { LabelProps } from '../../Label'\n\ntype FieldLabelBaseProps = {\n  /**\n   * Id of the input element to match a label to.\n   */\n  id?: string\n  /**\n   * Defines the label for the field.\n   * I18n recommended: content that is user visible should be treated for i18n\n   */\n  label?: ReactNode\n  /**\n   * Whether or not the field should display a `*` denoting it is required.\n   */\n  required?: boolean\n}\n\nexport type UseFloatingLabelProps = {\n  /**\n   * Internal only\n   * @private\n   */\n  hasValue?: boolean\n  /**\n   * Internal only\n   * @private\n   */\n  labelOffset?: string\n  /**\n   * Internal only\n   * @private\n   */\n  checkValueOnBlur?: false | ((e: FocusEvent) => boolean)\n}\n\nexport type FieldBaseProps = FieldLabelBaseProps & {\n  className?: string\n  children?: ReactNode\n  /**\n   * Allows Field to adjust to the width of the input (InputText and Select)\n   */\n  autoResize?: boolean\n  disabled?: boolean\n  /**\n   * notes and details added to the top right corner of the field\n   * I18n recommended: content that is user visible should be treated for i18n\n   */\n  detail?: ReactNode\n  /**\n   * notes and more info added to the bottom of the field\n   * I18n recommended: content that is user visible should be treated for i18n\n   */\n  description?: ReactNode\n  /**\n   * Determines where to place the label in relation to the input.\n   * @default false\n   */\n  inline?: boolean\n  /**\n   * Holds the type of validation (error, warning, etc.) and corresponding message.\n   */\n  validationMessage?: ValidationMessageProps\n}\n\nexport type HideLabelProps = {\n  /**\n   * Label will be visually hidden\n   * @default false\n   */\n  hideLabel?: boolean\n  /**\n   * Apply label using aria-label, there will be no visible label in the UI\n   */\n  ariaLabelOnly?: boolean\n}\n\nexport type FieldProps = FieldBaseProps & WidthProps & HideLabelProps\n\nexport type FloatingLabelFieldProps = FieldProps & {\n  /**\n   * External label placement above the field\n   * @default false\n   */\n  externalLabel?: boolean\n}\n\nexport type FloatingLabelFieldPropsInternal = FloatingLabelFieldProps &\n  UseFloatingLabelProps\n\nexport type FieldLabelProps = HideLabelProps & FieldLabelBaseProps & LabelProps\n"],"mappings":""}