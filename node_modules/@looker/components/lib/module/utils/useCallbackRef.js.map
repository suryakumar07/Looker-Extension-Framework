{"version":3,"file":"useCallbackRef.js","names":["useCallback","useState","useForkedRef","useCallbackRef","forwardedRef","currentElement","setCurrentElement","callbackRef","node","forkedRef"],"sources":["../../../src/utils/useCallbackRef.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { Ref } from 'react'\nimport { useCallback, useState } from 'react'\nimport { useForkedRef } from './useForkedRef'\n\n// This hook is for when a dom node needs to be \"seen\" in some useEffect logic.\n// Since currentElement is state, it will be effective when used in a dependency array\n// while a mutable object generated by useRef isn't, and won't.\n\nexport function useCallbackRef<T extends HTMLElement = HTMLElement>(\n  forwardedRef?: Ref<T>\n): [T | null, (node: T | null) => void] {\n  const [currentElement, setCurrentElement] = useState<T | null>(null)\n  const callbackRef = useCallback((node: T | null) => {\n    setCurrentElement(node)\n  }, [])\n  const forkedRef = useForkedRef<T>(forwardedRef, callbackRef)\n  return [currentElement, forkedRef]\n}\n"],"mappings":";;AAKA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,SAASC,YAAY,QAAQ,gBAAgB;;AAM7C,OAAO,SAASC,cAAc,CAC5BC,YAAqB,EACiB;EACtC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGL,QAAQ,CAAW,IAAI,CAAC;EACpE,MAAMM,WAAW,GAAGP,WAAW,CAAEQ,IAAc,IAAK;IAClDF,iBAAiB,CAACE,IAAI,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EACN,MAAMC,SAAS,GAAGP,YAAY,CAAIE,YAAY,EAAEG,WAAW,CAAC;EAC5D,OAAO,CAACF,cAAc,EAAEI,SAAS,CAAC;AACpC"}