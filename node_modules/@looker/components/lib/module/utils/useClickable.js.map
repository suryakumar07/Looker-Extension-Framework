{"version":3,"file":"useClickable.js","names":["useMemo","useFocusVisible","useClickable","onClick","disabled","role","rest","onKeyUp","focusVisibleProps","e","shouldHandle","currentTarget","target","key","undefined","tabIndex"],"sources":["../../../src/utils/useClickable.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport type { KeyboardEvent, MouseEvent as ReactMouseEvent } from 'react'\nimport { useMemo } from 'react'\nimport type { FocusVisibleProps } from './useFocusVisible'\nimport { useFocusVisible } from './useFocusVisible'\n\n// Helper interfaces for components using this hook\nexport type GenericOnClick<E extends HTMLElement> = (\n  e: ReactMouseEvent<E, MouseEvent> | KeyboardEvent<E>\n) => void\n\nexport interface GenericClickProps<E extends HTMLElement>\n  extends Omit<CompatibleHTMLProps<E>, 'onClick'> {\n  onClick?: GenericOnClick<E>\n}\n\ntype Attributes = 'disabled' | 'onBlur' | 'onKeyUp' | 'role'\n\nexport interface UseClickableProps<E extends HTMLElement>\n  extends Pick<CompatibleHTMLProps<E>, Attributes>,\n    Pick<GenericClickProps<E>, 'onClick'> {}\n\nexport interface UseClickableResult<E extends HTMLElement>\n  extends Pick<CompatibleHTMLProps<E>, Attributes | 'onClick' | 'tabIndex'>,\n    FocusVisibleProps {}\n/**\n * This hook provides keyboard accessibility for any component that renders a non-button element\n * that is both focus-able and clickable. The component should handle styling for focusVisible.\n */\nexport function useClickable<E extends HTMLElement>({\n  onClick,\n  disabled,\n  role,\n  ...rest\n}: UseClickableProps<E>): UseClickableResult<E> {\n  const { onKeyUp, ...focusVisibleProps } = useFocusVisible(rest)\n\n  return useMemo(\n    () => ({\n      disabled,\n      ...focusVisibleProps,\n      onClick: (e: ReactMouseEvent<E, MouseEvent>) => {\n        if (!disabled) {\n          // use onClick from useFocusVisible â€“ it's the true click handler\n          onClick?.(e)\n        }\n      },\n      onKeyUp: (e: KeyboardEvent<E>) => {\n        const shouldHandle = !disabled && e.currentTarget === e.target\n        if (shouldHandle) {\n          switch (e.key) {\n            case 'Enter':\n            case ' ':\n              onClick?.(e)\n              break\n          }\n        }\n        onKeyUp(e)\n      },\n      // if onClick is used, role should be 'button' unless otherwise specified\n      // otherwise undefined b/c depending on usage, 'button' could be misleading\n      role: role || (onClick ? 'button' : undefined),\n      tabIndex: disabled ? undefined : 0,\n    }),\n    [disabled, role, onClick, onKeyUp, focusVisibleProps]\n  )\n}\n"],"mappings":";;;;;;;AAOA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,eAAe,QAAQ,mBAAmB;;AAyBnD,OAAO,SAASC,YAAY,OAKoB;EAAA,IALI;MAClDC,OAAO;MACPC,QAAQ;MACRC;IAEoB,CAAC;IADlBC,IAAI;EAEP,yBAA0CL,eAAe,CAACK,IAAI,CAAC;IAAzD;MAAEC;IAA8B,CAAC;IAAnBC,iBAAiB;EAErC,OAAOR,OAAO,CACZ;IACEI;EAAQ,GACLI,iBAAiB;IACpBL,OAAO,EAAGM,CAAiC,IAAK;MAC9C,IAAI,CAACL,QAAQ,EAAE;QAEbD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAGM,CAAC,CAAC;MACd;IACF,CAAC;IACDF,OAAO,EAAGE,CAAmB,IAAK;MAChC,MAAMC,YAAY,GAAG,CAACN,QAAQ,IAAIK,CAAC,CAACE,aAAa,KAAKF,CAAC,CAACG,MAAM;MAC9D,IAAIF,YAAY,EAAE;QAChB,QAAQD,CAAC,CAACI,GAAG;UACX,KAAK,OAAO;UACZ,KAAK,GAAG;YACNV,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAGM,CAAC,CAAC;YACZ;QAAK;MAEX;MACAF,OAAO,CAACE,CAAC,CAAC;IACZ,CAAC;IAGDJ,IAAI,EAAEA,IAAI,KAAKF,OAAO,GAAG,QAAQ,GAAGW,SAAS,CAAC;IAC9CC,QAAQ,EAAEX,QAAQ,GAAGU,SAAS,GAAG;EAAC,EAClC,EACF,CAACV,QAAQ,EAAEC,IAAI,EAAEF,OAAO,EAAEI,OAAO,EAAEC,iBAAiB,CAAC,CACtD;AACH"}