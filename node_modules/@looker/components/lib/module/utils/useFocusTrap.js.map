{"version":3,"file":"useFocusTrap.js","names":["useMemo","useRef","FocusTrapContext","useTrapStack","useFocusTrap","clickOutsideDeactivates","props","returnFocusRef","options","context"],"sources":["../../../src/utils/useFocusTrap.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useMemo, useRef } from 'react'\nimport type { FocusTrapOptions } from '@looker/components-providers'\nimport { FocusTrapContext } from '@looker/components-providers'\nimport type { UseTrapStackBaseProps } from './useTrapStack'\nimport { useTrapStack } from './useTrapStack'\n\nexport const useFocusTrap = <E extends HTMLElement = HTMLElement>({\n  clickOutsideDeactivates,\n  ...props\n}: UseTrapStackBaseProps<E> & { clickOutsideDeactivates?: boolean }) => {\n  const returnFocusRef = useRef<Element>(null)\n  const options = useMemo(\n    () => ({ clickOutsideDeactivates, returnFocusRef }),\n    [returnFocusRef, clickOutsideDeactivates]\n  )\n  return useTrapStack<E, FocusTrapOptions>({\n    context: FocusTrapContext,\n    // If options.returnFocusRef is set, it will override this one\n    options,\n    ...props,\n  })\n}\n"],"mappings":";;;;;;AAKA,SAASA,OAAO,EAAEC,MAAM,QAAQ,OAAO;AAEvC,SAASC,gBAAgB,QAAQ,8BAA8B;AAE/D,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,OAAO,MAAMC,YAAY,GAAG,QAG4C;EAAA,IAHN;MAChEC;IAEgE,CAAC;IAD9DC,KAAK;EAER,MAAMC,cAAc,GAAGN,MAAM,CAAU,IAAI,CAAC;EAC5C,MAAMO,OAAO,GAAGR,OAAO,CACrB,OAAO;IAAEK,uBAAuB;IAAEE;EAAe,CAAC,CAAC,EACnD,CAACA,cAAc,EAAEF,uBAAuB,CAAC,CAC1C;EACD,OAAOF,YAAY;IACjBM,OAAO,EAAEP,gBAAgB;IAEzBM;EAAO,GACJF,KAAK,EACR;AACJ,CAAC"}