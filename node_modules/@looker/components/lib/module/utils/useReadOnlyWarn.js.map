{"version":3,"file":"useReadOnlyWarn.js","names":["useEffect","useRef","useReadOnlyWarn","name","value","onChange","unintentionalReadOnly","console","error","current"],"sources":["../../../src/utils/useReadOnlyWarn.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { useEffect, useRef } from 'react'\n\n// render a console warning if developers pass in a value without a change listener\nexport function useReadOnlyWarn<V, CB>(name: string, value: V, onChange: CB) {\n  const unintentionalReadOnly = useRef(false)\n  useEffect(() => {\n    if (value && !onChange) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `Warning: Failed prop type: You provided a \\`value\\` prop to <${name} /> without an \\`onChange\\` handler. This will render a read-only field. If the field should be mutable use \\`defaultValue\\` instead. Otherwise, please provide an \\`onChange\\` callback.`\n      )\n      unintentionalReadOnly.current = true\n    }\n  }, [value, onChange, name])\n  return unintentionalReadOnly.current\n}\n"],"mappings":";AAIA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAGzC,OAAO,SAASC,eAAe,CAAQC,IAAY,EAAEC,KAAQ,EAAEC,QAAY,EAAE;EAC3E,MAAMC,qBAAqB,GAAGL,MAAM,CAAC,KAAK,CAAC;EAC3CD,SAAS,CAAC,MAAM;IACd,IAAII,KAAK,IAAI,CAACC,QAAQ,EAAE;MAEtBE,OAAO,CAACC,KAAK,CACV,gEAA+DL,IAAK,2LAA0L,CAChQ;MACDG,qBAAqB,CAACG,OAAO,GAAG,IAAI;IACtC;EACF,CAAC,EAAE,CAACL,KAAK,EAAEC,QAAQ,EAAEF,IAAI,CAAC,CAAC;EAC3B,OAAOG,qBAAqB,CAACG,OAAO;AACtC"}