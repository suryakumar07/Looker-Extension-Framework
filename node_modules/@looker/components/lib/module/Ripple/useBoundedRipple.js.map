{"version":3,"file":"useBoundedRipple.js","names":["useMeasuredElement","useCallbackRef","useRipple","useBoundedRipple","ref","forwardedRef","props","element","height","width","result","bounded"],"sources":["../../../src/Ripple/useBoundedRipple.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { useMeasuredElement, useCallbackRef } from '../utils'\nimport { useRipple } from './useRipple'\nimport type { UseBoundedRippleProps, UseBoundedRippleResponse } from './types'\n\n/**\n * @returns callbacks should be mapped to DOM event handlers (see useRippleHandlers)\n * and remaining props should be passed to an internal element that includes rippleStyle\n */\nexport const useBoundedRipple = <T extends HTMLElement = HTMLElement>({\n  ref: forwardedRef,\n  ...props\n}: UseBoundedRippleProps<T>): UseBoundedRippleResponse<T> => {\n  const [element, ref] = useCallbackRef(forwardedRef)\n  const [{ height, width }] = useMeasuredElement(element)\n  const result = useRipple({ ...props, bounded: true, height, width })\n  return { ...result, ref }\n}\n"],"mappings":";;;;;AAIA,SAASA,kBAAkB,EAAEC,cAAc,QAAQ,UAAU;AAC7D,SAASC,SAAS,QAAQ,aAAa;AAOvC,OAAO,MAAMC,gBAAgB,GAAG,QAG6B;EAAA,IAHS;MACpEC,GAAG,EAAEC;IAEmB,CAAC;IADtBC,KAAK;EAER,MAAM,CAACC,OAAO,EAAEH,GAAG,CAAC,GAAGH,cAAc,CAACI,YAAY,CAAC;EACnD,MAAM,CAAC;IAAEG,MAAM;IAAEC;EAAM,CAAC,CAAC,GAAGT,kBAAkB,CAACO,OAAO,CAAC;EACvD,MAAMG,MAAM,GAAGR,SAAS,iCAAMI,KAAK;IAAEK,OAAO,EAAE,IAAI;IAAEH,MAAM;IAAEC;EAAK,GAAG;EACpE,uCAAYC,MAAM;IAAEN;EAAG;AACzB,CAAC"}