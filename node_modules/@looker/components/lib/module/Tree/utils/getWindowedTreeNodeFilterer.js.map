{"version":3,"file":"getWindowedTreeNodeFilterer.js","names":["getTreeWindowIntersection","list","index","firstIDinWindow","lastIDinWindow","tree","id","nextTree","getWindowedTreeNodeFilterer","filteredList","node","intersection","treeItems","items","filteredItems","every","treeWithFilteredItems","push"],"sources":["../../../../src/Tree/utils/getWindowedTreeNodeFilterer.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { WindowedTreeNodeIDProps } from '../types'\n\nconst getTreeWindowIntersection = (\n  list: WindowedTreeNodeIDProps[],\n  index: number,\n  firstIDinWindow: number,\n  lastIDinWindow: number\n) => {\n  const tree = list[index]\n  if (tree.id > lastIDinWindow) return 'after'\n\n  const nextTree = list[index + 1]\n  if (tree.id < firstIDinWindow) {\n    if (nextTree && nextTree.id > firstIDinWindow) {\n      return 'intersects'\n    }\n  } else if (tree.id <= lastIDinWindow) {\n    return 'intersects'\n  }\n  return 'before'\n}\n\nexport const getWindowedTreeNodeFilterer =\n  (\n    filteredList: WindowedTreeNodeIDProps[],\n    firstIDinWindow: number,\n    lastIDinWindow: number\n  ) =>\n  (\n    node: WindowedTreeNodeIDProps,\n    index: number,\n    list: WindowedTreeNodeIDProps[]\n  ) => {\n    const intersection = getTreeWindowIntersection(\n      list,\n      index,\n      firstIDinWindow,\n      lastIDinWindow\n    )\n    // If the node is after the window, stop looping\n    if (intersection === 'after') return false\n\n    if (intersection === 'intersects') {\n      const treeItems = node.items\n      if (treeItems) {\n        // Recursively filter the tree's items\n        const filteredItems: WindowedTreeNodeIDProps[] = []\n        treeItems.every(\n          getWindowedTreeNodeFilterer(\n            filteredItems,\n            firstIDinWindow,\n            lastIDinWindow\n          )\n        )\n        const treeWithFilteredItems = { ...node, items: filteredItems }\n        filteredList.push(treeWithFilteredItems)\n      } else {\n        // This is an item (not a tree) within the window\n        filteredList.push(node)\n      }\n    }\n    // Return true to keep looping for either 'before' or 'intersects'\n    // 'before': we need to keep checking to find the first intersecting tree\n    // 'intersects': the next tree may also intersect the window\n    return true\n  }\n"],"mappings":";;;;AAOA,MAAMA,yBAAyB,GAAG,CAChCC,IAA+B,EAC/BC,KAAa,EACbC,eAAuB,EACvBC,cAAsB,KACnB;EACH,MAAMC,IAAI,GAAGJ,IAAI,CAACC,KAAK,CAAC;EACxB,IAAIG,IAAI,CAACC,EAAE,GAAGF,cAAc,EAAE,OAAO,OAAO;EAE5C,MAAMG,QAAQ,GAAGN,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;EAChC,IAAIG,IAAI,CAACC,EAAE,GAAGH,eAAe,EAAE;IAC7B,IAAII,QAAQ,IAAIA,QAAQ,CAACD,EAAE,GAAGH,eAAe,EAAE;MAC7C,OAAO,YAAY;IACrB;EACF,CAAC,MAAM,IAAIE,IAAI,CAACC,EAAE,IAAIF,cAAc,EAAE;IACpC,OAAO,YAAY;EACrB;EACA,OAAO,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMI,2BAA2B,GACtC,CACEC,YAAuC,EACvCN,eAAuB,EACvBC,cAAsB,KAExB,CACEM,IAA6B,EAC7BR,KAAa,EACbD,IAA+B,KAC5B;EACH,MAAMU,YAAY,GAAGX,yBAAyB,CAC5CC,IAAI,EACJC,KAAK,EACLC,eAAe,EACfC,cAAc,CACf;EAED,IAAIO,YAAY,KAAK,OAAO,EAAE,OAAO,KAAK;EAE1C,IAAIA,YAAY,KAAK,YAAY,EAAE;IACjC,MAAMC,SAAS,GAAGF,IAAI,CAACG,KAAK;IAC5B,IAAID,SAAS,EAAE;MAEb,MAAME,aAAwC,GAAG,EAAE;MACnDF,SAAS,CAACG,KAAK,CACbP,2BAA2B,CACzBM,aAAa,EACbX,eAAe,EACfC,cAAc,CACf,CACF;MACD,MAAMY,qBAAqB,mCAAQN,IAAI;QAAEG,KAAK,EAAEC;MAAa,EAAE;MAC/DL,YAAY,CAACQ,IAAI,CAACD,qBAAqB,CAAC;IAC1C,CAAC,MAAM;MAELP,YAAY,CAACQ,IAAI,CAACP,IAAI,CAAC;IACzB;EACF;EAIA,OAAO,IAAI;AACb,CAAC"}