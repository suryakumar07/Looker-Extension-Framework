{"version":3,"file":"AccordionLegacy.js","names":["React","Children","isValidElement","mergeClassNames","AccordionContent","AccordionDisclosure","isLegacyComposition","children","count","AccordionLegacy","contentDomProps","disclosureProps","isOpen","props","accordionChildren","forEach","child","isAccordionDisclosure","type","isAccordionContent","push","cloneElement","className","key"],"sources":["../../../src/Accordion/AccordionLegacy.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport type { ReactElement, ReactNode } from 'react'\nimport React, { Children, isValidElement } from 'react'\nimport { mergeClassNames } from '../utils'\nimport { AccordionContent } from './AccordionContent'\nimport { AccordionDisclosure } from './AccordionDisclosure'\n\nexport const isLegacyComposition = (children: ReactNode) =>\n  Children.count(children) === 2\n\ntype DomProps = CompatibleHTMLProps<HTMLElement>\n\ntype AccordionLegacyProps = DomProps & {\n  children: ReactNode\n  contentDomProps: DomProps\n  disclosureProps: DomProps\n  isOpen: boolean\n}\n\nexport const AccordionLegacy = ({\n  children,\n  contentDomProps,\n  disclosureProps,\n  isOpen,\n  ...props\n}: AccordionLegacyProps) => {\n  const accordionChildren = [] as ReactNode[]\n\n  Children.forEach(children, child => {\n    if (isValidElement(child)) {\n      const isAccordionDisclosure =\n        (child as ReactElement<unknown>).type === AccordionDisclosure\n      const isAccordionContent =\n        (child as ReactElement<unknown>).type === AccordionContent\n\n      if (isAccordionDisclosure) {\n        accordionChildren.push(\n          React.cloneElement(child, {\n            ...disclosureProps,\n            className: mergeClassNames([\n              disclosureProps.className,\n              child.props.className,\n            ]),\n            key: 'accordion-disclosure',\n          })\n        )\n      } else if (isAccordionContent && isOpen) {\n        accordionChildren.push(\n          React.cloneElement(child, {\n            ...contentDomProps,\n            className: mergeClassNames([\n              child.props.className,\n              contentDomProps.className,\n            ]),\n            key: 'accordion-content',\n          })\n        )\n      }\n    }\n  })\n\n  return <div {...props}>{accordionChildren}</div>\n}\n"],"mappings":";;;;;;AAOA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,cAAc,QAAQ,OAAO;AACvD,SAASC,eAAe,QAAQ,UAAU;AAC1C,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,OAAO,MAAMC,mBAAmB,GAAIC,QAAmB,IACrDN,QAAQ,CAACO,KAAK,CAACD,QAAQ,CAAC,KAAK,CAAC;AAWhC,OAAO,MAAME,eAAe,GAAG,QAMH;EAAA,IANI;MAC9BF,QAAQ;MACRG,eAAe;MACfC,eAAe;MACfC;IAEoB,CAAC;IADlBC,KAAK;EAER,MAAMC,iBAAiB,GAAG,EAAiB;EAE3Cb,QAAQ,CAACc,OAAO,CAACR,QAAQ,EAAES,KAAK,IAAI;IAClC,IAAId,cAAc,CAACc,KAAK,CAAC,EAAE;MACzB,MAAMC,qBAAqB,GACxBD,KAAK,CAA2BE,IAAI,KAAKb,mBAAmB;MAC/D,MAAMc,kBAAkB,GACrBH,KAAK,CAA2BE,IAAI,KAAKd,gBAAgB;MAE5D,IAAIa,qBAAqB,EAAE;QACzBH,iBAAiB,CAACM,IAAI,CACpBpB,KAAK,CAACqB,YAAY,CAACL,KAAK,kCACnBL,eAAe;UAClBW,SAAS,EAAEnB,eAAe,CAAC,CACzBQ,eAAe,CAACW,SAAS,EACzBN,KAAK,CAACH,KAAK,CAACS,SAAS,CACtB,CAAC;UACFC,GAAG,EAAE;QAAsB,GAC3B,CACH;MACH,CAAC,MAAM,IAAIJ,kBAAkB,IAAIP,MAAM,EAAE;QACvCE,iBAAiB,CAACM,IAAI,CACpBpB,KAAK,CAACqB,YAAY,CAACL,KAAK,kCACnBN,eAAe;UAClBY,SAAS,EAAEnB,eAAe,CAAC,CACzBa,KAAK,CAACH,KAAK,CAACS,SAAS,EACrBZ,eAAe,CAACY,SAAS,CAC1B,CAAC;UACFC,GAAG,EAAE;QAAmB,GACxB,CACH;MACH;IACF;EACF,CAAC,CAAC;EAEF,OAAO,2BAASV,KAAK,EAAGC,iBAAiB,CAAO;AAClD,CAAC"}