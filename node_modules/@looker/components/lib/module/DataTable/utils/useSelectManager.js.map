{"version":3,"file":"useSelectManager.js","names":["useState","useSelectManager","possibilities","defaultSelections","selections","setSelections","onSelect","selectionId","includes","filter","itemId","onSelectAll","length"],"sources":["../../../../src/DataTable/utils/useSelectManager.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useState } from 'react'\n\nexport const useSelectManager = (\n  possibilities: string[],\n  defaultSelections: string[] = []\n) => {\n  const [selections, setSelections] = useState<string[]>(defaultSelections)\n\n  const onSelect = (selectionId: string) => {\n    /*\n      Note: In the event that selections includes the item being selected, we call filter only on selectableItems.\n      This is to avoid the situation where you have non-displayed items selected but only some displayed items.\n      Doing the above will mean you have selected items that cannot be unselected (i.e. there's no way to interact with non-displayed items).\n     */\n    setSelections(\n      selections.includes(selectionId)\n        ? selections.filter(\n            itemId => possibilities.includes(itemId) && itemId !== selectionId\n          )\n        : [...selections, selectionId]\n    )\n  }\n\n  const onSelectAll = () => {\n    setSelections(selections.length ? [] : possibilities)\n  }\n\n  return { onSelect, onSelectAll, selections, setSelections }\n}\n"],"mappings":";;AAKA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,gBAAgB,GAAG,CAC9BC,aAAuB,EACvBC,iBAA2B,GAAG,EAAE,KAC7B;EACH,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAWG,iBAAiB,CAAC;EAEzE,MAAMG,QAAQ,GAAIC,WAAmB,IAAK;IAMxCF,aAAa,CACXD,UAAU,CAACI,QAAQ,CAACD,WAAW,CAAC,GAC5BH,UAAU,CAACK,MAAM,CACfC,MAAM,IAAIR,aAAa,CAACM,QAAQ,CAACE,MAAM,CAAC,IAAIA,MAAM,KAAKH,WAAW,CACnE,GACD,CAAC,GAAGH,UAAU,EAAEG,WAAW,CAAC,CACjC;EACH,CAAC;EAED,MAAMI,WAAW,GAAG,MAAM;IACxBN,aAAa,CAACD,UAAU,CAACQ,MAAM,GAAG,EAAE,GAAGV,aAAa,CAAC;EACvD,CAAC;EAED,OAAO;IAAEI,QAAQ;IAAEK,WAAW;IAAEP,UAAU;IAAEC;EAAc,CAAC;AAC7D,CAAC"}