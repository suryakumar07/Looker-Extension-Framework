{"version":3,"file":"parseDateFromString.js","names":["isValid","en","parse","formatYear","date","year","getFullYear","parseInt","parseDateFromString","value","locale","format","parsedValue","Date","setFullYear"],"sources":["../../../../src/Calendar/utils/parseDateFromString.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport isValid from 'date-fns/isValid'\nimport en from 'date-fns/locale/en-US'\nimport parse from 'date-fns/parse'\nimport type { DateFormats } from './formatDateString'\n\nexport const formatYear = (date: Date): number => {\n  const year = date.getFullYear()\n  if (year < 100) {\n    // convert 2-digit year (2/2/20) to 4-digit year (2/2/2020)\n    return year + 2000\n  } else if (year < 1000) {\n    // convert 3-digit partial-year (2/2/201) to 4-digit year (2/2/2010)\n    return parseInt(`${year}0`)\n  }\n  return year\n}\n\nexport const parseDateFromString = (\n  value: string,\n  locale: Locale = en,\n  format: DateFormats | string = 'P'\n): Date | false => {\n  // Date format 'P' represents localized dates in date-fns\n  const parsedValue = parse(value, format, new Date(), {\n    locale,\n  })\n\n  parsedValue.setFullYear(formatYear(parsedValue))\n\n  return isValid(parsedValue) && parsedValue\n}\n"],"mappings":";;AAKA,OAAOA,OAAO,MAAM,kBAAkB;AACtC,OAAOC,EAAE,MAAM,uBAAuB;AACtC,OAAOC,KAAK,MAAM,gBAAgB;AAGlC,OAAO,MAAMC,UAAU,GAAIC,IAAU,IAAa;EAChD,MAAMC,IAAI,GAAGD,IAAI,CAACE,WAAW,EAAE;EAC/B,IAAID,IAAI,GAAG,GAAG,EAAE;IAEd,OAAOA,IAAI,GAAG,IAAI;EACpB,CAAC,MAAM,IAAIA,IAAI,GAAG,IAAI,EAAE;IAEtB,OAAOE,QAAQ,CAAE,GAAEF,IAAK,GAAE,CAAC;EAC7B;EACA,OAAOA,IAAI;AACb,CAAC;AAED,OAAO,MAAMG,mBAAmB,GAAG,CACjCC,KAAa,EACbC,MAAc,GAAGT,EAAE,EACnBU,MAA4B,GAAG,GAAG,KACjB;EAEjB,MAAMC,WAAW,GAAGV,KAAK,CAACO,KAAK,EAAEE,MAAM,EAAE,IAAIE,IAAI,EAAE,EAAE;IACnDH;EACF,CAAC,CAAC;EAEFE,WAAW,CAACE,WAAW,CAACX,UAAU,CAACS,WAAW,CAAC,CAAC;EAEhD,OAAOZ,OAAO,CAACY,WAAW,CAAC,IAAIA,WAAW;AAC5C,CAAC"}