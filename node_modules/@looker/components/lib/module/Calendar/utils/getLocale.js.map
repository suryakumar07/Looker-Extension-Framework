{"version":3,"file":"getLocale.js","names":["arSA","cs","da","de","enUS","es","fi","frCA","fr","he","hi","it","ja","ko","lt","nb","nl","pl","ptBR","pt","ru","sv","th","tr","uk","zhCN","zhTW","dateFnLocaleMap","en","isLocaleCode","str","getLocale","locale"],"sources":["../../../../src/Calendar/utils/getLocale.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport arSA from 'date-fns/locale/ar-SA'\nimport cs from 'date-fns/locale/cs'\nimport da from 'date-fns/locale/da'\nimport de from 'date-fns/locale/de'\nimport enUS from 'date-fns/locale/en-US'\nimport es from 'date-fns/locale/es'\nimport fi from 'date-fns/locale/fi'\nimport frCA from 'date-fns/locale/fr-CA'\nimport fr from 'date-fns/locale/fr'\nimport he from 'date-fns/locale/he'\nimport hi from 'date-fns/locale/hi'\nimport it from 'date-fns/locale/it'\nimport ja from 'date-fns/locale/ja'\nimport ko from 'date-fns/locale/ko'\nimport lt from 'date-fns/locale/lt'\nimport nb from 'date-fns/locale/nb'\nimport nl from 'date-fns/locale/nl'\nimport pl from 'date-fns/locale/pl'\nimport ptBR from 'date-fns/locale/pt-BR'\nimport pt from 'date-fns/locale/pt'\nimport ru from 'date-fns/locale/ru'\nimport sv from 'date-fns/locale/sv'\nimport th from 'date-fns/locale/th'\nimport tr from 'date-fns/locale/tr'\nimport uk from 'date-fns/locale/uk'\nimport zhCN from 'date-fns/locale/zh-CN'\nimport zhTW from 'date-fns/locale/zh-TW'\n\nexport const dateFnLocaleMap = {\n  'ar-SA': arSA,\n  'cs-CZ': cs,\n  'da-DK': da,\n  'de-DE': de,\n  en: enUS,\n  'es-ES': es,\n  'fi-FI': fi,\n  'fr-CA': frCA,\n  'fr-FR': fr,\n  'he-IL': he,\n  'hi-IN': hi,\n  'it-IT': it,\n  'ja-JP': ja,\n  'ko-KR': ko,\n  'lt-LT': lt,\n  'nb-NO': nb,\n  'nl-NL': nl,\n  'pl-PL': pl,\n  'pt-BR': ptBR,\n  'pt-PT': pt,\n  'ru-RU': ru,\n  'sv-SE': sv,\n  'th-TH': th,\n  'tr-TR': tr,\n  'uk-UA': uk,\n  'zh-CN': zhCN,\n  'zh-TW': zhTW,\n} as const\n\nexport type LocaleCodes = keyof typeof dateFnLocaleMap\n\nconst isLocaleCode = (str: string): str is LocaleCodes => {\n  return str in dateFnLocaleMap\n}\n\n/**\n * Get date-fns locale from locale string\n * If possible, import locale directly from date-fns to save bundle size\n */\nexport const getLocale = (locale: string) => {\n  return isLocaleCode(locale) ? dateFnLocaleMap[locale] : enUS\n}\n"],"mappings":";;AAKA,OAAOA,IAAI,MAAM,uBAAuB;AACxC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,IAAI,MAAM,uBAAuB;AAExC,OAAO,MAAMC,eAAe,GAAG;EAC7B,OAAO,EAAE3B,IAAI;EACb,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACXyB,EAAE,EAAExB,IAAI;EACR,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,IAAI;EACb,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,IAAI;EACb,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,EAAE;EACX,OAAO,EAAEC,IAAI;EACb,OAAO,EAAEC;AACX,CAAU;AAIV,MAAMG,YAAY,GAAIC,GAAW,IAAyB;EACxD,OAAOA,GAAG,IAAIH,eAAe;AAC/B,CAAC;;AAMD,OAAO,MAAMI,SAAS,GAAIC,MAAc,IAAK;EAC3C,OAAOH,YAAY,CAACG,MAAM,CAAC,GAAGL,eAAe,CAACK,MAAM,CAAC,GAAG5B,IAAI;AAC9D,CAAC"}