{"version":3,"file":"formatDateString.js","names":["getDateLocale","format","utcToZonedTime","repeat","trim","dateFormatRepetitions","full","long","medium","short","isDateFormat","stringFormat","getStringFormat","timeZone","undefined","date","time","dateFormat","timeFormat","timeZoneFormat","formatDateString","locale","options","renderedDate","actualFormat"],"sources":["../../../../src/Calendar/utils/formatDateString.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { getDateLocale } from '@looker/i18n'\nimport format from 'date-fns-tz/format'\nimport utcToZonedTime from 'date-fns-tz/utcToZonedTime'\nimport type { Locale } from 'date-fns'\nimport repeat from 'lodash/repeat'\nimport trim from 'lodash/trim'\n\ntype Full = 'full'\ntype Long = 'long'\ntype Medium = 'medium'\ntype Short = 'short'\n\ntype Formats = Full | Long | Medium | Short\n\nconst dateFormatRepetitions: Record<Formats, number> = {\n  full: 4,\n  long: 3,\n  medium: 2,\n  short: 1,\n}\n\nexport type DateFormats = keyof typeof dateFormatRepetitions\n\nexport type DateTimeOptions = {\n  date?: boolean\n  time?: boolean\n}\n\nconst isDateFormat = (stringFormat: string) =>\n  dateFormatRepetitions[stringFormat as DateFormats]\n\nconst getStringFormat = (\n  stringFormat: DateFormats,\n  timeZone: undefined | string = undefined,\n  { date = true, time = true }: DateTimeOptions\n) => {\n  const dateFormat = repeat('P', dateFormatRepetitions[stringFormat]) // PPP... is localized date format in date-fns\n  const timeFormat = repeat('p', dateFormatRepetitions[stringFormat]) // ppp... is localized time format in date-fns\n  const timeZoneFormat = repeat('z', dateFormatRepetitions[stringFormat]) /// zzz... is localize timezone format in date-fns\n\n  return trim(\n    `${date ? dateFormat : ''}${time ? timeFormat : ''} ${\n      timeZone ? timeZoneFormat : ''\n    }`\n  )\n}\n\nexport const formatDateString = (\n  date?: Date,\n  stringFormat: DateFormats | string = 'P',\n  locale: Locale = getDateLocale(),\n  timeZone: undefined | string = undefined,\n  options: DateTimeOptions = {}\n): string | '' => {\n  if (!date) {\n    return ''\n  }\n\n  const renderedDate = timeZone ? utcToZonedTime(date, timeZone) : date\n\n  const actualFormat = isDateFormat(stringFormat)\n    ? getStringFormat(stringFormat as DateFormats, timeZone, options)\n    : stringFormat\n\n  return format(renderedDate, actualFormat, {\n    locale,\n    ...(timeZone && { timeZone }),\n  })\n}\n"],"mappings":";;;;AAKA,SAASA,aAAa,QAAQ,cAAc;AAC5C,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,cAAc,MAAM,4BAA4B;AAEvD,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,IAAI,MAAM,aAAa;AAS9B,MAAMC,qBAA8C,GAAG;EACrDC,IAAI,EAAE,CAAC;EACPC,IAAI,EAAE,CAAC;EACPC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE;AACT,CAAC;AASD,MAAMC,YAAY,GAAIC,YAAoB,IACxCN,qBAAqB,CAACM,YAAY,CAAgB;AAEpD,MAAMC,eAAe,GAAG,CACtBD,YAAyB,EACzBE,QAA4B,GAAGC,SAAS,EACxC;EAAEC,IAAI,EAAJA,KAAI,GAAG,IAAI;EAAEC,IAAI,EAAJA,KAAI,GAAG;AAAsB,CAAC,KAC1C;EACH,MAAMC,UAAU,GAAGd,MAAM,CAAC,GAAG,EAAEE,qBAAqB,CAACM,YAAY,CAAC,CAAC;EACnE,MAAMO,UAAU,GAAGf,MAAM,CAAC,GAAG,EAAEE,qBAAqB,CAACM,YAAY,CAAC,CAAC;EACnE,MAAMQ,cAAc,GAAGhB,MAAM,CAAC,GAAG,EAAEE,qBAAqB,CAACM,YAAY,CAAC,CAAC;;EAEvE,OAAOP,IAAI,CACR,GAAEW,KAAI,GAAGE,UAAU,GAAG,EAAG,GAAED,KAAI,GAAGE,UAAU,GAAG,EAAG,IACjDL,QAAQ,GAAGM,cAAc,GAAG,EAC7B,EAAC,CACH;AACH,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,CAC9BL,IAAW,EACXJ,YAAkC,GAAG,GAAG,EACxCU,MAAc,GAAGrB,aAAa,EAAE,EAChCa,QAA4B,GAAGC,SAAS,EACxCQ,OAAwB,GAAG,CAAC,CAAC,KACb;EAChB,IAAI,CAACP,IAAI,EAAE;IACT,OAAO,EAAE;EACX;EAEA,MAAMQ,YAAY,GAAGV,QAAQ,GAAGX,cAAc,CAACa,IAAI,EAAEF,QAAQ,CAAC,GAAGE,IAAI;EAErE,MAAMS,YAAY,GAAGd,YAAY,CAACC,YAAY,CAAC,GAC3CC,eAAe,CAACD,YAAY,EAAiBE,QAAQ,EAAES,OAAO,CAAC,GAC/DX,YAAY;EAEhB,OAAOV,MAAM,CAACsB,YAAY,EAAEC,YAAY;IACtCH;EAAM,GACFR,QAAQ,IAAI;IAAEA;EAAS,CAAC,EAC5B;AACJ,CAAC"}