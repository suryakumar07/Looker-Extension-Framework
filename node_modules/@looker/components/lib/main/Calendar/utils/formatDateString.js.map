{"version":3,"file":"formatDateString.js","names":["dateFormatRepetitions","full","medium","isDateFormat","stringFormat","getStringFormat","timeZone","undefined","date","time","dateFormat","repeat","timeFormat","timeZoneFormat","trim","formatDateString","locale","getDateLocale","options","renderedDate","utcToZonedTime","actualFormat","format"],"sources":["../../../../src/Calendar/utils/formatDateString.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { getDateLocale } from '@looker/i18n'\nimport format from 'date-fns-tz/format'\nimport utcToZonedTime from 'date-fns-tz/utcToZonedTime'\nimport type { Locale } from 'date-fns'\nimport repeat from 'lodash/repeat'\nimport trim from 'lodash/trim'\n\ntype Full = 'full'\ntype Long = 'long'\ntype Medium = 'medium'\ntype Short = 'short'\n\ntype Formats = Full | Long | Medium | Short\n\nconst dateFormatRepetitions: Record<Formats, number> = {\n  full: 4,\n  long: 3,\n  medium: 2,\n  short: 1,\n}\n\nexport type DateFormats = keyof typeof dateFormatRepetitions\n\nexport type DateTimeOptions = {\n  date?: boolean\n  time?: boolean\n}\n\nconst isDateFormat = (stringFormat: string) =>\n  dateFormatRepetitions[stringFormat as DateFormats]\n\nconst getStringFormat = (\n  stringFormat: DateFormats,\n  timeZone: undefined | string = undefined,\n  { date = true, time = true }: DateTimeOptions\n) => {\n  const dateFormat = repeat('P', dateFormatRepetitions[stringFormat]) // PPP... is localized date format in date-fns\n  const timeFormat = repeat('p', dateFormatRepetitions[stringFormat]) // ppp... is localized time format in date-fns\n  const timeZoneFormat = repeat('z', dateFormatRepetitions[stringFormat]) /// zzz... is localize timezone format in date-fns\n\n  return trim(\n    `${date ? dateFormat : ''}${time ? timeFormat : ''} ${\n      timeZone ? timeZoneFormat : ''\n    }`\n  )\n}\n\nexport const formatDateString = (\n  date?: Date,\n  stringFormat: DateFormats | string = 'P',\n  locale: Locale = getDateLocale(),\n  timeZone: undefined | string = undefined,\n  options: DateTimeOptions = {}\n): string | '' => {\n  if (!date) {\n    return ''\n  }\n\n  const renderedDate = timeZone ? utcToZonedTime(date, timeZone) : date\n\n  const actualFormat = isDateFormat(stringFormat)\n    ? getStringFormat(stringFormat as DateFormats, timeZone, options)\n    : stringFormat\n\n  return format(renderedDate, actualFormat, {\n    locale,\n    ...(timeZone && { timeZone }),\n  })\n}\n"],"mappings":";;;;;;;;AAKA;AACA;AACA;AAEA;AACA;AAA8B;AAAA;AAS9B,IAAMA,qBAA8C,GAAG;EACrDC,IAAI,EAAE,CAAC;EACP,QAAM,CAAC;EACPC,MAAM,EAAE,CAAC;EACT,SAAO;AACT,CAAC;AASD,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,YAAoB;EAAA,OACxCJ,qBAAqB,CAACI,YAAY,CAAgB;AAAA;AAEpD,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CACnBD,YAAyB,EAGtB;EAAA,IAFHE,QAA4B,uEAAGC,SAAS;EAAA;IAAA,iBACtCC,IAAI;IAAJA,IAAI,0BAAG,IAAI;IAAA,iBAAEC,IAAI;IAAJA,IAAI,0BAAG,IAAI;EAE1B,IAAMC,UAAU,GAAG,IAAAC,kBAAM,EAAC,GAAG,EAAEX,qBAAqB,CAACI,YAAY,CAAC,CAAC;EACnE,IAAMQ,UAAU,GAAG,IAAAD,kBAAM,EAAC,GAAG,EAAEX,qBAAqB,CAACI,YAAY,CAAC,CAAC;EACnE,IAAMS,cAAc,GAAG,IAAAF,kBAAM,EAAC,GAAG,EAAEX,qBAAqB,CAACI,YAAY,CAAC,CAAC;;EAEvE,OAAO,IAAAU,gBAAI,YACNN,IAAI,GAAGE,UAAU,GAAG,EAAE,SAAGD,IAAI,GAAGG,UAAU,GAAG,EAAE,cAChDN,QAAQ,GAAGO,cAAc,GAAG,EAAE,EAEjC;AACH,CAAC;AAEM,IAAME,gBAAgB,GAAG,SAAnBA,gBAAgB,CAC3BP,IAAW,EAKK;EAAA,IAJhBJ,YAAkC,uEAAG,GAAG;EAAA,IACxCY,MAAc,uEAAG,IAAAC,mBAAa,GAAE;EAAA,IAChCX,QAA4B,uEAAGC,SAAS;EAAA,IACxCW,OAAwB,uEAAG,CAAC,CAAC;EAE7B,IAAI,CAACV,IAAI,EAAE;IACT,OAAO,EAAE;EACX;EAEA,IAAMW,YAAY,GAAGb,QAAQ,GAAG,IAAAc,0BAAc,EAACZ,IAAI,EAAEF,QAAQ,CAAC,GAAGE,IAAI;EAErE,IAAMa,YAAY,GAAGlB,YAAY,CAACC,YAAY,CAAC,GAC3CC,eAAe,CAACD,YAAY,EAAiBE,QAAQ,EAAEY,OAAO,CAAC,GAC/Dd,YAAY;EAEhB,OAAO,IAAAkB,kBAAM,EAACH,YAAY,EAAEE,YAAY;IACtCL,MAAM,EAANA;EAAM,GACFV,QAAQ,IAAI;IAAEA,QAAQ,EAARA;EAAS,CAAC,EAC5B;AACJ,CAAC;AAAA"}