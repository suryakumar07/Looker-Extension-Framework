{"version":3,"file":"ReplaceText.js","names":["DefaultReplace","props","ReplaceString","children","match","replace","matchRegExp","RegExp","escapeRegExp","stringArr","split","map","stringItem","index","ReplaceText","rest","Children","child"],"sources":["../../../src/ReplaceText/ReplaceText.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { ReactNode } from 'react'\nimport React, { Children, Fragment } from 'react'\nimport escapeRegExp from 'lodash/escapeRegExp'\nimport { Span } from '../Text'\n\nexport type ReplaceProps = {\n  /**\n   * The text that will be highlighted\n   */\n  children: string\n}\n\nexport type ReplaceComponent = (props: ReplaceProps) => ReactNode\n\nconst DefaultReplace: ReplaceComponent = (props: ReplaceProps) => (\n  <Span fontWeight=\"semiBold\" textDecoration=\"underline\" {...props} />\n)\n\n// Wraps matched substrings in the replace component\nconst ReplaceString = ({\n  children,\n  match,\n  replace = DefaultReplace,\n}: Omit<ReplaceTextProps, 'children'> & ReplaceProps) => {\n  // Convert match to capturing, case-insensitive, global RegExp\n  const matchRegExp = new RegExp(`(${escapeRegExp(match)})`, 'gi')\n  const stringArr = children.split(matchRegExp)\n\n  // With capturing RegExp + split, captured elements are included in array\n  return (\n    <>\n      {stringArr.map((stringItem: string, index: number) => (\n        <Fragment key={index}>\n          {index % 2 === 1\n            ? replace({ children: stringItem })\n            : stringItem || null}\n        </Fragment>\n      ))}\n    </>\n  )\n}\n\nexport interface ReplaceTextProps {\n  /**\n   * Any non-text children will be passed along as-is\n   */\n  children?: ReactNode | ReactNode[]\n  /**\n   * A string to search for in the children (case-insensitive, global)\n   */\n  match?: string\n  /**\n   * A component to wrap the matched text. Defaults to a span with semi-bold/underline style.\n   */\n  replace?: ReplaceComponent\n}\n\nexport const ReplaceText = ({ children, ...rest }: ReplaceTextProps) => {\n  if (!rest.match) return <>{children}</>\n\n  return (\n    <>\n      {Children.map(children, (child: ReactNode) =>\n        typeof child === 'string' ? (\n          <ReplaceString {...rest}>{child}</ReplaceString>\n        ) : (\n          child\n        )\n      )}\n    </>\n  )\n}\n"],"mappings":";;;;;;;;;;AAKA;AACA;AACA;AAA8B;AAAA;AAAA;AAW9B,IAAMA,cAAgC,GAAG,SAAnCA,cAAgC,CAAIC,KAAmB;EAAA,OAC3D,gCAAC,UAAI;IAAC,UAAU,EAAC,UAAU;IAAC,cAAc,EAAC;EAAW,GAAKA,KAAK,EAAI;AAAA,CACrE;;AAGD,IAAMC,aAAa,GAAG,SAAhBA,aAAa,OAIsC;EAAA,IAHvDC,QAAQ,QAARA,QAAQ;IACRC,KAAK,QAALA,KAAK;IAAA,oBACLC,OAAO;IAAPA,OAAO,6BAAGL,cAAc;EAGxB,IAAMM,WAAW,GAAG,IAAIC,MAAM,YAAK,IAAAC,wBAAY,EAACJ,KAAK,CAAC,QAAK,IAAI,CAAC;EAChE,IAAMK,SAAS,GAAGN,QAAQ,CAACO,KAAK,CAACJ,WAAW,CAAC;;EAG7C,OACE,kEACGG,SAAS,CAACE,GAAG,CAAC,UAACC,UAAkB,EAAEC,KAAa;IAAA,OAC/C,gCAAC,eAAQ;MAAC,GAAG,EAAEA;IAAM,GAClBA,KAAK,GAAG,CAAC,KAAK,CAAC,GACZR,OAAO,CAAC;MAAEF,QAAQ,EAAES;IAAW,CAAC,CAAC,GACjCA,UAAU,IAAI,IAAI,CACb;EAAA,CACZ,CAAC,CACD;AAEP,CAAC;AAiBM,IAAME,WAAW,GAAG,SAAdA,WAAW,QAAgD;EAAA,IAA1CX,QAAQ,SAARA,QAAQ;IAAKY,IAAI;EAC7C,IAAI,CAACA,IAAI,CAACX,KAAK,EAAE,OAAO,kEAAGD,QAAQ,CAAI;EAEvC,OACE,kEACGa,eAAQ,CAACL,GAAG,CAACR,QAAQ,EAAE,UAACc,KAAgB;IAAA,OACvC,OAAOA,KAAK,KAAK,QAAQ,GACvB,gCAAC,aAAa,EAAKF,IAAI,EAAGE,KAAK,CAAiB,GAEhDA,KACD;EAAA,EACF,CACA;AAEP,CAAC;AAAA"}