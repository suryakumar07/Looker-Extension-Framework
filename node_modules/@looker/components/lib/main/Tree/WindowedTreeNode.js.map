{"version":3,"file":"WindowedTreeNode.js","names":["WindowedTreeContext","createContext","partialRender","WindowedTreeNode","content","firstIDinWindow","id","items","context","useContext","TreeCollectionContext","toggleNode","useCallback","isOpen","isValidElement","props","children","map","item","toggleStateMap","density","cloneElement"],"sources":["../../../src/Tree/WindowedTreeNode.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { DensityProp } from '@looker/design-tokens'\nimport React, {\n  cloneElement,\n  createContext,\n  isValidElement,\n  useCallback,\n  useContext,\n} from 'react'\nimport { TreeCollectionContext } from './TreeCollectionContext'\nimport type { WindowedTreeNodeIDProps } from './types'\n\nexport type WindowedTreeContextProps = DensityProp & {\n  isOpen?: boolean\n  partialRender: boolean\n  toggleNode?: (isOpen: boolean) => void\n}\n\nexport const WindowedTreeContext = createContext<WindowedTreeContextProps>({\n  partialRender: false,\n})\n\nexport const WindowedTreeNode = ({\n  content,\n  firstIDinWindow,\n  id,\n  items,\n}: WindowedTreeNodeIDProps & {\n  firstIDinWindow?: number\n}) => {\n  // Update state for which tree nodes are opened / closed\n  const context = useContext(TreeCollectionContext)\n  const toggleNode = useCallback(\n    (isOpen: boolean) => {\n      context.toggleNode?.(id, isOpen)\n    },\n    [context, id]\n  )\n\n  if (items && isValidElement(content)) {\n    // insert the items as children\n    const props = {\n      children: items.map(item => (\n        <WindowedTreeNode\n          firstIDinWindow={firstIDinWindow}\n          {...item}\n          key={item.id}\n        />\n      )),\n    }\n    const isOpen = context.toggleStateMap?.[id]?.isOpen\n\n    return (\n      <WindowedTreeContext.Provider\n        value={{\n          density: context.density,\n          isOpen,\n          partialRender: firstIDinWindow ? id < firstIDinWindow : false,\n          toggleNode,\n        }}\n      >\n        {cloneElement(content, props)}\n      </WindowedTreeContext.Provider>\n    )\n  }\n  return content\n}\n"],"mappings":";;;;;;;;;AAMA;AAOA;AAA+D;AAAA;;AASxD,IAAMA,mBAAmB,GAAG,IAAAC,oBAAa,EAA2B;EACzEC,aAAa,EAAE;AACjB,CAAC,CAAC;AAAA;AAEK,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,OAOvB;EAAA,IANJC,OAAO,QAAPA,OAAO;IACPC,eAAe,QAAfA,eAAe;IACfC,EAAE,QAAFA,EAAE;IACFC,KAAK,QAALA,KAAK;EAKL,IAAMC,OAAO,GAAG,IAAAC,iBAAU,EAACC,4CAAqB,CAAC;EACjD,IAAMC,UAAU,GAAG,IAAAC,kBAAW,EAC5B,UAACC,MAAe,EAAK;IAAA;IACnB,uBAAAL,OAAO,CAACG,UAAU,wDAAlB,yBAAAH,OAAO,EAAcF,EAAE,EAAEO,MAAM,CAAC;EAClC,CAAC,EACD,CAACL,OAAO,EAAEF,EAAE,CAAC,CACd;EAED,IAAIC,KAAK,IAAI,IAAAO,qBAAc,EAACV,OAAO,CAAC,EAAE;IAAA;IAEpC,IAAMW,KAAK,GAAG;MACZC,QAAQ,EAAET,KAAK,CAACU,GAAG,CAAC,UAAAC,IAAI;QAAA,OACtB,gCAAC,gBAAgB;UACf,eAAe,EAAEb;QAAgB,GAC7Ba,IAAI;UACR,GAAG,EAAEA,IAAI,CAACZ;QAAG,GACb;MAAA,CACH;IACH,CAAC;IACD,IAAMO,OAAM,4BAAGL,OAAO,CAACW,cAAc,oFAAtB,sBAAyBb,EAAE,CAAC,2DAA5B,uBAA8BO,MAAM;IAEnD,OACE,gCAAC,mBAAmB,CAAC,QAAQ;MAC3B,KAAK,EAAE;QACLO,OAAO,EAAEZ,OAAO,CAACY,OAAO;QACxBP,MAAM,EAANA,OAAM;QACNX,aAAa,EAAEG,eAAe,GAAGC,EAAE,GAAGD,eAAe,GAAG,KAAK;QAC7DM,UAAU,EAAVA;MACF;IAAE,GAED,IAAAU,mBAAY,EAACjB,OAAO,EAAEW,KAAK,CAAC,CACA;EAEnC;EACA,OAAOX,OAAO;AAChB,CAAC;AAAA"}