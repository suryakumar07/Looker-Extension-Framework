{"version":3,"file":"Breakpoint.spec.js","names":["describe","widthSpy","heightSpy","beforeEach","jest","spyOn","document","body","mockImplementation","afterEach","mockRestore","test","renderWithTheme","element","screen","queryByText","expect","toBeInTheDocument","not","undefined"],"sources":["../../../src/Breakpoint/Breakpoint.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { renderWithTheme } from '@looker/components-test-utils'\nimport { screen } from '@testing-library/react'\nimport { Breakpoint } from './Breakpoint'\n\n/**\n * IMPORTANT NOTE:\n * Breakpoint behavior is determined by viewport size (by design, really, that's a good thing).\n *\n * Within our test-suite the viewport size is configured in `jest.setup.js`.\n * Specifically: document.body.clientHeight & document.body.width\n */\n\ndescribe('Breakpoint', () => {\n  let widthSpy: jest.SpyInstance<number, []>\n  let heightSpy: jest.SpyInstance<number, []>\n\n  beforeEach(() => {\n    widthSpy = jest\n      .spyOn(document.body, 'clientWidth', 'get')\n      .mockImplementation(() => 800)\n    heightSpy = jest\n      .spyOn(document.body, 'clientHeight', 'get')\n      .mockImplementation(() => 600)\n  })\n  afterEach(() => {\n    widthSpy.mockRestore()\n    heightSpy.mockRestore()\n  })\n\n  test('all', () => {\n    renderWithTheme(\n      <Breakpoint show={['mobile', 'xl']}>\n        <p>This is a thing</p>\n      </Breakpoint>\n    )\n    const element = screen.queryByText('This is a thing')\n    expect(element).toBeInTheDocument()\n  })\n\n  test('mobile', () => {\n    renderWithTheme(\n      <Breakpoint show=\"mobile\">\n        <p>This is a thing</p>\n      </Breakpoint>\n    )\n    const element = screen.queryByText('This is a thing')\n    expect(element).not.toBeInTheDocument()\n  })\n\n  test('tablet up', () => {\n    renderWithTheme(\n      <Breakpoint show={['tablet', undefined]}>\n        <p>This is a thing</p>\n      </Breakpoint>\n    )\n    const element = screen.queryByText('This is a thing')\n    expect(element).toBeInTheDocument()\n  })\n\n  test('up to tablet', () => {\n    renderWithTheme(\n      <Breakpoint show={[undefined, 'tablet']}>\n        <p>This is a thing</p>\n      </Breakpoint>\n    )\n    const element = screen.queryByText('This is a thing')\n    expect(element).not.toBeInTheDocument()\n  })\n})\n"],"mappings":";;;AAKA;AACA;AACA;AACA;;AAUAA,QAAQ,CAAC,YAAY,EAAE,YAAM;EAC3B,IAAIC,QAAsC;EAC1C,IAAIC,SAAuC;EAE3CC,UAAU,CAAC,YAAM;IACfF,QAAQ,GAAGG,IAAI,CACZC,KAAK,CAACC,QAAQ,CAACC,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC,CAC1CC,kBAAkB,CAAC;MAAA,OAAM,GAAG;IAAA,EAAC;IAChCN,SAAS,GAAGE,IAAI,CACbC,KAAK,CAACC,QAAQ,CAACC,IAAI,EAAE,cAAc,EAAE,KAAK,CAAC,CAC3CC,kBAAkB,CAAC;MAAA,OAAM,GAAG;IAAA,EAAC;EAClC,CAAC,CAAC;EACFC,SAAS,CAAC,YAAM;IACdR,QAAQ,CAACS,WAAW,EAAE;IACtBR,SAAS,CAACQ,WAAW,EAAE;EACzB,CAAC,CAAC;EAEFC,IAAI,CAAC,KAAK,EAAE,YAAM;IAChB,IAAAC,oCAAe,EACb,gCAAC,sBAAU;MAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,IAAI;IAAE,GACjC,6DAAsB,CACX,CACd;IACD,IAAMC,OAAO,GAAGC,cAAM,CAACC,WAAW,CAAC,iBAAiB,CAAC;IACrDC,MAAM,CAACH,OAAO,CAAC,CAACI,iBAAiB,EAAE;EACrC,CAAC,CAAC;EAEFN,IAAI,CAAC,QAAQ,EAAE,YAAM;IACnB,IAAAC,oCAAe,EACb,gCAAC,sBAAU;MAAC,IAAI,EAAC;IAAQ,GACvB,6DAAsB,CACX,CACd;IACD,IAAMC,OAAO,GAAGC,cAAM,CAACC,WAAW,CAAC,iBAAiB,CAAC;IACrDC,MAAM,CAACH,OAAO,CAAC,CAACK,GAAG,CAACD,iBAAiB,EAAE;EACzC,CAAC,CAAC;EAEFN,IAAI,CAAC,WAAW,EAAE,YAAM;IACtB,IAAAC,oCAAe,EACb,gCAAC,sBAAU;MAAC,IAAI,EAAE,CAAC,QAAQ,EAAEO,SAAS;IAAE,GACtC,6DAAsB,CACX,CACd;IACD,IAAMN,OAAO,GAAGC,cAAM,CAACC,WAAW,CAAC,iBAAiB,CAAC;IACrDC,MAAM,CAACH,OAAO,CAAC,CAACI,iBAAiB,EAAE;EACrC,CAAC,CAAC;EAEFN,IAAI,CAAC,cAAc,EAAE,YAAM;IACzB,IAAAC,oCAAe,EACb,gCAAC,sBAAU;MAAC,IAAI,EAAE,CAACO,SAAS,EAAE,QAAQ;IAAE,GACtC,6DAAsB,CACX,CACd;IACD,IAAMN,OAAO,GAAGC,cAAM,CAACC,WAAW,CAAC,iBAAiB,CAAC;IACrDC,MAAM,CAACH,OAAO,CAAC,CAACK,GAAG,CAACD,iBAAiB,EAAE;EACzC,CAAC,CAAC;AACJ,CAAC,CAAC"}