{"version":3,"file":"controlTypes.js","names":[],"sources":["../../../src/Accordion2/controlTypes.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\ntype Controlled = {\n  /**\n   * Use this property (alongside toggleOpen) if you wish to use the component in a `controlled` manner.\n   * isOpen determines whether the Accordion is currently open or closed\n   **/\n  isOpen: boolean\n  /**\n   * Use this property (alongside isOpen) if you wish to use the component in a `controlled` manner.\n   * toggleOpen is a function that should control the value / state of isOpen\n   */\n  toggleOpen: (isOpen: boolean) => void\n}\n\ntype Uncontrolled = {\n  isOpen?: never\n  toggleOpen?: never\n}\n\ntype Others = {\n  /**\n   * Use this property if you wish to use the component in a `uncontrolled` manner and have it open when initially rendering.\n   * Component will hold internal state and open and close on disclosure click\n   **/\n  defaultOpen?: boolean\n  /**\n   * Callback that is triggered when closing the Accordion (i.e. when clicking on an open Accordion)\n   */\n  onClose?: () => void // called when the component is closed\n  /**\n   * Callback that is triggered when opening the Accordion (i.e. when clicking on a closed Accordion)\n   */\n  onOpen?: () => void // called when the component is opened\n}\n\n/**\n * @deprecated Use  `Accordion2ControlProps` instead\n */\nexport type ControlledLoosely = Partial<Controlled> & Others\n\n/**\n * Prevents the creation of a \"semi-controlled\" component. Prevents consumers\n * from mixing controlled vs uncontrolled properties\n *\n * Specifically this type checks toggleOpen & isOpen are both specified or\n * both undefined.\n */\nexport type ControlledOrUncontrolled = (Controlled | Uncontrolled) & Others\n"],"mappings":""}