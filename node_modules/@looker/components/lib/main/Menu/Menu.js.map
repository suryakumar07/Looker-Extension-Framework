{"version":3,"file":"Menu.js","names":["partitionMenuProps","props","popoverPropKeys","allProps","popoverProps","forEach","key","undefined","listProps","Menu","forwardRef","ref","children","content","propsID","id","listRef","restProps","useID","list","cloneElement"],"sources":["../../../src/Menu/Menu.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Ref, ReactElement } from 'react'\nimport React, { cloneElement, forwardRef } from 'react'\nimport type { ListProps } from '../List'\nimport type { PopoverProps, UsePopoverResponseDom } from '../Popover'\nimport { Popover, popoverPropKeys } from '../Popover'\nimport { useID } from '../utils'\nimport { MenuList } from './MenuList'\n\nexport interface MenuDomProps extends UsePopoverResponseDom {\n  'aria-controls': string\n}\n\nexport interface MenuProps\n  extends Omit<PopoverProps, 'children'>,\n    Omit<ListProps, 'children' | 'content'> {\n  /**\n   * A ReactElement that accepts dom props\n   */\n  children: ReactElement<MenuDomProps>\n  /**\n   * The ref to be passed to the list element (`ref` is passed to the triggering element)\n   */\n  listRef?: Ref<HTMLUListElement>\n}\ntype PartitionProps = Omit<MenuProps, 'children' | 'content' | 'id' | 'listRef'>\ntype KeyOfPartitionProps = keyof PartitionProps\n\n// Returns two object, the first being Popover props and the second being List props\nconst partitionMenuProps = (\n  props: PartitionProps,\n  popoverPropKeys: Array<keyof PopoverProps>\n) => {\n  const allProps = { ...props }\n  const popoverProps: Record<string, unknown> = {}\n\n  popoverPropKeys.forEach(key => {\n    if (props[key as KeyOfPartitionProps] !== undefined) {\n      popoverProps[key] = props[key as KeyOfPartitionProps]\n    }\n    delete allProps[key as KeyOfPartitionProps]\n  })\n\n  const listProps = allProps\n\n  return [popoverProps, listProps]\n}\n\nexport const Menu = forwardRef(\n  (\n    { children, content, id: propsID, listRef, ...restProps }: MenuProps,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: Ref<any>\n  ) => {\n    const [popoverProps, listProps] = partitionMenuProps(\n      restProps,\n      popoverPropKeys\n    )\n\n    const id = useID(propsID)\n    const list = content && (\n      <MenuList id={id} {...listProps} ref={listRef} data-autofocus=\"true\">\n        {content}\n      </MenuList>\n    )\n    children = cloneElement(children, { 'aria-controls': id })\n\n    return (\n      <Popover content={list} ref={ref} {...popoverProps}>\n        {children}\n      </Popover>\n    )\n  }\n)\n"],"mappings":";;;;;;;;;;;;AAMA;AAGA;AACA;AACA;AAAqC;AAAA;AAAA;AAAA;AAAA;AAsBrC,IAAMA,kBAAkB,GAAG,SAArBA,kBAAkB,CACtBC,KAAqB,EACrBC,eAA0C,EACvC;EACH,IAAMC,QAAQ,qBAAQF,KAAK,CAAE;EAC7B,IAAMG,YAAqC,GAAG,CAAC,CAAC;EAEhDF,eAAe,CAACG,OAAO,CAAC,UAAAC,GAAG,EAAI;IAC7B,IAAIL,KAAK,CAACK,GAAG,CAAwB,KAAKC,SAAS,EAAE;MACnDH,YAAY,CAACE,GAAG,CAAC,GAAGL,KAAK,CAACK,GAAG,CAAwB;IACvD;IACA,OAAOH,QAAQ,CAACG,GAAG,CAAwB;EAC7C,CAAC,CAAC;EAEF,IAAME,SAAS,GAAGL,QAAQ;EAE1B,OAAO,CAACC,YAAY,EAAEI,SAAS,CAAC;AAClC,CAAC;AAEM,IAAMC,IAAI,GAAG,IAAAC,iBAAU,EAC5B,gBAGEC,GAAa,EACV;EAAA,IAHDC,QAAQ,QAARA,QAAQ;IAAEC,OAAO,QAAPA,OAAO;IAAMC,OAAO,QAAXC,EAAE;IAAWC,OAAO,QAAPA,OAAO;IAAKC,SAAS;EAIvD,0BAAkCjB,kBAAkB,CAClDiB,SAAS,EACTf,wBAAe,CAChB;IAAA;IAHME,YAAY;IAAEI,SAAS;EAK9B,IAAMO,EAAE,GAAG,IAAAG,YAAK,EAACJ,OAAO,CAAC;EACzB,IAAMK,IAAI,GAAGN,OAAO,IAClB,gCAAC,kBAAQ;IAAC,EAAE,EAAEE;EAAG,GAAKP,SAAS;IAAE,GAAG,EAAEQ,OAAQ;IAAC,kBAAe;EAAM,IACjEH,OAAO,CAEX;EACDD,QAAQ,GAAG,IAAAQ,mBAAY,EAACR,QAAQ,EAAE;IAAE,eAAe,EAAEG;EAAG,CAAC,CAAC;EAE1D,OACE,gCAAC,gBAAO;IAAC,OAAO,EAAEI,IAAK;IAAC,GAAG,EAAER;EAAI,GAAKP,YAAY,GAC/CQ,QAAQ,CACD;AAEd,CAAC,CACF;AAAA"}