{"version":3,"file":"useOptionScroll.spec.js","names":["describe","test","each","rootScrollHeight","rootClientHeight","expected","grandParent","clientHeight","parentElement","scrollHeight","parent","child","expect","isScrollable","toEqual"],"sources":["../../../../../../src/Form/Inputs/Combobox/utils/useOptionScroll.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { isScrollable } from './useOptionScroll'\n\ndescribe('isScrollable', () => {\n  test.each`\n    rootScrollHeight | rootClientHeight | expected\n    ${300}           | ${200}           | ${true}\n    ${200}           | ${200}           | ${false}\n    ${0}             | ${0}             | ${false}\n  `(\n    `scrollable=$expected`,\n    ({ rootScrollHeight, rootClientHeight, expected }) => {\n      const grandParent = {\n        clientHeight: rootClientHeight,\n        parentElement: null,\n        scrollHeight: rootScrollHeight,\n      }\n      const parent = {\n        clientHeight: 200,\n        parentElement: grandParent,\n        scrollHeight: 200,\n      }\n      const child = {\n        clientHeight: 100,\n        parentElement: parent,\n        scrollHeight: 100,\n      }\n      expect(isScrollable(child as unknown as HTMLElement)).toEqual(expected)\n    }\n  )\n})\n"],"mappings":";;;;AAIA;AAAgD;AAEhDA,QAAQ,CAAC,cAAc,EAAE,YAAM;EAC7BC,IAAI,CAACC,IAAI,uRAEL,GAAG,EAAgB,GAAG,EAAgB,IAAI,EAC1C,GAAG,EAAgB,GAAG,EAAgB,KAAK,EAC3C,CAAC,EAAkB,CAAC,EAAkB,KAAK,0BAG7C,gBAAsD;IAAA,IAAnDC,gBAAgB,QAAhBA,gBAAgB;MAAEC,gBAAgB,QAAhBA,gBAAgB;MAAEC,QAAQ,QAARA,QAAQ;IAC7C,IAAMC,WAAW,GAAG;MAClBC,YAAY,EAAEH,gBAAgB;MAC9BI,aAAa,EAAE,IAAI;MACnBC,YAAY,EAAEN;IAChB,CAAC;IACD,IAAMO,MAAM,GAAG;MACbH,YAAY,EAAE,GAAG;MACjBC,aAAa,EAAEF,WAAW;MAC1BG,YAAY,EAAE;IAChB,CAAC;IACD,IAAME,KAAK,GAAG;MACZJ,YAAY,EAAE,GAAG;MACjBC,aAAa,EAAEE,MAAM;MACrBD,YAAY,EAAE;IAChB,CAAC;IACDG,MAAM,CAAC,IAAAC,6BAAY,EAACF,KAAK,CAA2B,CAAC,CAACG,OAAO,CAACT,QAAQ,CAAC;EACzE,CAAC,CACF;AACH,CAAC,CAAC"}