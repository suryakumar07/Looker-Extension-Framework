{"version":3,"file":"useOptionEvents.js","names":["useOptionEvents","props","context","label","value","onClick","onMouseEnter","useContext","data","onChange","transition","closeOnSelectPropRef","isScrollingRef","options","handleClick","option","xorWith","o1","o2","ComboboxActionType","SELECT_WITH_CLICK","current","ESCAPE","handleMouseEnter","requestAnimationFrame","NAVIGATE","useWrapEvent"],"sources":["../../../../../../src/Form/Inputs/Combobox/utils/useOptionEvents.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport xorWith from 'lodash/xorWith'\nimport type { Context } from 'react'\nimport { useContext } from 'react'\nimport { useWrapEvent } from '../../../../utils'\nimport type {\n  ComboboxContextProps,\n  ComboboxMultiContextProps,\n} from '../ComboboxContext'\nimport type {\n  ComboboxCallback,\n  ComboboxMultiCallback,\n  ComboboxOptionProps,\n} from '../types'\nimport type { ComboboxMultiData } from './state'\nimport { ComboboxActionType } from './state'\n\nexport function useOptionEvents<\n  CProps extends ComboboxContextProps | ComboboxMultiContextProps\n>(props: ComboboxOptionProps, context: Context<CProps>) {\n  const { label, value, onClick, onMouseEnter } = props\n  const { data, onChange, transition, closeOnSelectPropRef, isScrollingRef } =\n    useContext(context)\n  const { options } = data as ComboboxMultiData\n\n  function handleClick() {\n    const option = { label, value }\n    if (onChange) {\n      if (options) {\n        ;(onChange as ComboboxMultiCallback)(\n          xorWith(options, [option], (o1, o2) => o1.value === o2.value)\n        )\n      } else {\n        ;(onChange as ComboboxCallback)(option)\n      }\n    }\n    transition && transition(ComboboxActionType.SELECT_WITH_CLICK, { option })\n    if (closeOnSelectPropRef && closeOnSelectPropRef.current) {\n      // Closing an opened list\n      transition && transition(ComboboxActionType.ESCAPE)\n    }\n  }\n\n  const handleMouseEnter = () => {\n    // Wait for isScrollingRef.current to be updated in ComboboxList scrollHandler\n    // (mouseenter event is fired before the scroll event)\n    requestAnimationFrame(() => {\n      if (isScrollingRef?.current) return\n      const option = { label, value }\n      transition && transition(ComboboxActionType.NAVIGATE, { option })\n    })\n  }\n\n  return {\n    onClick: useWrapEvent(handleClick, onClick),\n    onMouseEnter: useWrapEvent(handleMouseEnter, onMouseEnter),\n  }\n}\n"],"mappings":";;;;;;;AAKA;AAEA;AACA;AAWA;;AAEO,SAASA,eAAe,CAE7BC,KAA0B,EAAEC,OAAwB,EAAE;EACtD,IAAQC,KAAK,GAAmCF,KAAK,CAA7CE,KAAK;IAAEC,KAAK,GAA4BH,KAAK,CAAtCG,KAAK;IAAEC,OAAO,GAAmBJ,KAAK,CAA/BI,OAAO;IAAEC,YAAY,GAAKL,KAAK,CAAtBK,YAAY;EAC3C,kBACE,IAAAC,iBAAU,EAACL,OAAO,CAAC;IADbM,IAAI,eAAJA,IAAI;IAAEC,QAAQ,eAARA,QAAQ;IAAEC,UAAU,eAAVA,UAAU;IAAEC,oBAAoB,eAApBA,oBAAoB;IAAEC,cAAc,eAAdA,cAAc;EAExE,WAAoBJ,IAAI;IAAhBK,OAAO,QAAPA,OAAO;EAEf,SAASC,WAAW,GAAG;IACrB,IAAMC,MAAM,GAAG;MAAEZ,KAAK,EAALA,KAAK;MAAEC,KAAK,EAALA;IAAM,CAAC;IAC/B,IAAIK,QAAQ,EAAE;MACZ,IAAII,OAAO,EAAE;QACX;QAAEJ,QAAQ,CACR,IAAAO,mBAAO,EAACH,OAAO,EAAE,CAACE,MAAM,CAAC,EAAE,UAACE,EAAE,EAAEC,EAAE;UAAA,OAAKD,EAAE,CAACb,KAAK,KAAKc,EAAE,CAACd,KAAK;QAAA,EAAC,CAC9D;MACH,CAAC,MAAM;QACL;QAAEK,QAAQ,CAAsBM,MAAM,CAAC;MACzC;IACF;IACAL,UAAU,IAAIA,UAAU,CAACS,yBAAkB,CAACC,iBAAiB,EAAE;MAAEL,MAAM,EAANA;IAAO,CAAC,CAAC;IAC1E,IAAIJ,oBAAoB,IAAIA,oBAAoB,CAACU,OAAO,EAAE;MAExDX,UAAU,IAAIA,UAAU,CAACS,yBAAkB,CAACG,MAAM,CAAC;IACrD;EACF;EAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAS;IAG7BC,qBAAqB,CAAC,YAAM;MAC1B,IAAIZ,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAES,OAAO,EAAE;MAC7B,IAAMN,MAAM,GAAG;QAAEZ,KAAK,EAALA,KAAK;QAAEC,KAAK,EAALA;MAAM,CAAC;MAC/BM,UAAU,IAAIA,UAAU,CAACS,yBAAkB,CAACM,QAAQ,EAAE;QAAEV,MAAM,EAANA;MAAO,CAAC,CAAC;IACnE,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IACLV,OAAO,EAAE,IAAAqB,mBAAY,EAACZ,WAAW,EAAET,OAAO,CAAC;IAC3CC,YAAY,EAAE,IAAAoB,mBAAY,EAACH,gBAAgB,EAAEjB,YAAY;EAC3D,CAAC;AACH"}