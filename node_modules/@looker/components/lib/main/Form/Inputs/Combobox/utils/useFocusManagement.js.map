{"version":3,"file":"useFocusManagement.js","names":["useFocusManagement","lastActionType","useCallbackRef","inputElement","inputCallbackRef","useSafeLayoutEffect","ComboboxActionType","SELECT_WITH_CLICK","INTERACT","focus","scrollLeft"],"sources":["../../../../../../src/Form/Inputs/Combobox/utils/useFocusManagement.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useCallbackRef, useSafeLayoutEffect } from '../../../../utils'\nimport { ComboboxActionType } from './state'\n\n// Move focus back to the input if we start navigating w/ the\n// keyboard after focus has moved to any focus-able content in\n// the popup.\n\nexport function useFocusManagement(lastActionType?: ComboboxActionType) {\n  const [inputElement, inputCallbackRef] = useCallbackRef<HTMLInputElement>()\n  // useSafeLayoutEffect so that the cursor goes to the end of the input instead\n  // of awkwardly at the beginning, unclear to my why ...\n  useSafeLayoutEffect(() => {\n    if (\n      lastActionType === ComboboxActionType.SELECT_WITH_CLICK ||\n      lastActionType === ComboboxActionType.INTERACT\n    ) {\n      if (inputElement) {\n        inputElement.focus()\n        inputElement.scrollLeft = 0\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lastActionType])\n\n  return { inputCallbackRef, inputElement }\n}\n"],"mappings":";;;;;;;;AAKA;AACA;;AAMO,SAASA,kBAAkB,CAACC,cAAmC,EAAE;EACtE,sBAAyC,IAAAC,qBAAc,GAAoB;IAAA;IAApEC,YAAY;IAAEC,gBAAgB;EAGrC,IAAAC,0BAAmB,EAAC,YAAM;IACxB,IACEJ,cAAc,KAAKK,yBAAkB,CAACC,iBAAiB,IACvDN,cAAc,KAAKK,yBAAkB,CAACE,QAAQ,EAC9C;MACA,IAAIL,YAAY,EAAE;QAChBA,YAAY,CAACM,KAAK,EAAE;QACpBN,YAAY,CAACO,UAAU,GAAG,CAAC;MAC7B;IACF;EAEF,CAAC,EAAE,CAACT,cAAc,CAAC,CAAC;EAEpB,OAAO;IAAEG,gBAAgB,EAAhBA,gBAAgB;IAAED,YAAY,EAAZA;EAAa,CAAC;AAC3C"}