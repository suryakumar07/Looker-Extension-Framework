{"version":3,"file":"useComboboxRefs.js","names":["useComboboxRefs","forwardedRef","useCallbackRef","wrapperElement","ref","optionsRef","useRef","listRef","autoCompletePropRef","inputReadOnlyPropRef","persistSelectionPropRef","closeOnSelectPropRef","windowingPropRef","isScrollingRef","indicatorPropRef","freeInputPropRef"],"sources":["../../../../../../src/Form/Inputs/Combobox/utils/useComboboxRefs.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Ref } from 'react'\nimport { useRef } from 'react'\nimport { useCallbackRef } from '../../../../utils'\nimport type { ComboboxOptionObject } from '../types'\n\nexport function useComboboxRefs(forwardedRef: Ref<HTMLDivElement>) {\n  // Need this to get the menu width\n  const [wrapperElement, ref] = useCallbackRef<HTMLDivElement>(forwardedRef)\n  // We store the values of all the ComboboxOptions on this ref. This makes it\n  // possible to perform the keyboard navigation from the input on the list. We\n  // manipulate this array through context so that we don't have to enforce a\n  // parent/child relationship between ComboboxList and ComboboxOption with\n  // cloneElement or fall back to DOM traversal. It's a new trick for me and\n  // I'm pretty excited about it.\n  const optionsRef = useRef<ComboboxOptionObject[]>([])\n\n  const listRef = useRef<HTMLElement | null>(null)\n\n  // When <ComboboxInput autoComplete={false} /> we don't want cycle back to\n  // the user's value while navigating (because it's always the user's value),\n  // but we need to know this in useKeyDown which is far away from the prop\n  // here, so we do something sneaky and write it to this ref on context so we\n  // can use it anywhere else ðŸ˜›. Another new trick for me and I'm excited\n  // about this one too!\n  const autoCompletePropRef = useRef(true)\n  const inputReadOnlyPropRef = useRef(false)\n\n  const persistSelectionPropRef = useRef(false)\n  const closeOnSelectPropRef = useRef(true)\n  const windowingPropRef = useRef(false)\n  const isScrollingRef = useRef(false)\n  const indicatorPropRef = useRef(false)\n  const freeInputPropRef = useRef(false)\n\n  return {\n    autoCompletePropRef,\n    closeOnSelectPropRef,\n    freeInputPropRef,\n    indicatorPropRef,\n    inputReadOnlyPropRef,\n    isScrollingRef,\n    listRef,\n    optionsRef,\n    persistSelectionPropRef,\n    ref,\n    windowingPropRef,\n    wrapperElement,\n  }\n}\n"],"mappings":";;;;;;;;AAMA;AACA;;AAGO,SAASA,eAAe,CAACC,YAAiC,EAAE;EAEjE,sBAA8B,IAAAC,qBAAc,EAAiBD,YAAY,CAAC;IAAA;IAAnEE,cAAc;IAAEC,GAAG;EAO1B,IAAMC,UAAU,GAAG,IAAAC,aAAM,EAAyB,EAAE,CAAC;EAErD,IAAMC,OAAO,GAAG,IAAAD,aAAM,EAAqB,IAAI,CAAC;;EAQhD,IAAME,mBAAmB,GAAG,IAAAF,aAAM,EAAC,IAAI,CAAC;EACxC,IAAMG,oBAAoB,GAAG,IAAAH,aAAM,EAAC,KAAK,CAAC;EAE1C,IAAMI,uBAAuB,GAAG,IAAAJ,aAAM,EAAC,KAAK,CAAC;EAC7C,IAAMK,oBAAoB,GAAG,IAAAL,aAAM,EAAC,IAAI,CAAC;EACzC,IAAMM,gBAAgB,GAAG,IAAAN,aAAM,EAAC,KAAK,CAAC;EACtC,IAAMO,cAAc,GAAG,IAAAP,aAAM,EAAC,KAAK,CAAC;EACpC,IAAMQ,gBAAgB,GAAG,IAAAR,aAAM,EAAC,KAAK,CAAC;EACtC,IAAMS,gBAAgB,GAAG,IAAAT,aAAM,EAAC,KAAK,CAAC;EAEtC,OAAO;IACLE,mBAAmB,EAAnBA,mBAAmB;IACnBG,oBAAoB,EAApBA,oBAAoB;IACpBI,gBAAgB,EAAhBA,gBAAgB;IAChBD,gBAAgB,EAAhBA,gBAAgB;IAChBL,oBAAoB,EAApBA,oBAAoB;IACpBI,cAAc,EAAdA,cAAc;IACdN,OAAO,EAAPA,OAAO;IACPF,UAAU,EAAVA,UAAU;IACVK,uBAAuB,EAAvBA,uBAAuB;IACvBN,GAAG,EAAHA,GAAG;IACHQ,gBAAgB,EAAhBA,gBAAgB;IAChBT,cAAc,EAAdA;EACF,CAAC;AACH"}