{"version":3,"file":"useFlatOptions.js","names":["getFlatOptions","options","reduce","acc","option","optionAsGroup","groupPseudoOptions","label","push","flatOptions","navigationOptions","useFlatOptions","useMemo","undefined"],"sources":["../../../../../../src/Form/Inputs/Select/utils/useFlatOptions.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useMemo } from 'react'\nimport type {\n  FlatOption,\n  SelectOptionGroupProps,\n  SelectOptionObject,\n  SelectOptionProps,\n} from '../types'\n\nexport const getFlatOptions = (options: SelectOptionProps[]) =>\n  options.reduce(\n    (\n      acc: {\n        flatOptions: FlatOption[]\n        navigationOptions: SelectOptionObject[]\n      },\n      option: SelectOptionProps\n    ) => {\n      const optionAsGroup = option as SelectOptionGroupProps\n      if (optionAsGroup.options) {\n        // Include the divider\n        const groupPseudoOptions = [{}]\n        if (optionAsGroup.label) {\n          // ...and header as pseudo options for windowing purposes\n          groupPseudoOptions.push({ label: optionAsGroup.label })\n        }\n        return {\n          flatOptions: [\n            ...acc.flatOptions,\n            ...groupPseudoOptions,\n            ...optionAsGroup.options,\n          ],\n          navigationOptions: [\n            ...acc.navigationOptions,\n            ...optionAsGroup.options,\n          ],\n        }\n      }\n      return {\n        flatOptions: [...acc.flatOptions, option],\n        navigationOptions: [\n          ...acc.navigationOptions,\n          option as SelectOptionObject,\n        ],\n      }\n    },\n    { flatOptions: [], navigationOptions: [] }\n  )\n\n/**\n * Takes potentially grouped options and returns 2 arrays of flattened options:\n * 1) flatOptions that includes dividers & headers (used for windowing), and\n * 2) navigationOptions that only includes options with values\n * @param options\n */\nexport const useFlatOptions = (options?: SelectOptionProps[]) => {\n  return useMemo(() => {\n    if (!options)\n      return { flatOptions: undefined, navigationOptions: undefined }\n\n    return getFlatOptions(options)\n  }, [options])\n}\n"],"mappings":";;;;;;;;AAKA;;AAQO,IAAMA,cAAc,GAAG,SAAjBA,cAAc,CAAIC,OAA4B;EAAA,OACzDA,OAAO,CAACC,MAAM,CACZ,UACEC,GAGC,EACDC,MAAyB,EACtB;IACH,IAAMC,aAAa,GAAGD,MAAgC;IACtD,IAAIC,aAAa,CAACJ,OAAO,EAAE;MAEzB,IAAMK,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;MAC/B,IAAID,aAAa,CAACE,KAAK,EAAE;QAEvBD,kBAAkB,CAACE,IAAI,CAAC;UAAED,KAAK,EAAEF,aAAa,CAACE;QAAM,CAAC,CAAC;MACzD;MACA,OAAO;QACLE,WAAW,gDACNN,GAAG,CAACM,WAAW,GACfH,kBAAkB,sCAClBD,aAAa,CAACJ,OAAO,EACzB;QACDS,iBAAiB,gDACZP,GAAG,CAACO,iBAAiB,uCACrBL,aAAa,CAACJ,OAAO;MAE5B,CAAC;IACH;IACA,OAAO;MACLQ,WAAW,gDAAMN,GAAG,CAACM,WAAW,IAAEL,MAAM,EAAC;MACzCM,iBAAiB,gDACZP,GAAG,CAACO,iBAAiB,IACxBN,MAAM;IAEV,CAAC;EACH,CAAC,EACD;IAAEK,WAAW,EAAE,EAAE;IAAEC,iBAAiB,EAAE;EAAG,CAAC,CAC3C;AAAA;;AAAA;AAQI,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIV,OAA6B,EAAK;EAC/D,OAAO,IAAAW,cAAO,EAAC,YAAM;IACnB,IAAI,CAACX,OAAO,EACV,OAAO;MAAEQ,WAAW,EAAEI,SAAS;MAAEH,iBAAiB,EAAEG;IAAU,CAAC;IAEjE,OAAOb,cAAc,CAACC,OAAO,CAAC;EAChC,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;AACf,CAAC;AAAA"}