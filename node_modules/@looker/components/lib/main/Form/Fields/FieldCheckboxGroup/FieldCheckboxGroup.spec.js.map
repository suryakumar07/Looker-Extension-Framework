{"version":3,"file":"FieldCheckboxGroup.spec.js","names":["fieldCheckboxProps","defaultValue","id","name","options","fieldOptions","test","extractCheckboxFromDomList","list","getElementsByTagName","map","el","textContent","renderListContent","renderWithTheme","screen","getByTestId","view","expect","toEqual","handleChange","jest","fn","Cheddar","getByLabelText","Gouda","fireEvent","click","toHaveBeenCalledWith"],"sources":["../../../../../src/Form/Fields/FieldCheckboxGroup/FieldCheckboxGroup.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport 'jest-styled-components'\nimport React from 'react'\nimport { fireEvent, screen } from '@testing-library/react'\nimport { renderWithTheme } from '@looker/components-test-utils'\nimport map from 'lodash/map'\nimport { fieldOptions } from '../../../fixtures/CheckboxRadio'\nimport { FieldCheckboxGroup } from './FieldCheckboxGroup'\n\nconst fieldCheckboxProps = {\n  defaultValue: ['swiss', 'cheddar'],\n  id: '1',\n  name: 'group1',\n  options: fieldOptions,\n}\n\ntest('FieldCheckboxGroup render a list of checkbox', () => {\n  const extractCheckboxFromDomList = (list: HTMLElement) => {\n    const options = list.getElementsByTagName('label')\n    return map(options, (el: HTMLElement) => {\n      return el.textContent\n    })\n  }\n\n  const renderListContent = () => {\n    renderWithTheme(<FieldCheckboxGroup {...fieldCheckboxProps} />)\n    return screen.getByTestId('checkbox-list')\n  }\n\n  const view = renderListContent()\n  expect(extractCheckboxFromDomList(view)).toEqual([\n    'Cheddar',\n    'Gouda',\n    'Swiss',\n    'Roquefort',\n  ])\n})\n\ntest('FieldCheckboxGroup checkbox onChange is working as expected', () => {\n  const handleChange = jest.fn()\n\n  renderWithTheme(\n    <FieldCheckboxGroup\n      {...fieldCheckboxProps}\n      defaultValue={[]}\n      onChange={handleChange}\n    />\n  )\n  const Cheddar = screen.getByLabelText('Cheddar')\n  const Gouda = screen.getByLabelText('Gouda')\n\n  fireEvent.click(Cheddar)\n\n  expect(handleChange).toHaveBeenCalledWith(['cheddar'])\n\n  fireEvent.click(Gouda)\n\n  expect(handleChange).toHaveBeenCalledWith(['cheddar', 'gouda'])\n})\n"],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,kBAAkB,GAAG;EACzBC,YAAY,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC;EAClCC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAEC;AACX,CAAC;AAEDC,IAAI,CAAC,8CAA8C,EAAE,YAAM;EACzD,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA0B,CAAIC,IAAiB,EAAK;IACxD,IAAMJ,OAAO,GAAGI,IAAI,CAACC,oBAAoB,CAAC,OAAO,CAAC;IAClD,OAAO,IAAAC,eAAG,EAACN,OAAO,EAAE,UAACO,EAAe,EAAK;MACvC,OAAOA,EAAE,CAACC,WAAW;IACvB,CAAC,CAAC;EACJ,CAAC;EAED,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,GAAS;IAC9B,IAAAC,oCAAe,EAAC,gCAAC,sCAAkB,EAAKd,kBAAkB,CAAI,CAAC;IAC/D,OAAOe,cAAM,CAACC,WAAW,CAAC,eAAe,CAAC;EAC5C,CAAC;EAED,IAAMC,IAAI,GAAGJ,iBAAiB,EAAE;EAChCK,MAAM,CAACX,0BAA0B,CAACU,IAAI,CAAC,CAAC,CAACE,OAAO,CAAC,CAC/C,SAAS,EACT,OAAO,EACP,OAAO,EACP,WAAW,CACZ,CAAC;AACJ,CAAC,CAAC;AAEFb,IAAI,CAAC,6DAA6D,EAAE,YAAM;EACxE,IAAMc,YAAY,GAAGC,IAAI,CAACC,EAAE,EAAE;EAE9B,IAAAR,oCAAe,EACb,gCAAC,sCAAkB,gCACbd,kBAAkB;IACtB,YAAY,EAAE,EAAG;IACjB,QAAQ,EAAEoB;EAAa,GACvB,CACH;EACD,IAAMG,OAAO,GAAGR,cAAM,CAACS,cAAc,CAAC,SAAS,CAAC;EAChD,IAAMC,KAAK,GAAGV,cAAM,CAACS,cAAc,CAAC,OAAO,CAAC;EAE5CE,iBAAS,CAACC,KAAK,CAACJ,OAAO,CAAC;EAExBL,MAAM,CAACE,YAAY,CAAC,CAACQ,oBAAoB,CAAC,CAAC,SAAS,CAAC,CAAC;EAEtDF,iBAAS,CAACC,KAAK,CAACF,KAAK,CAAC;EAEtBP,MAAM,CAACE,YAAY,CAAC,CAACQ,oBAAoB,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AACjE,CAAC,CAAC"}