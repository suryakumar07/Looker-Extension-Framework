{"version":3,"file":"FieldCheckbox.spec.js","names":["describe","test","renderWithTheme","expect","screen","getByTestId","toBeVisible","getByLabelText","toBeDisabled","errorMessage","message","type","getByRole","toHaveAttribute","description","getByText","ariaDescribed","parentElement","toHaveTextContent","paragraphSampleText","paragraph"],"sources":["../../../../../src/Form/Fields/FieldCheckbox/FieldCheckbox.spec.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport 'jest-styled-components'\nimport React from 'react'\nimport { renderWithTheme } from '@looker/components-test-utils'\nimport { screen } from '@testing-library/react'\nimport { Paragraph } from '../../..'\nimport { FieldCheckbox } from './FieldCheckbox'\n\ndescribe('FieldCheckbox', () => {\n  test('required', () => {\n    renderWithTheme(\n      <FieldCheckbox\n        id=\"FieldCheckboxID\"\n        label=\"I agree\"\n        name=\"thumbsUp\"\n        required\n      />\n    )\n\n    expect(screen.getByTestId('requiredStar')).toBeVisible()\n  })\n\n  test('disabled', () => {\n    renderWithTheme(\n      <FieldCheckbox\n        disabled\n        id=\"FieldCheckboxID\"\n        label=\"I agree\"\n        name=\"thumbsUp\"\n      />\n    )\n    expect(screen.getByLabelText('I agree')).toBeDisabled()\n  })\n\n  test('Accessibility', () => {\n    const errorMessage = 'This is an error'\n    renderWithTheme(\n      <FieldCheckbox\n        description=\"describe something here.\"\n        detail=\"4/20\"\n        id=\"test\"\n        label=\"Example Field\"\n        validationMessage={{ message: errorMessage, type: 'error' }}\n      />\n    )\n    expect(screen.getByRole('checkbox')).toHaveAttribute(\n      'aria-describedby',\n      'describedby-test'\n    )\n\n    const description = screen.getByText('describe something here.')\n    const ariaDescribed = description.parentElement\n\n    expect(ariaDescribed).toHaveAttribute('id', 'describedby-test')\n    expect(ariaDescribed).toHaveTextContent(errorMessage)\n  })\n\n  test('label can be a ReactNode', () => {\n    const paragraphSampleText = 'Sample paragraph text'\n    renderWithTheme(\n      <FieldCheckbox\n        id=\"FieldCheckboxID\"\n        label={<Paragraph>{paragraphSampleText}</Paragraph>}\n        name=\"thumbsUp\"\n      />\n    )\n\n    const paragraph = screen.getByText(paragraphSampleText)\n    expect(paragraph).toHaveTextContent(paragraphSampleText)\n  })\n})\n"],"mappings":";;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEAA,QAAQ,CAAC,eAAe,EAAE,YAAM;EAC9BC,IAAI,CAAC,UAAU,EAAE,YAAM;IACrB,IAAAC,oCAAe,EACb,gCAAC,4BAAa;MACZ,EAAE,EAAC,iBAAiB;MACpB,KAAK,EAAC,SAAS;MACf,IAAI,EAAC,UAAU;MACf,QAAQ;IAAA,EACR,CACH;IAEDC,MAAM,CAACC,cAAM,CAACC,WAAW,CAAC,cAAc,CAAC,CAAC,CAACC,WAAW,EAAE;EAC1D,CAAC,CAAC;EAEFL,IAAI,CAAC,UAAU,EAAE,YAAM;IACrB,IAAAC,oCAAe,EACb,gCAAC,4BAAa;MACZ,QAAQ;MACR,EAAE,EAAC,iBAAiB;MACpB,KAAK,EAAC,SAAS;MACf,IAAI,EAAC;IAAU,EACf,CACH;IACDC,MAAM,CAACC,cAAM,CAACG,cAAc,CAAC,SAAS,CAAC,CAAC,CAACC,YAAY,EAAE;EACzD,CAAC,CAAC;EAEFP,IAAI,CAAC,eAAe,EAAE,YAAM;IAC1B,IAAMQ,YAAY,GAAG,kBAAkB;IACvC,IAAAP,oCAAe,EACb,gCAAC,4BAAa;MACZ,WAAW,EAAC,0BAA0B;MACtC,MAAM,EAAC,MAAM;MACb,EAAE,EAAC,MAAM;MACT,KAAK,EAAC,eAAe;MACrB,iBAAiB,EAAE;QAAEQ,OAAO,EAAED,YAAY;QAAEE,IAAI,EAAE;MAAQ;IAAE,EAC5D,CACH;IACDR,MAAM,CAACC,cAAM,CAACQ,SAAS,CAAC,UAAU,CAAC,CAAC,CAACC,eAAe,CAClD,kBAAkB,EAClB,kBAAkB,CACnB;IAED,IAAMC,WAAW,GAAGV,cAAM,CAACW,SAAS,CAAC,0BAA0B,CAAC;IAChE,IAAMC,aAAa,GAAGF,WAAW,CAACG,aAAa;IAE/Cd,MAAM,CAACa,aAAa,CAAC,CAACH,eAAe,CAAC,IAAI,EAAE,kBAAkB,CAAC;IAC/DV,MAAM,CAACa,aAAa,CAAC,CAACE,iBAAiB,CAACT,YAAY,CAAC;EACvD,CAAC,CAAC;EAEFR,IAAI,CAAC,0BAA0B,EAAE,YAAM;IACrC,IAAMkB,mBAAmB,GAAG,uBAAuB;IACnD,IAAAjB,oCAAe,EACb,gCAAC,4BAAa;MACZ,EAAE,EAAC,iBAAiB;MACpB,KAAK,EAAE,gCAAC,WAAS,QAAEiB,mBAAmB,CAAc;MACpD,IAAI,EAAC;IAAU,EACf,CACH;IAED,IAAMC,SAAS,GAAGhB,cAAM,CAACW,SAAS,CAACI,mBAAmB,CAAC;IACvDhB,MAAM,CAACiB,SAAS,CAAC,CAACF,iBAAiB,CAACC,mBAAmB,CAAC;EAC1D,CAAC,CAAC;AACJ,CAAC,CAAC"}