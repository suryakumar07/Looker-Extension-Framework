{"version":3,"file":"Form.js","names":["FormContext","createContext","Form","forwardRef","props","ref","validationMessages","rest","displayName","useFormContext","name","validationMessage","context","useContext","vMessage"],"sources":["../../../src/Form/Form.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { Ref, FormEventHandler } from 'react'\nimport React, { forwardRef, useContext, createContext } from 'react'\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport type { SpaceHelperProps } from '../Layout'\nimport { SpaceVertical } from '../Layout'\nimport type { ValidationMessageProps } from './ValidationMessage'\n\nexport type ValidationMessages = Record<string, ValidationMessageProps>\n\nexport interface FormProps\n  extends SpaceHelperProps,\n    CompatibleHTMLProps<HTMLFormElement> {\n  /**\n   * A record of all validation messages for the form, where the key is the name\n   *  of the validated field and the value holds the information for the corresponding\n   *  message and validation type.\n   */\n  validationMessages?: ValidationMessages\n  onChange?: FormEventHandler<HTMLFormElement>\n  onInput?: FormEventHandler<HTMLFormElement>\n  onSubmit?: FormEventHandler<HTMLFormElement>\n}\n\nexport interface FormContextProps {\n  validationMessages?: ValidationMessages\n}\n\nexport const FormContext = createContext<FormContextProps>({})\n\nexport const Form = forwardRef(\n  (props: FormProps, ref: Ref<HTMLFormElement>) => {\n    const { validationMessages, ...rest } = props\n    return (\n      <FormContext.Provider\n        value={{\n          validationMessages,\n        }}\n      >\n        <SpaceVertical as=\"form\" {...rest} ref={ref} />\n      </FormContext.Provider>\n    )\n  }\n)\n\nForm.displayName = 'Form'\n\nexport interface ChildProp {\n  children?: JSX.Element\n}\n\nexport interface UseFormContextProps {\n  name?: string\n  validationMessage?: ValidationMessageProps\n}\n\nexport function useFormContext({\n  name,\n  validationMessage,\n}: UseFormContextProps) {\n  const context = useContext(FormContext)\n  let vMessage\n  if (context.validationMessages && name) {\n    vMessage = context.validationMessages[name]\n  } else if (validationMessage) {\n    vMessage = validationMessage\n  }\n  return vMessage\n}\n"],"mappings":";;;;;;;;;;;AAMA;AAGA;AAAyC;AAAA;AAAA;AAuBlC,IAAMA,WAAW,GAAG,IAAAC,oBAAa,EAAmB,CAAC,CAAC,CAAC;AAAA;AAEvD,IAAMC,IAAI,GAAG,IAAAC,iBAAU,EAC5B,UAACC,KAAgB,EAAEC,GAAyB,EAAK;EAC/C,IAAQC,kBAAkB,GAAcF,KAAK,CAArCE,kBAAkB;IAAKC,IAAI,6CAAKH,KAAK;EAC7C,OACE,gCAAC,WAAW,CAAC,QAAQ;IACnB,KAAK,EAAE;MACLE,kBAAkB,EAAlBA;IACF;EAAE,GAEF,gCAAC,qBAAa;IAAC,EAAE,EAAC;EAAM,GAAKC,IAAI;IAAE,GAAG,EAAEF;EAAI,GAAG,CAC1B;AAE3B,CAAC,CACF;AAAA;AAEDH,IAAI,CAACM,WAAW,GAAG,MAAM;AAWlB,SAASC,cAAc,OAGN;EAAA,IAFtBC,IAAI,QAAJA,IAAI;IACJC,iBAAiB,QAAjBA,iBAAiB;EAEjB,IAAMC,OAAO,GAAG,IAAAC,iBAAU,EAACb,WAAW,CAAC;EACvC,IAAIc,QAAQ;EACZ,IAAIF,OAAO,CAACN,kBAAkB,IAAII,IAAI,EAAE;IACtCI,QAAQ,GAAGF,OAAO,CAACN,kBAAkB,CAACI,IAAI,CAAC;EAC7C,CAAC,MAAM,IAAIC,iBAAiB,EAAE;IAC5BG,QAAQ,GAAGH,iBAAiB;EAC9B;EACA,OAAOG,QAAQ;AACjB"}