{"version":3,"file":"useBoundedRipple.js","names":["useBoundedRipple","forwardedRef","ref","props","useCallbackRef","element","useMeasuredElement","height","width","result","useRipple","bounded"],"sources":["../../../src/Ripple/useBoundedRipple.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { useMeasuredElement, useCallbackRef } from '../utils'\nimport { useRipple } from './useRipple'\nimport type { UseBoundedRippleProps, UseBoundedRippleResponse } from './types'\n\n/**\n * @returns callbacks should be mapped to DOM event handlers (see useRippleHandlers)\n * and remaining props should be passed to an internal element that includes rippleStyle\n */\nexport const useBoundedRipple = <T extends HTMLElement = HTMLElement>({\n  ref: forwardedRef,\n  ...props\n}: UseBoundedRippleProps<T>): UseBoundedRippleResponse<T> => {\n  const [element, ref] = useCallbackRef(forwardedRef)\n  const [{ height, width }] = useMeasuredElement(element)\n  const result = useRipple({ ...props, bounded: true, height, width })\n  return { ...result, ref }\n}\n"],"mappings":";;;;;;;;;;AAIA;AACA;AAAuC;AAAA;AAAA;AAOhC,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgB,OAGgC;EAAA,IAFtDC,YAAY,QAAjBC,GAAG;IACAC,KAAK;EAER,sBAAuB,IAAAC,qBAAc,EAACH,YAAY,CAAC;IAAA;IAA5CI,OAAO;IAAEH,GAAG;EACnB,0BAA4B,IAAAI,yBAAkB,EAACD,OAAO,CAAC;IAAA;IAAA;IAA9CE,MAAM,yBAANA,MAAM;IAAEC,KAAK,yBAALA,KAAK;EACtB,IAAMC,MAAM,GAAG,IAAAC,oBAAS,kCAAMP,KAAK;IAAEQ,OAAO,EAAE,IAAI;IAAEJ,MAAM,EAANA,MAAM;IAAEC,KAAK,EAALA;EAAK,GAAG;EACpE,uCAAYC,MAAM;IAAEP,GAAG,EAAHA;EAAG;AACzB,CAAC;AAAA"}