{"version":3,"file":"AccordionLegacy.js","names":["isLegacyComposition","children","Children","count","AccordionLegacy","contentDomProps","disclosureProps","isOpen","props","accordionChildren","forEach","child","isValidElement","isAccordionDisclosure","type","AccordionDisclosure","isAccordionContent","AccordionContent","push","React","cloneElement","className","mergeClassNames","key"],"sources":["../../../src/Accordion/AccordionLegacy.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { CompatibleHTMLProps } from '@looker/design-tokens'\nimport type { ReactElement, ReactNode } from 'react'\nimport React, { Children, isValidElement } from 'react'\nimport { mergeClassNames } from '../utils'\nimport { AccordionContent } from './AccordionContent'\nimport { AccordionDisclosure } from './AccordionDisclosure'\n\nexport const isLegacyComposition = (children: ReactNode) =>\n  Children.count(children) === 2\n\ntype DomProps = CompatibleHTMLProps<HTMLElement>\n\ntype AccordionLegacyProps = DomProps & {\n  children: ReactNode\n  contentDomProps: DomProps\n  disclosureProps: DomProps\n  isOpen: boolean\n}\n\nexport const AccordionLegacy = ({\n  children,\n  contentDomProps,\n  disclosureProps,\n  isOpen,\n  ...props\n}: AccordionLegacyProps) => {\n  const accordionChildren = [] as ReactNode[]\n\n  Children.forEach(children, child => {\n    if (isValidElement(child)) {\n      const isAccordionDisclosure =\n        (child as ReactElement<unknown>).type === AccordionDisclosure\n      const isAccordionContent =\n        (child as ReactElement<unknown>).type === AccordionContent\n\n      if (isAccordionDisclosure) {\n        accordionChildren.push(\n          React.cloneElement(child, {\n            ...disclosureProps,\n            className: mergeClassNames([\n              disclosureProps.className,\n              child.props.className,\n            ]),\n            key: 'accordion-disclosure',\n          })\n        )\n      } else if (isAccordionContent && isOpen) {\n        accordionChildren.push(\n          React.cloneElement(child, {\n            ...contentDomProps,\n            className: mergeClassNames([\n              child.props.className,\n              contentDomProps.className,\n            ]),\n            key: 'accordion-content',\n          })\n        )\n      }\n    }\n  })\n\n  return <div {...props}>{accordionChildren}</div>\n}\n"],"mappings":";;;;;;;;;;AAOA;AACA;AACA;AACA;AAA2D;AAAA;AAAA;AAAA;AAAA;AAEpD,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIC,QAAmB;EAAA,OACrDC,eAAQ,CAACC,KAAK,CAACF,QAAQ,CAAC,KAAK,CAAC;AAAA;AAAA;AAWzB,IAAMG,eAAe,GAAG,SAAlBA,eAAe,OAMA;EAAA,IAL1BH,QAAQ,QAARA,QAAQ;IACRI,eAAe,QAAfA,eAAe;IACfC,eAAe,QAAfA,eAAe;IACfC,MAAM,QAANA,MAAM;IACHC,KAAK;EAER,IAAMC,iBAAiB,GAAG,EAAiB;EAE3CP,eAAQ,CAACQ,OAAO,CAACT,QAAQ,EAAE,UAAAU,KAAK,EAAI;IAClC,IAAI,IAAAC,qBAAc,EAACD,KAAK,CAAC,EAAE;MACzB,IAAME,qBAAqB,GACxBF,KAAK,CAA2BG,IAAI,KAAKC,wCAAmB;MAC/D,IAAMC,kBAAkB,GACrBL,KAAK,CAA2BG,IAAI,KAAKG,kCAAgB;MAE5D,IAAIJ,qBAAqB,EAAE;QACzBJ,iBAAiB,CAACS,IAAI,CACpBC,iBAAK,CAACC,YAAY,CAACT,KAAK,kCACnBL,eAAe;UAClBe,SAAS,EAAE,IAAAC,sBAAe,EAAC,CACzBhB,eAAe,CAACe,SAAS,EACzBV,KAAK,CAACH,KAAK,CAACa,SAAS,CACtB,CAAC;UACFE,GAAG,EAAE;QAAsB,GAC3B,CACH;MACH,CAAC,MAAM,IAAIP,kBAAkB,IAAIT,MAAM,EAAE;QACvCE,iBAAiB,CAACS,IAAI,CACpBC,iBAAK,CAACC,YAAY,CAACT,KAAK,kCACnBN,eAAe;UAClBgB,SAAS,EAAE,IAAAC,sBAAe,EAAC,CACzBX,KAAK,CAACH,KAAK,CAACa,SAAS,EACrBhB,eAAe,CAACgB,SAAS,CAC1B,CAAC;UACFE,GAAG,EAAE;QAAmB,GACxB,CACH;MACH;IACF;EACF,CAAC,CAAC;EAEF,OAAO,uCAASf,KAAK,EAAGC,iBAAiB,CAAO;AAClD,CAAC;AAAA"}