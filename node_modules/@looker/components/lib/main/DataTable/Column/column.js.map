{"version":3,"file":"column.js","names":[],"sources":["../../../../src/DataTable/Column/column.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { IconType } from '../../Icon'\nimport type { DataTableColumnSize } from './columnSize'\n\nexport type DataTableColumnType = 'string' | 'number' | 'date'\nexport type DataTableColumnSortDirection = 'asc' | 'desc'\nexport interface DataTableColumn {\n  /**\n   * Title for the column\n   */\n  title: string\n  /**\n   * Display an `Icon` instead of the title text in the header row.\n   * NOTE: `title` will still be used in columnSelector and will be added as\n   * a tooltip to the icon displayed in the header row.\n   */\n  titleIcon?: IconType\n  /**\n   * A unique identifier for a given column\n   * Note: A column object's id should match a key in your data object template\n   */\n  id: string\n  /**\n   * In some locales, we may change horizontal alignment of 'number'\n   * @default string\n   */\n  type?: DataTableColumnType\n  /**\n   * Specify a size to have the column consume a fixed width.\n   *\n   * For content that is not expected to wrap `auto` is often the best choice as the column\n   * will only consume the horizontal room needed to contain its content.\n   *\n   * `auto` columns will use browser-native table column behavior.\n   * `small`, `medium`, & `large` are the predefined sizes and will truncate\n   * `nowrap` - column will not truncate and content will not wrap. Use with caution.\n   * `0-100` (number) - width is a percentage of the table's width.\n   *    Columns sized as a percentage do not support truncation.\n   *    Mixing percentage columns with other sizing formats is not supported and yields\n   *    unpredictable behavior. If percentages of all columns do not total 100% column widths\n   *    may be somewhat unpredictable as well (browser table column calculations vary widely\n   *    in these scenarios)\n   *\n   * @default auto\n   */\n  size?: DataTableColumnSize\n  /**\n   * Determines whether a column is sortable (i.e. whether a column's header can be clicked to perform a sort)\n   * Note: You must provide a onSort callback to the parent <DataTable/> component\n   * @default false\n   */\n  canSort?: boolean\n\n  /**\n   * Determines if the column is visible when the DataTable is initially displayed.\n   * If `undefined` the column will not be selectable (always visible)\n   * @default undefined\n   */\n  hide?: boolean\n\n  /**\n   * @private\n   */\n  sortDirection?: DataTableColumnSortDirection\n}\n\nexport type DataTableColumns = DataTableColumn[]\n"],"mappings":""}