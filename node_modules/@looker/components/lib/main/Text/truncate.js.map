{"version":3,"file":"truncate.js","names":["textTruncate","props","truncateLines","css","truncateCSS","truncate"],"sources":["../../../src/Text/truncate.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { css } from 'styled-components'\n\nexport interface TruncateCSSProps {\n  /** Truncate text */\n  truncate?: boolean\n  /** Truncate at a specified number of lines (whole number) */\n  truncateLines?: number\n}\n\nconst textTruncate = (props: TruncateCSSProps) => {\n  const { truncateLines } = props\n\n  if (truncateLines && truncateLines > 1) {\n    // Despite the vendor prefixes below, this works in all modern browsers\n    return css`\n      /* stylelint-disable value-no-vendor-prefix, property-no-vendor-prefix */\n      -webkit-box-orient: vertical;\n      display: -webkit-box;\n      -webkit-line-clamp: ${truncateLines};\n      overflow: hidden;\n      /* stylelint-enable */\n    `\n  }\n  return css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  `\n}\n\n/**\n * Helper function that allows external developers\n * to leverage `textTruncate` behavior as a CSS interpolated\n * string\n */\nexport const truncateCSS = (props: TruncateCSSProps) =>\n  css`\n    ${props.truncate || props.truncateLines ? textTruncate : null}\n  `\n"],"mappings":";;;;;;;;AAKA;AAAuC;AASvC,IAAMA,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAuB,EAAK;EAChD,IAAQC,aAAa,GAAKD,KAAK,CAAvBC,aAAa;EAErB,IAAIA,aAAa,IAAIA,aAAa,GAAG,CAAC,EAAE;IAEtC,WAAOC,qBAAG,yUAIcD,aAAa;EAIvC;EACA,WAAOC,qBAAG;AAKZ,CAAC;;AAOM,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIH,KAAuB;EAAA,WACjDE,qBAAG,wGACCF,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACC,aAAa,GAAGF,YAAY,GAAG,IAAI;AAAA,CAC9D;AAAA"}