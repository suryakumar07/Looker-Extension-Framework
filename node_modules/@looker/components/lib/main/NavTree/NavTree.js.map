{"version":3,"file":"NavTree.js","names":["INDICATOR_SPACER","NavTree","styled","children","defaultOpen","indicatorLabel","propsIsOpen","isOpen","label","onBlur","onClick","onClose","onFocus","onKeyUp","onOpen","onMouseEnter","onMouseLeave","propsToggleOpen","toggleOpen","truncate","restProps","isIndicatorToggleOnly","href","partitionTreeProps","treeItemInnerProps","accordionInnerProps","useTreeHandlers","hovered","contentHandlers","wrapperHandlers","disabled","icon","rel","selected","target","partitionAriaProps","ariaProps","treeContext","useContext","TreeContext","WindowedTreeContext","contextIsOpen","toggleNode","partialRender","startingDepth","depth","createListItemPartitions","inside","outside","accordionProps","undefined","useAccordion2","indicatorIcons","close","open","indicatorPosition","role","tabIndex","contentDomProps","domProps","disclosureProps","accordionIsOpen","indicator","disclosureLabel","_disclosureFocusVisible","focusVisible","onBlurDisclosureToggle","onClickDisclosureToggle","onKeyUpDisclosureToggle","disclosureDomProps","indicatorToggleOnlyProps","renderedIndicator","cloneElement","handleContentBlur","useWrapEvent","event","handleContentClick","handleContentKeyUp","statefulProps","color","ripple","content","createSafeRel","visible","AccordionIndicator","theme","space","listItemDimensions","defaults","density","gap"],"sources":["../../../src/NavTree/NavTree.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport { ArrowDropDown } from '@styled-icons/material/ArrowDropDown'\nimport { ArrowRight } from '@styled-icons/material/ArrowRight'\nimport styled from 'styled-components'\nimport type { FocusEvent, KeyboardEvent, MouseEvent } from 'react'\nimport React, { cloneElement, useContext } from 'react'\nimport type { ControlledOrUncontrolled } from '../Accordion2/controlTypes'\nimport { partitionTreeProps, useTreeHandlers } from '../Tree/utils'\nimport type { ListItemProps } from '../ListItem'\nimport { listItemDimensions } from '../ListItem'\nimport { TreeContext } from '../Tree/TreeContext'\nimport { useAccordion2 } from '../Accordion2'\nimport {\n  createSafeRel,\n  HoverDisclosureContext,\n  partitionAriaProps,\n  useWrapEvent,\n} from '../utils'\nimport { List } from '../List'\nimport { AccordionIndicator } from '../Accordion2/AccordionIndicator'\nimport { createListItemPartitions } from '../ListItem/utils'\nimport { WindowedTreeContext } from '../Tree/WindowedTreeNode'\nimport type { NavTreeProps } from './types'\nimport { NavTreeDisclosure } from './NavTreeDisclosure'\nimport { NavTreeItemContent } from './NavTreeItem/NavTreeItemContent'\n\n/**\n * Adds additional padding to left side of all NavTree-related elements\n * to allow for better click targeting when NavTree composition bumps against\n * left page edge.\n */\nexport const INDICATOR_SPACER = '8px'\n\nexport const NavTree = styled(\n  ({\n    children,\n    defaultOpen,\n    indicatorLabel,\n    isOpen: propsIsOpen,\n    label,\n    onBlur,\n    onClick,\n    onClose,\n    onFocus,\n    onKeyUp,\n    onOpen,\n    onMouseEnter,\n    onMouseLeave,\n    toggleOpen: propsToggleOpen,\n    truncate = true,\n    ...restProps\n  }: NavTreeProps) => {\n    /**\n     * If `href` is supplied the clicking the label will NOT trigger\n     * the underlying accordion. Only the indicator will trigger toggle\n     */\n    const isIndicatorToggleOnly = !!restProps.href\n\n    const [treeItemInnerProps, accordionInnerProps] = partitionTreeProps(\n      restProps as Record<string, unknown>\n    )\n\n    const { hovered, contentHandlers, wrapperHandlers } = useTreeHandlers({\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n    })\n\n    const { disabled, href, icon, rel, selected, target } =\n      treeItemInnerProps as Partial<ListItemProps>\n    const [ariaProps] = partitionAriaProps(restProps)\n\n    const treeContext = useContext(TreeContext)\n\n    // Context for supporting windowing\n    // - density must be defined at the collection level for consistent child height\n    // - opened / closed state must be managed at the collection level for accurate item count\n    // - partialRender to hide the accordion disclosure if it's above the window\n    const {\n      isOpen: contextIsOpen,\n      toggleNode,\n      partialRender,\n    } = useContext(WindowedTreeContext)\n\n    const isOpen = contextIsOpen ?? propsIsOpen\n    const toggleOpen = toggleNode ?? propsToggleOpen\n\n    const startingDepth = 0\n    const depth = treeContext.depth ? treeContext.depth : startingDepth\n\n    const [inside, outside] = createListItemPartitions({\n      ...treeItemInnerProps,\n      children: label,\n      icon,\n      truncate,\n    })\n    let accordionProps: ControlledOrUncontrolled = {\n      defaultOpen,\n      onClose,\n      onOpen,\n      ...accordionInnerProps,\n    }\n    if (isOpen !== undefined && toggleOpen) {\n      accordionProps = { ...accordionProps, isOpen, toggleOpen }\n    }\n\n    const {\n      contentDomProps,\n      domProps,\n      disclosureProps,\n      isOpen: accordionIsOpen,\n    } = useAccordion2({\n      'aria-selected': selected,\n      children: (\n        <List disableKeyboardNav role=\"group\" windowing={false}>\n          {children}\n        </List>\n      ),\n      disabled,\n      indicatorIcons: {\n        close: <ArrowRight aria-label={`${indicatorLabel} Close`} />,\n        open: <ArrowDropDown aria-label={`${indicatorLabel} Open`} />,\n      },\n      indicatorPosition: 'left',\n      label: inside,\n      onBlur,\n      role: 'treeitem',\n      tabIndex: -1,\n      ...accordionProps,\n    })\n\n    const {\n      indicator,\n      children: disclosureLabel,\n      focusVisible: _disclosureFocusVisible,\n      onBlur: onBlurDisclosureToggle,\n      onClick: onClickDisclosureToggle,\n      onKeyUp: onKeyUpDisclosureToggle,\n      ...disclosureDomProps\n    } = disclosureProps\n\n    const indicatorToggleOnlyProps = {\n      onBlur: onBlurDisclosureToggle,\n      onClick: onClickDisclosureToggle,\n      onKeyUp: onKeyUpDisclosureToggle,\n      tabIndex: -1,\n    }\n    const renderedIndicator = cloneElement(indicator, {\n      ...(isIndicatorToggleOnly ? indicatorToggleOnlyProps : undefined),\n    })\n\n    const handleContentBlur = useWrapEvent((event: FocusEvent<HTMLElement>) => {\n      if (!isIndicatorToggleOnly && onBlurDisclosureToggle)\n        onBlurDisclosureToggle(event)\n    })\n\n    const handleContentClick = useWrapEvent(\n      (event: MouseEvent<HTMLElement>) => {\n        if (!isIndicatorToggleOnly && onClickDisclosureToggle)\n          onClickDisclosureToggle(event)\n      },\n      onClick\n    )\n\n    const handleContentKeyUp = useWrapEvent(\n      (event: KeyboardEvent<HTMLElement>) => {\n        if (!isIndicatorToggleOnly && onKeyUpDisclosureToggle)\n          onKeyUpDisclosureToggle(event)\n      }\n    )\n\n    const statefulProps = {\n      color: 'key' as const,\n      disabled,\n      hovered,\n      // disables the hover bg color since ripple includes hover style\n      ripple: true,\n      selected,\n    }\n\n    const content = (\n      <>\n        {isIndicatorToggleOnly && renderedIndicator}\n        <NavTreeItemContent\n          aria-selected={selected}\n          href={href}\n          itemRole={isIndicatorToggleOnly ? 'link' : 'none'}\n          onBlur={handleContentBlur}\n          /**\n           * useAccordion2 would normally just wrap props' onClick and onKeyup\n           * with open state toggling, but because we only want the indicator to handle\n           * open state toggling, we do not pass onClick and onKeyUp\n           * into useAccordion2 and receive them via disclosureProps, so instead we directly assign them here\n           */\n          onClick={handleContentClick}\n          onKeyUp={handleContentKeyUp}\n          rel={createSafeRel(rel, target)}\n          /**\n           * Parent NavTreeDisclosure will handle ripple effect\n           */\n          ripple={false}\n          target={target}\n          {...ariaProps}\n          {...contentHandlers}\n          {...disclosureDomProps}\n        >\n          {!isIndicatorToggleOnly && renderedIndicator}\n          {disclosureLabel}\n        </NavTreeItemContent>\n      </>\n    )\n\n    return (\n      <HoverDisclosureContext.Provider value={{ visible: hovered }}>\n        <TreeContext.Provider\n          value={{\n            color: statefulProps.color,\n            depth: depth + 1,\n          }}\n        >\n          <div {...domProps}>\n            {!partialRender && (\n              <NavTreeDisclosure\n                depth={depth}\n                {...wrapperHandlers}\n                {...statefulProps}\n              >\n                {content}\n                {outside}\n              </NavTreeDisclosure>\n            )}\n            {accordionIsOpen && <div {...contentDomProps} />}\n          </div>\n        </TreeContext.Provider>\n      </HoverDisclosureContext.Provider>\n    )\n  }\n)<NavTreeProps>`\n  ${AccordionIndicator} {\n    padding-left: ${INDICATOR_SPACER};\n    ${({ icon, theme }) =>\n      !icon &&\n      `margin-right: ${\n        theme.space[listItemDimensions(theme.defaults.density).gap]\n      };`}\n  }\n`\n"],"mappings":"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"}