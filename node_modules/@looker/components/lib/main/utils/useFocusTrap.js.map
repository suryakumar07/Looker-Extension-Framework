{"version":3,"file":"useFocusTrap.js","names":["useFocusTrap","clickOutsideDeactivates","props","returnFocusRef","useRef","options","useMemo","useTrapStack","context","FocusTrapContext"],"sources":["../../../src/utils/useFocusTrap.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { useMemo, useRef } from 'react'\nimport type { FocusTrapOptions } from '@looker/components-providers'\nimport { FocusTrapContext } from '@looker/components-providers'\nimport type { UseTrapStackBaseProps } from './useTrapStack'\nimport { useTrapStack } from './useTrapStack'\n\nexport const useFocusTrap = <E extends HTMLElement = HTMLElement>({\n  clickOutsideDeactivates,\n  ...props\n}: UseTrapStackBaseProps<E> & { clickOutsideDeactivates?: boolean }) => {\n  const returnFocusRef = useRef<Element>(null)\n  const options = useMemo(\n    () => ({ clickOutsideDeactivates, returnFocusRef }),\n    [returnFocusRef, clickOutsideDeactivates]\n  )\n  return useTrapStack<E, FocusTrapOptions>({\n    context: FocusTrapContext,\n    // If options.returnFocusRef is set, it will override this one\n    options,\n    ...props,\n  })\n}\n"],"mappings":";;;;;;;;;AAKA;AAEA;AAEA;AAA6C;AAAA;AAAA;AAEtC,IAAMA,YAAY,GAAG,SAAfA,YAAY,OAG+C;EAAA,IAFtEC,uBAAuB,QAAvBA,uBAAuB;IACpBC,KAAK;EAER,IAAMC,cAAc,GAAG,IAAAC,aAAM,EAAU,IAAI,CAAC;EAC5C,IAAMC,OAAO,GAAG,IAAAC,cAAO,EACrB;IAAA,OAAO;MAAEL,uBAAuB,EAAvBA,uBAAuB;MAAEE,cAAc,EAAdA;IAAe,CAAC;EAAA,CAAC,EACnD,CAACA,cAAc,EAAEF,uBAAuB,CAAC,CAC1C;EACD,OAAO,IAAAM,0BAAY;IACjBC,OAAO,EAAEC,qCAAgB;IAEzBJ,OAAO,EAAPA;EAAO,GACJH,KAAK,EACR;AACJ,CAAC;AAAA"}