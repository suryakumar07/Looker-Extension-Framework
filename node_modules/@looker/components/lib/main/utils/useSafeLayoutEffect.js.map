{"version":3,"file":"useSafeLayoutEffect.js","names":["SafeSSRContext","createContext","SafeSSRProvider","children","useSafeLayoutEffect","value","useContext","isSSR","window","useLayoutEffect","useEffect","reactUseLayoutEffect"],"sources":["../../../src/utils/useSafeLayoutEffect.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useLayoutEffect as reactUseLayoutEffect,\n} from 'react'\n\nexport const SafeSSRContext = createContext(false)\n\n/**\n * Avoid the React useLayoutEffect when using renderToString\n * on the client side\n */\nexport const SafeSSRProvider = ({\n  children,\n}: React.PropsWithChildren<unknown>) => {\n  return <SafeSSRContext.Provider value>{children}</SafeSSRContext.Provider>\n}\n\n/**\n * Avoids the React useLayoutEffect error by falling back to useEffect.\n * Note: A component that calls useLayoutEffect will most likely\n * not behave correctly in SSR. Instead, consider delaying rendering\n * until client-side JS loads, via useEffect.\n */\nexport const useSafeLayoutEffect: typeof reactUseLayoutEffect = (...args) => {\n  const value = useContext(SafeSSRContext)\n  // SSR is detected via undefined window, or set with SafeSSRProvider\n  const isSSR = value || typeof window === 'undefined'\n\n  const useLayoutEffect = isSSR ? useEffect : reactUseLayoutEffect\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useLayoutEffect(...args)\n}\n"],"mappings":";;;;;;;AAKA;AAKc;AAAA;;AAEP,IAAMA,cAAc,GAAG,IAAAC,oBAAa,EAAC,KAAK,CAAC;;AAAA;AAM3C,IAAMC,eAAe,GAAG,SAAlBA,eAAe,OAEY;EAAA,IADtCC,QAAQ,QAARA,QAAQ;EAER,OAAO,gCAAC,cAAc,CAAC,QAAQ;IAAC,KAAK;EAAA,GAAEA,QAAQ,CAA2B;AAC5E,CAAC;;AAAA;AAQM,IAAMC,mBAAgD,GAAG,SAAnDA,mBAAgD,GAAgB;EAC3E,IAAMC,KAAK,GAAG,IAAAC,iBAAU,EAACN,cAAc,CAAC;EAExC,IAAMO,KAAK,GAAGF,KAAK,IAAI,OAAOG,MAAM,KAAK,WAAW;EAEpD,IAAMC,eAAe,GAAGF,KAAK,GAAGG,gBAAS,GAAGC,sBAAoB;EAEhE,OAAOF,eAAe,yBAAS;AACjC,CAAC;AAAA"}