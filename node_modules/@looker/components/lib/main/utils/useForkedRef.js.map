{"version":3,"file":"useForkedRef.js","names":["assignRef","ref","value","current","error","Error","useForkedRef","refs","useMemo","node","forEach"],"sources":["../../../src/utils/useForkedRef.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\n// Much of the following is pulled from https://github.com/reach/reach-ui\n// because their work is fantastic (but is not in TypeScript)\n\nimport type { Ref, MutableRefObject } from 'react'\nimport { useMemo } from 'react'\n\nexport type RefToFork<E> = Ref<E> | MutableRefObject<E> | undefined\n\nfunction assignRef<E extends HTMLElement>(ref: RefToFork<E>, value: E | null) {\n  if (!ref) return\n  if (typeof ref === 'function') {\n    ref(value)\n  } else {\n    try {\n      ;(ref as MutableRefObject<E | null>).current = value\n    } catch (error) {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`)\n    }\n  }\n}\n\nexport function useForkedRef<E extends HTMLElement>(...refs: RefToFork<E>[]) {\n  return useMemo(() => {\n    return (node: E | null) => {\n      refs.forEach(ref => {\n        assignRef(ref, node)\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs)\n}\n"],"mappings":";;;;;;AASA;;AAIA,SAASA,SAAS,CAAwBC,GAAiB,EAAEC,KAAe,EAAE;EAC5E,IAAI,CAACD,GAAG,EAAE;EACV,IAAI,OAAOA,GAAG,KAAK,UAAU,EAAE;IAC7BA,GAAG,CAACC,KAAK,CAAC;EACZ,CAAC,MAAM;IACL,IAAI;MACF;MAAED,GAAG,CAAgCE,OAAO,GAAGD,KAAK;IACtD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAM,IAAIC,KAAK,iCAAyBH,KAAK,yBAAaD,GAAG,QAAI;IACnE;EACF;AACF;AAEO,SAASK,YAAY,GAAiD;EAAA,kCAAtBC,IAAI;IAAJA,IAAI;EAAA;EACzD,OAAO,IAAAC,cAAO,EAAC,YAAM;IACnB,OAAO,UAACC,IAAc,EAAK;MACzBF,IAAI,CAACG,OAAO,CAAC,UAAAT,GAAG,EAAI;QAClBD,SAAS,CAACC,GAAG,EAAEQ,IAAI,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC;EAEH,CAAC,EAAEF,IAAI,CAAC;AACV"}