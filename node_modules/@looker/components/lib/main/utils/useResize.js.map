{"version":3,"file":"useResize.js","names":["useResize","element","handler","useSafeLayoutEffect","throttledHandler","throttle","resizeObserver","ResizeObserver","observe","window","addEventListener","removeEventListener","disconnect"],"sources":["../../../src/utils/useResize.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport throttle from 'lodash/throttle'\nimport { useSafeLayoutEffect } from './useSafeLayoutEffect'\n\n/**\n * Calls the provided handler function when the element is resized.\n * If the handler contains a state setter, it should be wrapped in useCallback to avoid an infinite loop.\n * @param element the element to observe\n * @param handler the function to call on resize\n */\nexport const useResize = (element: HTMLElement | null, handler: () => void) => {\n  useSafeLayoutEffect(() => {\n    const throttledHandler = throttle(handler, 100)\n\n    if (!element) {\n      return\n    }\n\n    handler()\n\n    const resizeObserver = new ResizeObserver(() => throttledHandler())\n\n    if (element) {\n      resizeObserver.observe(element as unknown as HTMLElement)\n    }\n\n    window.addEventListener('resize', throttledHandler)\n\n    return () => {\n      window.removeEventListener('resize', throttledHandler)\n      if (resizeObserver) {\n        resizeObserver.disconnect()\n      }\n    }\n  }, [handler, element])\n}\n"],"mappings":";;;;;;;AAKA;AACA;;AAQO,IAAMA,SAAS,GAAG,SAAZA,SAAS,CAAIC,OAA2B,EAAEC,OAAmB,EAAK;EAC7E,IAAAC,wCAAmB,EAAC,YAAM;IACxB,IAAMC,gBAAgB,GAAG,IAAAC,oBAAQ,EAACH,OAAO,EAAE,GAAG,CAAC;IAE/C,IAAI,CAACD,OAAO,EAAE;MACZ;IACF;IAEAC,OAAO,EAAE;IAET,IAAMI,cAAc,GAAG,IAAIC,cAAc,CAAC;MAAA,OAAMH,gBAAgB,EAAE;IAAA,EAAC;IAEnE,IAAIH,OAAO,EAAE;MACXK,cAAc,CAACE,OAAO,CAACP,OAAO,CAA2B;IAC3D;IAEAQ,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEN,gBAAgB,CAAC;IAEnD,OAAO,YAAM;MACXK,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEP,gBAAgB,CAAC;MACtD,IAAIE,cAAc,EAAE;QAClBA,cAAc,CAACM,UAAU,EAAE;MAC7B;IACF,CAAC;EACH,CAAC,EAAE,CAACV,OAAO,EAAED,OAAO,CAAC,CAAC;AACxB,CAAC;AAAA"}