{"version":3,"file":"useCallbackRef.js","names":["useCallbackRef","forwardedRef","useState","currentElement","setCurrentElement","callbackRef","useCallback","node","forkedRef","useForkedRef"],"sources":["../../../src/utils/useCallbackRef.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport type { Ref } from 'react'\nimport { useCallback, useState } from 'react'\nimport { useForkedRef } from './useForkedRef'\n\n// This hook is for when a dom node needs to be \"seen\" in some useEffect logic.\n// Since currentElement is state, it will be effective when used in a dependency array\n// while a mutable object generated by useRef isn't, and won't.\n\nexport function useCallbackRef<T extends HTMLElement = HTMLElement>(\n  forwardedRef?: Ref<T>\n): [T | null, (node: T | null) => void] {\n  const [currentElement, setCurrentElement] = useState<T | null>(null)\n  const callbackRef = useCallback((node: T | null) => {\n    setCurrentElement(node)\n  }, [])\n  const forkedRef = useForkedRef<T>(forwardedRef, callbackRef)\n  return [currentElement, forkedRef]\n}\n"],"mappings":";;;;;;;;AAKA;AACA;;AAMO,SAASA,cAAc,CAC5BC,YAAqB,EACiB;EACtC,gBAA4C,IAAAC,eAAQ,EAAW,IAAI,CAAC;IAAA;IAA7DC,cAAc;IAAEC,iBAAiB;EACxC,IAAMC,WAAW,GAAG,IAAAC,kBAAW,EAAC,UAACC,IAAc,EAAK;IAClDH,iBAAiB,CAACG,IAAI,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EACN,IAAMC,SAAS,GAAG,IAAAC,0BAAY,EAAIR,YAAY,EAAEI,WAAW,CAAC;EAC5D,OAAO,CAACF,cAAc,EAAEK,SAAS,CAAC;AACpC"}