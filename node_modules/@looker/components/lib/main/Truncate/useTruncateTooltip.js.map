{"version":3,"file":"useTruncateTooltip.js","names":["useTruncateTooltip","children","description","element","useTooltip","canOpen","triggerElement","undefined","isOverflowing","content","invert","placement","textAlign","width"],"sources":["../../../src/Truncate/useTruncateTooltip.tsx"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport type { ReactNode } from 'react'\nimport { Span } from '../Text/Span'\nimport { useTooltip } from '../Tooltip'\nimport { isOverflowing } from '../utils'\n\nexport type UseTruncateTooltipProps = {\n  children: ReactNode\n  description?: string\n  element?: HTMLElement | null\n}\n\nexport const useTruncateTooltip = ({\n  children,\n  description,\n  element,\n}: UseTruncateTooltipProps) => {\n  return useTooltip({\n    // only render tooltip if text actually overflows (or if there's a description)\n    canOpen: (triggerElement: HTMLElement) =>\n      description !== undefined || isOverflowing(element || triggerElement),\n    content: (\n      <>\n        {children}\n        {description && (\n          <>\n            <br />\n            <Span color=\"text2\">{description}</Span>\n          </>\n        )}\n      </>\n    ),\n    invert: false,\n    placement: 'top-start',\n    textAlign: 'left',\n    width: 'auto',\n  })\n}\n"],"mappings":";;;;;;;AAKA;AAEA;AACA;AACA;;AAQO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAkB,OAIA;EAAA,IAH7BC,QAAQ,QAARA,QAAQ;IACRC,WAAW,QAAXA,WAAW;IACXC,OAAO,QAAPA,OAAO;EAEP,OAAO,IAAAC,mBAAU,EAAC;IAEhBC,OAAO,EAAE,iBAACC,cAA2B;MAAA,OACnCJ,WAAW,KAAKK,SAAS,IAAI,IAAAC,oBAAa,EAACL,OAAO,IAAIG,cAAc,CAAC;IAAA;IACvEG,OAAO,EACL,kEACGR,QAAQ,EACRC,WAAW,IACV,kEACE,2CAAM,EACN,gCAAC,UAAI;MAAC,KAAK,EAAC;IAAO,GAAEA,WAAW,CAAQ,CAE3C,CAEJ;IACDQ,MAAM,EAAE,KAAK;IACbC,SAAS,EAAE,WAAW;IACtBC,SAAS,EAAE,MAAM;IACjBC,KAAK,EAAE;EACT,CAAC,CAAC;AACJ,CAAC;AAAA"}