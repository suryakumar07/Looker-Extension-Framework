{"version":3,"file":"colorBreakdown.js","names":["chunk","coreColors","derivativeColors","intentColors","specifiableTextColors","textColors","uiColors","colorBreakdown","colors","divided","core","derivative","intent","specializedText","stateful","text","ui","key","value","Object","entries","includes","statefulColorGroups","map","obj","forEach","name","color"],"sources":["../../../../src/color/utils/colorBreakdown.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport chunk from 'lodash/chunk'\nimport type { Colors } from '../'\nimport {\n  coreColors,\n  derivativeColors,\n  intentColors,\n  specifiableTextColors,\n  textColors,\n  uiColors,\n} from '../'\n\nexport type ColorKey = { [key: string]: string }\n\nexport type StatefulColorGroups = ColorKey[]\n\ntype DividedColors = {\n  core: ColorKey\n  derivative: ColorKey\n  intent: ColorKey\n  specializedText: ColorKey\n  stateful: ColorKey\n  text: ColorKey\n  ui: ColorKey\n}\n\ntype ColorBreakdown = {\n  divided: DividedColors\n  statefulColorGroups: StatefulColorGroups\n}\n\nexport const colorBreakdown = (colors: Colors): ColorBreakdown => {\n  const divided: DividedColors = {\n    core: {},\n    derivative: {},\n    intent: {},\n    specializedText: {},\n    stateful: {},\n    text: {},\n    ui: {},\n  }\n\n  for (const [key, value] of Object.entries(colors)) {\n    if ((coreColors as string[]).includes(key)) {\n      if (key !== 'pageBackground') {\n        divided.core[key] = value\n      }\n    } else if ((intentColors as string[]).includes(key)) {\n      divided.intent[key] = value\n    } else if ((derivativeColors as string[]).includes(key)) {\n      divided.derivative[key] = value\n    } else if ((textColors as string[]).includes(key)) {\n      divided.text[key] = value\n    } else if ((uiColors as string[]).includes(key)) {\n      divided.ui[key] = value\n    } else if ((specifiableTextColors as string[]).includes(key)) {\n      divided.specializedText[key] = value\n    } else {\n      divided.stateful[key] = value\n    }\n  }\n\n  const statefulColorGroups: StatefulColorGroups = chunk(\n    Object.entries(divided.stateful),\n    7\n  ).map(chunk => {\n    const obj: { [key: string]: string } = {}\n    chunk.forEach(([name, color]) => (obj[name] = color))\n    return obj\n  })\n\n  return { divided, statefulColorGroups }\n}\n"],"mappings":";;AAKA,OAAOA,KAAK,MAAM,cAAc;AAEhC,SACEC,UAAU,EACVC,gBAAgB,EAChBC,YAAY,EACZC,qBAAqB,EACrBC,UAAU,EACVC,QAAQ,QACH,KAAK;AAqBZ,OAAO,MAAMC,cAAc,GAAIC,MAAc,IAAqB;EAChE,MAAMC,OAAsB,GAAG;IAC7BC,IAAI,EAAE,CAAC,CAAC;IACRC,UAAU,EAAE,CAAC,CAAC;IACdC,MAAM,EAAE,CAAC,CAAC;IACVC,eAAe,EAAE,CAAC,CAAC;IACnBC,QAAQ,EAAE,CAAC,CAAC;IACZC,IAAI,EAAE,CAAC,CAAC;IACRC,EAAE,EAAE,CAAC;EACP,CAAC;EAED,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACZ,MAAM,CAAC,EAAE;IACjD,IAAKP,UAAU,CAAcoB,QAAQ,CAACJ,GAAG,CAAC,EAAE;MAC1C,IAAIA,GAAG,KAAK,gBAAgB,EAAE;QAC5BR,OAAO,CAACC,IAAI,CAACO,GAAG,CAAC,GAAGC,KAAK;MAC3B;IACF,CAAC,MAAM,IAAKf,YAAY,CAAckB,QAAQ,CAACJ,GAAG,CAAC,EAAE;MACnDR,OAAO,CAACG,MAAM,CAACK,GAAG,CAAC,GAAGC,KAAK;IAC7B,CAAC,MAAM,IAAKhB,gBAAgB,CAAcmB,QAAQ,CAACJ,GAAG,CAAC,EAAE;MACvDR,OAAO,CAACE,UAAU,CAACM,GAAG,CAAC,GAAGC,KAAK;IACjC,CAAC,MAAM,IAAKb,UAAU,CAAcgB,QAAQ,CAACJ,GAAG,CAAC,EAAE;MACjDR,OAAO,CAACM,IAAI,CAACE,GAAG,CAAC,GAAGC,KAAK;IAC3B,CAAC,MAAM,IAAKZ,QAAQ,CAAce,QAAQ,CAACJ,GAAG,CAAC,EAAE;MAC/CR,OAAO,CAACO,EAAE,CAACC,GAAG,CAAC,GAAGC,KAAK;IACzB,CAAC,MAAM,IAAKd,qBAAqB,CAAciB,QAAQ,CAACJ,GAAG,CAAC,EAAE;MAC5DR,OAAO,CAACI,eAAe,CAACI,GAAG,CAAC,GAAGC,KAAK;IACtC,CAAC,MAAM;MACLT,OAAO,CAACK,QAAQ,CAACG,GAAG,CAAC,GAAGC,KAAK;IAC/B;EACF;EAEA,MAAMI,mBAAwC,GAAGtB,KAAK,CACpDmB,MAAM,CAACC,OAAO,CAACX,OAAO,CAACK,QAAQ,CAAC,EAChC,CAAC,CACF,CAACS,GAAG,CAACvB,KAAK,IAAI;IACb,MAAMwB,GAA8B,GAAG,CAAC,CAAC;IACzCxB,KAAK,CAACyB,OAAO,CAAC,CAAC,CAACC,IAAI,EAAEC,KAAK,CAAC,KAAMH,GAAG,CAACE,IAAI,CAAC,GAAGC,KAAM,CAAC;IACrD,OAAOH,GAAG;EACZ,CAAC,CAAC;EAEF,OAAO;IAAEf,OAAO;IAAEa;EAAoB,CAAC;AACzC,CAAC"}