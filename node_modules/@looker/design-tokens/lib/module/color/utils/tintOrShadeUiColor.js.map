{"version":3,"file":"tintOrShadeUiColor.js","names":["getLuminance","shade","tint","scaleMixAmount","tintOrShadeUiColor","mixAmount","color","isBright","mixAdjustment","mixPercent"],"sources":["../../../../src/color/utils/tintOrShadeUiColor.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport getLuminance from 'polished/lib/color/getLuminance'\nimport shade from 'polished/lib/color/shade'\nimport tint from 'polished/lib/color/tint'\nimport { scaleMixAmount } from './scaleMixAmount'\n\n/**\n * Tints or shades a color based on the luminosity of the color\n *\n * Used for generating our UI colors based on the background color\n *\n * If the color has a higher luminosity, a light background for example,\n * the color is shaded, returning a color mixed with black\n *\n * For colors with lower luminosity, dark background colors for example,\n * the colors is tinted,returning a color mixed with white\n *\n * @param mixAmount 0 - 100\n * @param color\n */\nexport const tintOrShadeUiColor = (mixAmount: number, color: string) => {\n  const isBright = getLuminance(color) > 0.5\n  const mixAdjustment = isBright ? mixAmount : scaleMixAmount(mixAmount, 1.5)\n\n  /* shade & tint functions cannot exceed 100% */\n  const mixPercent = mixAdjustment > 100 ? 1 : mixAdjustment / 100\n\n  return (isBright ? shade : tint)(mixPercent, color)\n}\n"],"mappings":";;AAKA,OAAOA,YAAY,MAAM,iCAAiC;AAC1D,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,yBAAyB;AAC1C,SAASC,cAAc,QAAQ,kBAAkB;;AAgBjD,OAAO,MAAMC,kBAAkB,GAAG,CAACC,SAAiB,EAAEC,KAAa,KAAK;EACtE,MAAMC,QAAQ,GAAGP,YAAY,CAACM,KAAK,CAAC,GAAG,GAAG;EAC1C,MAAME,aAAa,GAAGD,QAAQ,GAAGF,SAAS,GAAGF,cAAc,CAACE,SAAS,EAAE,GAAG,CAAC;;EAG3E,MAAMI,UAAU,GAAGD,aAAa,GAAG,GAAG,GAAG,CAAC,GAAGA,aAAa,GAAG,GAAG;EAEhE,OAAO,CAACD,QAAQ,GAAGN,KAAK,GAAGC,IAAI,EAAEO,UAAU,EAAEH,KAAK,CAAC;AACrD,CAAC"}