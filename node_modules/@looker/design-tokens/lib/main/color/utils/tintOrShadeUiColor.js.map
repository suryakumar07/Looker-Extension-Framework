{"version":3,"file":"tintOrShadeUiColor.js","names":["tintOrShadeUiColor","mixAmount","color","isBright","getLuminance","mixAdjustment","scaleMixAmount","mixPercent","shade","tint"],"sources":["../../../../src/color/utils/tintOrShadeUiColor.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport getLuminance from 'polished/lib/color/getLuminance'\nimport shade from 'polished/lib/color/shade'\nimport tint from 'polished/lib/color/tint'\nimport { scaleMixAmount } from './scaleMixAmount'\n\n/**\n * Tints or shades a color based on the luminosity of the color\n *\n * Used for generating our UI colors based on the background color\n *\n * If the color has a higher luminosity, a light background for example,\n * the color is shaded, returning a color mixed with black\n *\n * For colors with lower luminosity, dark background colors for example,\n * the colors is tinted,returning a color mixed with white\n *\n * @param mixAmount 0 - 100\n * @param color\n */\nexport const tintOrShadeUiColor = (mixAmount: number, color: string) => {\n  const isBright = getLuminance(color) > 0.5\n  const mixAdjustment = isBright ? mixAmount : scaleMixAmount(mixAmount, 1.5)\n\n  /* shade & tint functions cannot exceed 100% */\n  const mixPercent = mixAdjustment > 100 ? 1 : mixAdjustment / 100\n\n  return (isBright ? shade : tint)(mixPercent, color)\n}\n"],"mappings":";;;;;;;AAKA;AACA;AACA;AACA;;AAgBO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,SAAiB,EAAEC,KAAa,EAAK;EACtE,IAAMC,QAAQ,GAAG,IAAAC,wBAAY,EAACF,KAAK,CAAC,GAAG,GAAG;EAC1C,IAAMG,aAAa,GAAGF,QAAQ,GAAGF,SAAS,GAAG,IAAAK,8BAAc,EAACL,SAAS,EAAE,GAAG,CAAC;;EAG3E,IAAMM,UAAU,GAAGF,aAAa,GAAG,GAAG,GAAG,CAAC,GAAGA,aAAa,GAAG,GAAG;EAEhE,OAAO,CAACF,QAAQ,GAAGK,iBAAK,GAAGC,gBAAI,EAAEF,UAAU,EAAEL,KAAK,CAAC;AACrD,CAAC;AAAA"}